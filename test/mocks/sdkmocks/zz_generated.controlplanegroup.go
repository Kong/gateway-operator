// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdkmocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/components"
	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockControlPlaneGroupSDK creates a new instance of MockControlPlaneGroupSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockControlPlaneGroupSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockControlPlaneGroupSDK {
	mock := &MockControlPlaneGroupSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockControlPlaneGroupSDK is an autogenerated mock type for the ControlPlaneGroupSDK type
type MockControlPlaneGroupSDK struct {
	mock.Mock
}

type MockControlPlaneGroupSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockControlPlaneGroupSDK) EXPECT() *MockControlPlaneGroupSDK_Expecter {
	return &MockControlPlaneGroupSDK_Expecter{mock: &_m.Mock}
}

// PutControlPlanesIDGroupMemberships provides a mock function for the type MockControlPlaneGroupSDK
func (_mock *MockControlPlaneGroupSDK) PutControlPlanesIDGroupMemberships(ctx context.Context, id string, groupMembership *components.GroupMembership, opts ...operations.Option) (*operations.PutControlPlanesIDGroupMembershipsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, id, groupMembership, opts)
	} else {
		tmpRet = _mock.Called(ctx, id, groupMembership)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PutControlPlanesIDGroupMemberships")
	}

	var r0 *operations.PutControlPlanesIDGroupMembershipsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *components.GroupMembership, ...operations.Option) (*operations.PutControlPlanesIDGroupMembershipsResponse, error)); ok {
		return returnFunc(ctx, id, groupMembership, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *components.GroupMembership, ...operations.Option) *operations.PutControlPlanesIDGroupMembershipsResponse); ok {
		r0 = returnFunc(ctx, id, groupMembership, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.PutControlPlanesIDGroupMembershipsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *components.GroupMembership, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, id, groupMembership, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutControlPlanesIDGroupMemberships'
type MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call struct {
	*mock.Call
}

// PutControlPlanesIDGroupMemberships is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - groupMembership *components.GroupMembership
//   - opts ...operations.Option
func (_e *MockControlPlaneGroupSDK_Expecter) PutControlPlanesIDGroupMemberships(ctx interface{}, id interface{}, groupMembership interface{}, opts ...interface{}) *MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call {
	return &MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call{Call: _e.mock.On("PutControlPlanesIDGroupMemberships",
		append([]interface{}{ctx, id, groupMembership}, opts...)...)}
}

func (_c *MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call) Run(run func(ctx context.Context, id string, groupMembership *components.GroupMembership, opts ...operations.Option)) *MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *components.GroupMembership
		if args[2] != nil {
			arg2 = args[2].(*components.GroupMembership)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call) Return(putControlPlanesIDGroupMembershipsResponse *operations.PutControlPlanesIDGroupMembershipsResponse, err error) *MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call {
	_c.Call.Return(putControlPlanesIDGroupMembershipsResponse, err)
	return _c
}

func (_c *MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call) RunAndReturn(run func(ctx context.Context, id string, groupMembership *components.GroupMembership, opts ...operations.Option) (*operations.PutControlPlanesIDGroupMembershipsResponse, error)) *MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call {
	_c.Call.Return(run)
	return _c
}
