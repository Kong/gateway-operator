package main

import (
	"flag"
	"fmt"
	"strings"

	"github.com/kong/kong-operator/modules/cli"
	"github.com/kong/kong-operator/modules/manager"
	"github.com/kong/kong-operator/modules/manager/config"
	"github.com/kong/kong-operator/modules/manager/metadata"
)

// This program generates markdown documentation for KGO executable's flags.
// It is based on KIC's
// https://github.com/Kong/kubernetes-ingress-controller/tree/513db87cbf94ce66207f74365b502e8cde841357/scripts/cli-arguments-docs-gen.
func main() {
	c := cli.New(metadata.Metadata())
	flags := c.FlagSet()

	markdown := strings.Builder{}
	markdown.WriteString("<!-- This document is generated by KGO's 'generate.cli-arguments-docs' make target, DO NOT EDIT -->\n\n")
	markdown.WriteString("## Flags\n\n")
	markdown.WriteString("| Flag | Type | Description | Default |\n")
	markdown.WriteString("| ---- | ---- | ----------- | ------- |\n")

	flags.VisitAll(func(flag *flag.Flag) {
		name := fmt.Sprintf("`--%s`", flag.Name)

		typ := fmt.Sprintf("`%s`", getTypeForHuman(flag))

		description := flag.Usage

		// In case of panic adjust in KGO code the description of the flag.
		// Make sure the first letter is capitalized.
		if first := description[0]; first >= 'a' && first <= 'z' {
			// We don't control zap's flags, so ignore them.
			if !strings.HasPrefix(name, "`--zap-") {
				panic(fmt.Sprintf("flag's: %s description must start with a capital letter: %s", flag.Name, description))
			}
		}

		// Make sure the last character is a period.
		if !strings.HasSuffix(description, ".") {
			// We don't control zap's flags, so ignore them.
			if !strings.HasPrefix(name, "`--zap-") {
				panic(fmt.Sprintf("flag's: %s description must end with a period: %s", flag.Name, description))
			} else {
				description += "."
			}
		}

		defaultValue := fmt.Sprintf("`%s`", flag.DefValue)
		if flag.DefValue == "" {
			defaultValue = "`\"\"`"
		}

		markdown.WriteString(fmt.Sprintf("| %s | %s | %s | %s |\n", name, typ, description, defaultValue))
	})

	fmt.Print(markdown.String())
}

// getTypeForHuman returns a human-friendly type name for the given flag that
// is compatible with native way of printing types in --help output.
//
// Panics if the type is unknown - this way it validates whether type is human readable.
func getTypeForHuman(f *flag.Flag) string {
	// NOTE: Usage of "flag" limits the discoverability of flags so we use the
	// workaround to get the type of the flag.
	type boolvalue interface {
		IsBoolFlag() bool
	}
	type stringvalue interface {
		Set(string) error
		Get() any
		String() string
	}
	// Unexported type from https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg/log/zap
	type zapFlag interface {
		Type() string
		Set(string) error
		String() string
	}

	switch typ := f.Value.(type) {
	case boolvalue:
		return "bool"
	case stringvalue, *manager.MetricsAccessFilter, *config.KeyType:
		return "string"
	case zapFlag:
		if f.Name == "bool" {
			return "bool"
		}
		return "string"
	default:
		panic(fmt.Sprintf("unknown type %T", typ))
	}
}
