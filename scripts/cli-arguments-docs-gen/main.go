package main

import (
	"flag"
	"fmt"
	"strings"

	"github.com/kong/kong-operator/modules/cli"
	"github.com/kong/kong-operator/modules/manager"
	"github.com/kong/kong-operator/modules/manager/config"
	"github.com/kong/kong-operator/modules/manager/metadata"
)

// This program generates markdown documentation for KGO executable's flags.
// It is based on KIC's
// https://github.com/Kong/kubernetes-ingress-controller/tree/513db87cbf94ce66207f74365b502e8cde841357/scripts/cli-arguments-docs-gen.
func main() {
	c := cli.New(metadata.Metadata())
	docsMarkdown := generateDocs(c)
	fmt.Print(docsMarkdown)
}

func generateDocs(c *cli.CLI) string {
	var markdown strings.Builder
	writePreamble(&markdown)
	c.FlagSet().VisitAll(visit(&markdown))
	writeClosure(&markdown)
	return markdown.String()
}

func visit(markdown *strings.Builder) func(*flag.Flag) {
	return func(flag *flag.Flag) {
		name := fmt.Sprintf("`--%s`", flag.Name)
		typ := fmt.Sprintf("`%s`", getTypeForHuman(flag))

		description := strings.ReplaceAll(flag.Usage, `"`, `\"`)

		// In case of panic adjust in KIC code the description of the flag.
		// Make sure the first letter is capitalized.
		if first := description[0]; first >= 'a' && first <= 'z' {
			panic(fmt.Sprintf("flag's: %s description must start with a capital letter: %s", flag.Name, description))
		}
		// Make sure the last character is a period.
		if !strings.HasSuffix(description, ".") {
			// We don't control zap's flags so don't fail on these.
			if !strings.HasPrefix(flag.Name, "zap") {
				panic(fmt.Sprintf("flag's: %s description must end with a period: %s", flag.Name, description))
			}
		}

		// Display empty quotes without backticks for empty string.
		defaultValue := "\"\""
		if flag.DefValue != "" {
			defaultValue = fmt.Sprintf("'`%s`'", flag.DefValue)
		}

		mustWrite(markdown, fmt.Sprintf("  - flag: '%s'\n", name))
		mustWrite(markdown, fmt.Sprintf("    type: '%s'\n", typ))
		mustWrite(markdown, fmt.Sprintf("    description: \"%s\"\n", description))
		mustWrite(markdown, fmt.Sprintf("    default: %s\n", defaultValue))
	}
}

// getTypeForHuman returns a human-friendly type name for the given flag that
// is compatible with native way of printing types in --help output.
//
// Panics if the type is unknown - this way it validates whether type is human readable.
func getTypeForHuman(f *flag.Flag) string {
	// NOTE: Usage of "flag" limits the discoverability of flags so we use the
	// workaround to get the type of the flag.
	type boolvalue interface {
		IsBoolFlag() bool
	}
	type stringvalue interface {
		Set(string) error
		Get() any
		String() string
	}
	// Unexported type from https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg/log/zap
	type zapFlag interface {
		Type() string
		Set(string) error
		String() string
	}

	switch typ := f.Value.(type) {
	case boolvalue:
		return "bool"
	case stringvalue, *manager.MetricsAccessFilter, *config.KeyType:
		return "string"
	case zapFlag:
		if f.Name == "bool" {
			return "bool"
		}
		return "string"
	default:
		panic(fmt.Sprintf("unknown type %T", typ))
	}
}

func writePreamble(markdown *strings.Builder) {
	mustWrite(markdown, "<!-- This document is generated by KO's 'generate.cli-arguments-docs' make target, DO NOT EDIT -->\n\n")
	mustWrite(markdown, "## Flags\n\n")
	mustWrite(markdown, "{% table %}\n")
	mustWrite(markdown, "columns:\n")
	mustWrite(markdown, "  - title: Flag\n")
	mustWrite(markdown, "    key: flag\n")
	mustWrite(markdown, "  - title: Type\n")
	mustWrite(markdown, "    key: type\n")
	mustWrite(markdown, "  - title: Description\n")
	mustWrite(markdown, "    key: description\n")
	mustWrite(markdown, "  - title: Default\n")
	mustWrite(markdown, "    key: default\n")
	mustWrite(markdown, "rows:\n")
}

// mustWrite writes to a strings.Builder and panics if there's an error.
func mustWrite(b *strings.Builder, s string) {
	_, err := b.WriteString(s)
	if err != nil {
		panic(fmt.Sprintf("failed to write to string builder: %v", err))
	}
}

func writeClosure(markdown *strings.Builder) {
	mustWrite(markdown, "{% endtable %}\n")
}
