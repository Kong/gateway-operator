// Code generated by mockery. DO NOT EDIT.

package ops

import (
	context "context"

	operations "github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// MockKongCredentialAPIKeySDK is an autogenerated mock type for the KongCredentialAPIKeySDK type
type MockKongCredentialAPIKeySDK struct {
	mock.Mock
}

type MockKongCredentialAPIKeySDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKongCredentialAPIKeySDK) EXPECT() *MockKongCredentialAPIKeySDK_Expecter {
	return &MockKongCredentialAPIKeySDK_Expecter{mock: &_m.Mock}
}

// CreateKeyAuthWithConsumer provides a mock function with given fields: ctx, req, opts
func (_m *MockKongCredentialAPIKeySDK) CreateKeyAuthWithConsumer(ctx context.Context, req operations.CreateKeyAuthWithConsumerRequest, opts ...operations.Option) (*operations.CreateKeyAuthWithConsumerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateKeyAuthWithConsumer")
	}

	var r0 *operations.CreateKeyAuthWithConsumerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.CreateKeyAuthWithConsumerRequest, ...operations.Option) (*operations.CreateKeyAuthWithConsumerResponse, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.CreateKeyAuthWithConsumerRequest, ...operations.Option) *operations.CreateKeyAuthWithConsumerResponse); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateKeyAuthWithConsumerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.CreateKeyAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateKeyAuthWithConsumer'
type MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call struct {
	*mock.Call
}

// CreateKeyAuthWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - req operations.CreateKeyAuthWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialAPIKeySDK_Expecter) CreateKeyAuthWithConsumer(ctx interface{}, req interface{}, opts ...interface{}) *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call {
	return &MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call{Call: _e.mock.On("CreateKeyAuthWithConsumer",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call) Run(run func(ctx context.Context, req operations.CreateKeyAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.CreateKeyAuthWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call) Return(_a0 *operations.CreateKeyAuthWithConsumerResponse, _a1 error) *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call) RunAndReturn(run func(context.Context, operations.CreateKeyAuthWithConsumerRequest, ...operations.Option) (*operations.CreateKeyAuthWithConsumerResponse, error)) *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteKeyAuthWithConsumer provides a mock function with given fields: ctx, request, opts
func (_m *MockKongCredentialAPIKeySDK) DeleteKeyAuthWithConsumer(ctx context.Context, request operations.DeleteKeyAuthWithConsumerRequest, opts ...operations.Option) (*operations.DeleteKeyAuthWithConsumerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteKeyAuthWithConsumer")
	}

	var r0 *operations.DeleteKeyAuthWithConsumerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.DeleteKeyAuthWithConsumerRequest, ...operations.Option) (*operations.DeleteKeyAuthWithConsumerResponse, error)); ok {
		return rf(ctx, request, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.DeleteKeyAuthWithConsumerRequest, ...operations.Option) *operations.DeleteKeyAuthWithConsumerResponse); ok {
		r0 = rf(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteKeyAuthWithConsumerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.DeleteKeyAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteKeyAuthWithConsumer'
type MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call struct {
	*mock.Call
}

// DeleteKeyAuthWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.DeleteKeyAuthWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialAPIKeySDK_Expecter) DeleteKeyAuthWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call {
	return &MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call{Call: _e.mock.On("DeleteKeyAuthWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call) Run(run func(ctx context.Context, request operations.DeleteKeyAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.DeleteKeyAuthWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call) Return(_a0 *operations.DeleteKeyAuthWithConsumerResponse, _a1 error) *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call) RunAndReturn(run func(context.Context, operations.DeleteKeyAuthWithConsumerRequest, ...operations.Option) (*operations.DeleteKeyAuthWithConsumerResponse, error)) *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertKeyAuthWithConsumer provides a mock function with given fields: ctx, request, opts
func (_m *MockKongCredentialAPIKeySDK) UpsertKeyAuthWithConsumer(ctx context.Context, request operations.UpsertKeyAuthWithConsumerRequest, opts ...operations.Option) (*operations.UpsertKeyAuthWithConsumerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpsertKeyAuthWithConsumer")
	}

	var r0 *operations.UpsertKeyAuthWithConsumerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.UpsertKeyAuthWithConsumerRequest, ...operations.Option) (*operations.UpsertKeyAuthWithConsumerResponse, error)); ok {
		return rf(ctx, request, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.UpsertKeyAuthWithConsumerRequest, ...operations.Option) *operations.UpsertKeyAuthWithConsumerResponse); ok {
		r0 = rf(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertKeyAuthWithConsumerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.UpsertKeyAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertKeyAuthWithConsumer'
type MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call struct {
	*mock.Call
}

// UpsertKeyAuthWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.UpsertKeyAuthWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialAPIKeySDK_Expecter) UpsertKeyAuthWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call {
	return &MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call{Call: _e.mock.On("UpsertKeyAuthWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call) Run(run func(ctx context.Context, request operations.UpsertKeyAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertKeyAuthWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call) Return(_a0 *operations.UpsertKeyAuthWithConsumerResponse, _a1 error) *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call) RunAndReturn(run func(context.Context, operations.UpsertKeyAuthWithConsumerRequest, ...operations.Option) (*operations.UpsertKeyAuthWithConsumerResponse, error)) *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKongCredentialAPIKeySDK creates a new instance of MockKongCredentialAPIKeySDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKongCredentialAPIKeySDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKongCredentialAPIKeySDK {
	mock := &MockKongCredentialAPIKeySDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
