// Code generated by mockery. DO NOT EDIT.

package ops

import (
	context "context"

	components "github.com/Kong/sdk-konnect-go/models/components"

	mock "github.com/stretchr/testify/mock"

	operations "github.com/Kong/sdk-konnect-go/models/operations"
)

// MockDataPlaneClientCertificatesSDK is an autogenerated mock type for the DataPlaneClientCertificatesSDK type
type MockDataPlaneClientCertificatesSDK struct {
	mock.Mock
}

type MockDataPlaneClientCertificatesSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataPlaneClientCertificatesSDK) EXPECT() *MockDataPlaneClientCertificatesSDK_Expecter {
	return &MockDataPlaneClientCertificatesSDK_Expecter{mock: &_m.Mock}
}

// CreateDataplaneCertificate provides a mock function with given fields: ctx, cpID, dpReq, opts
func (_m *MockDataPlaneClientCertificatesSDK) CreateDataplaneCertificate(ctx context.Context, cpID string, dpReq *components.DataPlaneClientCertificateRequest, opts ...operations.Option) (*operations.CreateDataplaneCertificateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, cpID, dpReq)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataplaneCertificate")
	}

	var r0 *operations.CreateDataplaneCertificateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *components.DataPlaneClientCertificateRequest, ...operations.Option) (*operations.CreateDataplaneCertificateResponse, error)); ok {
		return rf(ctx, cpID, dpReq, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *components.DataPlaneClientCertificateRequest, ...operations.Option) *operations.CreateDataplaneCertificateResponse); ok {
		r0 = rf(ctx, cpID, dpReq, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateDataplaneCertificateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *components.DataPlaneClientCertificateRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, cpID, dpReq, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDataplaneCertificate'
type MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call struct {
	*mock.Call
}

// CreateDataplaneCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - cpID string
//   - dpReq *components.DataPlaneClientCertificateRequest
//   - opts ...operations.Option
func (_e *MockDataPlaneClientCertificatesSDK_Expecter) CreateDataplaneCertificate(ctx interface{}, cpID interface{}, dpReq interface{}, opts ...interface{}) *MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call {
	return &MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call{Call: _e.mock.On("CreateDataplaneCertificate",
		append([]interface{}{ctx, cpID, dpReq}, opts...)...)}
}

func (_c *MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call) Run(run func(ctx context.Context, cpID string, dpReq *components.DataPlaneClientCertificateRequest, opts ...operations.Option)) *MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*components.DataPlaneClientCertificateRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call) Return(_a0 *operations.CreateDataplaneCertificateResponse, _a1 error) *MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call) RunAndReturn(run func(context.Context, string, *components.DataPlaneClientCertificateRequest, ...operations.Option) (*operations.CreateDataplaneCertificateResponse, error)) *MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataplaneCertificate provides a mock function with given fields: ctx, controlPlaneID, certificateID, opts
func (_m *MockDataPlaneClientCertificatesSDK) DeleteDataplaneCertificate(ctx context.Context, controlPlaneID string, certificateID string, opts ...operations.Option) (*operations.DeleteDataplaneCertificateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, controlPlaneID, certificateID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataplaneCertificate")
	}

	var r0 *operations.DeleteDataplaneCertificateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteDataplaneCertificateResponse, error)); ok {
		return rf(ctx, controlPlaneID, certificateID, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteDataplaneCertificateResponse); ok {
		r0 = rf(ctx, controlPlaneID, certificateID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteDataplaneCertificateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = rf(ctx, controlPlaneID, certificateID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataplaneCertificate'
type MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call struct {
	*mock.Call
}

// DeleteDataplaneCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - certificateID string
//   - opts ...operations.Option
func (_e *MockDataPlaneClientCertificatesSDK_Expecter) DeleteDataplaneCertificate(ctx interface{}, controlPlaneID interface{}, certificateID interface{}, opts ...interface{}) *MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call {
	return &MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call{Call: _e.mock.On("DeleteDataplaneCertificate",
		append([]interface{}{ctx, controlPlaneID, certificateID}, opts...)...)}
}

func (_c *MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call) Run(run func(ctx context.Context, controlPlaneID string, certificateID string, opts ...operations.Option)) *MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call) Return(_a0 *operations.DeleteDataplaneCertificateResponse, _a1 error) *MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call) RunAndReturn(run func(context.Context, string, string, ...operations.Option) (*operations.DeleteDataplaneCertificateResponse, error)) *MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataPlaneClientCertificatesSDK creates a new instance of MockDataPlaneClientCertificatesSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataPlaneClientCertificatesSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataPlaneClientCertificatesSDK {
	mock := &MockDataPlaneClientCertificatesSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
