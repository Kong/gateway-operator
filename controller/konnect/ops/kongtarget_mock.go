// Code generated by mockery. DO NOT EDIT.

package ops

import (
	context "context"

	operations "github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// MockTargetsSDK is an autogenerated mock type for the TargetsSDK type
type MockTargetsSDK struct {
	mock.Mock
}

type MockTargetsSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTargetsSDK) EXPECT() *MockTargetsSDK_Expecter {
	return &MockTargetsSDK_Expecter{mock: &_m.Mock}
}

// CreateTargetWithUpstream provides a mock function with given fields: ctx, req, opts
func (_m *MockTargetsSDK) CreateTargetWithUpstream(ctx context.Context, req operations.CreateTargetWithUpstreamRequest, opts ...operations.Option) (*operations.CreateTargetWithUpstreamResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTargetWithUpstream")
	}

	var r0 *operations.CreateTargetWithUpstreamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.CreateTargetWithUpstreamRequest, ...operations.Option) (*operations.CreateTargetWithUpstreamResponse, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.CreateTargetWithUpstreamRequest, ...operations.Option) *operations.CreateTargetWithUpstreamResponse); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateTargetWithUpstreamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.CreateTargetWithUpstreamRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTargetsSDK_CreateTargetWithUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTargetWithUpstream'
type MockTargetsSDK_CreateTargetWithUpstream_Call struct {
	*mock.Call
}

// CreateTargetWithUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - req operations.CreateTargetWithUpstreamRequest
//   - opts ...operations.Option
func (_e *MockTargetsSDK_Expecter) CreateTargetWithUpstream(ctx interface{}, req interface{}, opts ...interface{}) *MockTargetsSDK_CreateTargetWithUpstream_Call {
	return &MockTargetsSDK_CreateTargetWithUpstream_Call{Call: _e.mock.On("CreateTargetWithUpstream",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockTargetsSDK_CreateTargetWithUpstream_Call) Run(run func(ctx context.Context, req operations.CreateTargetWithUpstreamRequest, opts ...operations.Option)) *MockTargetsSDK_CreateTargetWithUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.CreateTargetWithUpstreamRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTargetsSDK_CreateTargetWithUpstream_Call) Return(_a0 *operations.CreateTargetWithUpstreamResponse, _a1 error) *MockTargetsSDK_CreateTargetWithUpstream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTargetsSDK_CreateTargetWithUpstream_Call) RunAndReturn(run func(context.Context, operations.CreateTargetWithUpstreamRequest, ...operations.Option) (*operations.CreateTargetWithUpstreamResponse, error)) *MockTargetsSDK_CreateTargetWithUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTargetWithUpstream provides a mock function with given fields: ctx, req, opts
func (_m *MockTargetsSDK) DeleteTargetWithUpstream(ctx context.Context, req operations.DeleteTargetWithUpstreamRequest, opts ...operations.Option) (*operations.DeleteTargetWithUpstreamResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTargetWithUpstream")
	}

	var r0 *operations.DeleteTargetWithUpstreamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.DeleteTargetWithUpstreamRequest, ...operations.Option) (*operations.DeleteTargetWithUpstreamResponse, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.DeleteTargetWithUpstreamRequest, ...operations.Option) *operations.DeleteTargetWithUpstreamResponse); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteTargetWithUpstreamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.DeleteTargetWithUpstreamRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTargetsSDK_DeleteTargetWithUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTargetWithUpstream'
type MockTargetsSDK_DeleteTargetWithUpstream_Call struct {
	*mock.Call
}

// DeleteTargetWithUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - req operations.DeleteTargetWithUpstreamRequest
//   - opts ...operations.Option
func (_e *MockTargetsSDK_Expecter) DeleteTargetWithUpstream(ctx interface{}, req interface{}, opts ...interface{}) *MockTargetsSDK_DeleteTargetWithUpstream_Call {
	return &MockTargetsSDK_DeleteTargetWithUpstream_Call{Call: _e.mock.On("DeleteTargetWithUpstream",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockTargetsSDK_DeleteTargetWithUpstream_Call) Run(run func(ctx context.Context, req operations.DeleteTargetWithUpstreamRequest, opts ...operations.Option)) *MockTargetsSDK_DeleteTargetWithUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.DeleteTargetWithUpstreamRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTargetsSDK_DeleteTargetWithUpstream_Call) Return(_a0 *operations.DeleteTargetWithUpstreamResponse, _a1 error) *MockTargetsSDK_DeleteTargetWithUpstream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTargetsSDK_DeleteTargetWithUpstream_Call) RunAndReturn(run func(context.Context, operations.DeleteTargetWithUpstreamRequest, ...operations.Option) (*operations.DeleteTargetWithUpstreamResponse, error)) *MockTargetsSDK_DeleteTargetWithUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertTargetWithUpstream provides a mock function with given fields: ctx, req, opts
func (_m *MockTargetsSDK) UpsertTargetWithUpstream(ctx context.Context, req operations.UpsertTargetWithUpstreamRequest, opts ...operations.Option) (*operations.UpsertTargetWithUpstreamResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpsertTargetWithUpstream")
	}

	var r0 *operations.UpsertTargetWithUpstreamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.UpsertTargetWithUpstreamRequest, ...operations.Option) (*operations.UpsertTargetWithUpstreamResponse, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.UpsertTargetWithUpstreamRequest, ...operations.Option) *operations.UpsertTargetWithUpstreamResponse); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertTargetWithUpstreamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.UpsertTargetWithUpstreamRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTargetsSDK_UpsertTargetWithUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertTargetWithUpstream'
type MockTargetsSDK_UpsertTargetWithUpstream_Call struct {
	*mock.Call
}

// UpsertTargetWithUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - req operations.UpsertTargetWithUpstreamRequest
//   - opts ...operations.Option
func (_e *MockTargetsSDK_Expecter) UpsertTargetWithUpstream(ctx interface{}, req interface{}, opts ...interface{}) *MockTargetsSDK_UpsertTargetWithUpstream_Call {
	return &MockTargetsSDK_UpsertTargetWithUpstream_Call{Call: _e.mock.On("UpsertTargetWithUpstream",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockTargetsSDK_UpsertTargetWithUpstream_Call) Run(run func(ctx context.Context, req operations.UpsertTargetWithUpstreamRequest, opts ...operations.Option)) *MockTargetsSDK_UpsertTargetWithUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertTargetWithUpstreamRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTargetsSDK_UpsertTargetWithUpstream_Call) Return(_a0 *operations.UpsertTargetWithUpstreamResponse, _a1 error) *MockTargetsSDK_UpsertTargetWithUpstream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTargetsSDK_UpsertTargetWithUpstream_Call) RunAndReturn(run func(context.Context, operations.UpsertTargetWithUpstreamRequest, ...operations.Option) (*operations.UpsertTargetWithUpstreamResponse, error)) *MockTargetsSDK_UpsertTargetWithUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTargetsSDK creates a new instance of MockTargetsSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTargetsSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTargetsSDK {
	mock := &MockTargetsSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
