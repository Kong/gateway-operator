// Code generated by mockery. DO NOT EDIT.

package ops

import (
	context "context"

	components "github.com/Kong/sdk-konnect-go/models/components"

	mock "github.com/stretchr/testify/mock"

	operations "github.com/Kong/sdk-konnect-go/models/operations"
)

// MockCACertificatesSDK is an autogenerated mock type for the CACertificatesSDK type
type MockCACertificatesSDK struct {
	mock.Mock
}

type MockCACertificatesSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCACertificatesSDK) EXPECT() *MockCACertificatesSDK_Expecter {
	return &MockCACertificatesSDK_Expecter{mock: &_m.Mock}
}

// CreateCaCertificate provides a mock function with given fields: ctx, controlPlaneID, caCertificate, opts
func (_m *MockCACertificatesSDK) CreateCaCertificate(ctx context.Context, controlPlaneID string, caCertificate components.CACertificateInput, opts ...operations.Option) (*operations.CreateCaCertificateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, controlPlaneID, caCertificate)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCaCertificate")
	}

	var r0 *operations.CreateCaCertificateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, components.CACertificateInput, ...operations.Option) (*operations.CreateCaCertificateResponse, error)); ok {
		return rf(ctx, controlPlaneID, caCertificate, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, components.CACertificateInput, ...operations.Option) *operations.CreateCaCertificateResponse); ok {
		r0 = rf(ctx, controlPlaneID, caCertificate, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateCaCertificateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, components.CACertificateInput, ...operations.Option) error); ok {
		r1 = rf(ctx, controlPlaneID, caCertificate, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCACertificatesSDK_CreateCaCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCaCertificate'
type MockCACertificatesSDK_CreateCaCertificate_Call struct {
	*mock.Call
}

// CreateCaCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - caCertificate components.CACertificateInput
//   - opts ...operations.Option
func (_e *MockCACertificatesSDK_Expecter) CreateCaCertificate(ctx interface{}, controlPlaneID interface{}, caCertificate interface{}, opts ...interface{}) *MockCACertificatesSDK_CreateCaCertificate_Call {
	return &MockCACertificatesSDK_CreateCaCertificate_Call{Call: _e.mock.On("CreateCaCertificate",
		append([]interface{}{ctx, controlPlaneID, caCertificate}, opts...)...)}
}

func (_c *MockCACertificatesSDK_CreateCaCertificate_Call) Run(run func(ctx context.Context, controlPlaneID string, caCertificate components.CACertificateInput, opts ...operations.Option)) *MockCACertificatesSDK_CreateCaCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(components.CACertificateInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCACertificatesSDK_CreateCaCertificate_Call) Return(_a0 *operations.CreateCaCertificateResponse, _a1 error) *MockCACertificatesSDK_CreateCaCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCACertificatesSDK_CreateCaCertificate_Call) RunAndReturn(run func(context.Context, string, components.CACertificateInput, ...operations.Option) (*operations.CreateCaCertificateResponse, error)) *MockCACertificatesSDK_CreateCaCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCaCertificate provides a mock function with given fields: ctx, controlPlaneID, caCertificateID, opts
func (_m *MockCACertificatesSDK) DeleteCaCertificate(ctx context.Context, controlPlaneID string, caCertificateID string, opts ...operations.Option) (*operations.DeleteCaCertificateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, controlPlaneID, caCertificateID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCaCertificate")
	}

	var r0 *operations.DeleteCaCertificateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteCaCertificateResponse, error)); ok {
		return rf(ctx, controlPlaneID, caCertificateID, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteCaCertificateResponse); ok {
		r0 = rf(ctx, controlPlaneID, caCertificateID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteCaCertificateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = rf(ctx, controlPlaneID, caCertificateID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCACertificatesSDK_DeleteCaCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCaCertificate'
type MockCACertificatesSDK_DeleteCaCertificate_Call struct {
	*mock.Call
}

// DeleteCaCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - caCertificateID string
//   - opts ...operations.Option
func (_e *MockCACertificatesSDK_Expecter) DeleteCaCertificate(ctx interface{}, controlPlaneID interface{}, caCertificateID interface{}, opts ...interface{}) *MockCACertificatesSDK_DeleteCaCertificate_Call {
	return &MockCACertificatesSDK_DeleteCaCertificate_Call{Call: _e.mock.On("DeleteCaCertificate",
		append([]interface{}{ctx, controlPlaneID, caCertificateID}, opts...)...)}
}

func (_c *MockCACertificatesSDK_DeleteCaCertificate_Call) Run(run func(ctx context.Context, controlPlaneID string, caCertificateID string, opts ...operations.Option)) *MockCACertificatesSDK_DeleteCaCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockCACertificatesSDK_DeleteCaCertificate_Call) Return(_a0 *operations.DeleteCaCertificateResponse, _a1 error) *MockCACertificatesSDK_DeleteCaCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCACertificatesSDK_DeleteCaCertificate_Call) RunAndReturn(run func(context.Context, string, string, ...operations.Option) (*operations.DeleteCaCertificateResponse, error)) *MockCACertificatesSDK_DeleteCaCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertCaCertificate provides a mock function with given fields: ctx, request, opts
func (_m *MockCACertificatesSDK) UpsertCaCertificate(ctx context.Context, request operations.UpsertCaCertificateRequest, opts ...operations.Option) (*operations.UpsertCaCertificateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpsertCaCertificate")
	}

	var r0 *operations.UpsertCaCertificateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.UpsertCaCertificateRequest, ...operations.Option) (*operations.UpsertCaCertificateResponse, error)); ok {
		return rf(ctx, request, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.UpsertCaCertificateRequest, ...operations.Option) *operations.UpsertCaCertificateResponse); ok {
		r0 = rf(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertCaCertificateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.UpsertCaCertificateRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCACertificatesSDK_UpsertCaCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertCaCertificate'
type MockCACertificatesSDK_UpsertCaCertificate_Call struct {
	*mock.Call
}

// UpsertCaCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.UpsertCaCertificateRequest
//   - opts ...operations.Option
func (_e *MockCACertificatesSDK_Expecter) UpsertCaCertificate(ctx interface{}, request interface{}, opts ...interface{}) *MockCACertificatesSDK_UpsertCaCertificate_Call {
	return &MockCACertificatesSDK_UpsertCaCertificate_Call{Call: _e.mock.On("UpsertCaCertificate",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockCACertificatesSDK_UpsertCaCertificate_Call) Run(run func(ctx context.Context, request operations.UpsertCaCertificateRequest, opts ...operations.Option)) *MockCACertificatesSDK_UpsertCaCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertCaCertificateRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCACertificatesSDK_UpsertCaCertificate_Call) Return(_a0 *operations.UpsertCaCertificateResponse, _a1 error) *MockCACertificatesSDK_UpsertCaCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCACertificatesSDK_UpsertCaCertificate_Call) RunAndReturn(run func(context.Context, operations.UpsertCaCertificateRequest, ...operations.Option) (*operations.UpsertCaCertificateResponse, error)) *MockCACertificatesSDK_UpsertCaCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCACertificatesSDK creates a new instance of MockCACertificatesSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCACertificatesSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCACertificatesSDK {
	mock := &MockCACertificatesSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
