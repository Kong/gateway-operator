// Code generated by mockery. DO NOT EDIT.

package ops

import (
	context "context"

	operations "github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// MockKongCredentialACLSDK is an autogenerated mock type for the KongCredentialACLSDK type
type MockKongCredentialACLSDK struct {
	mock.Mock
}

type MockKongCredentialACLSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKongCredentialACLSDK) EXPECT() *MockKongCredentialACLSDK_Expecter {
	return &MockKongCredentialACLSDK_Expecter{mock: &_m.Mock}
}

// CreateACLWithConsumer provides a mock function with given fields: ctx, req, opts
func (_m *MockKongCredentialACLSDK) CreateACLWithConsumer(ctx context.Context, req operations.CreateACLWithConsumerRequest, opts ...operations.Option) (*operations.CreateACLWithConsumerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateACLWithConsumer")
	}

	var r0 *operations.CreateACLWithConsumerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.CreateACLWithConsumerRequest, ...operations.Option) (*operations.CreateACLWithConsumerResponse, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.CreateACLWithConsumerRequest, ...operations.Option) *operations.CreateACLWithConsumerResponse); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateACLWithConsumerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.CreateACLWithConsumerRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKongCredentialACLSDK_CreateACLWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateACLWithConsumer'
type MockKongCredentialACLSDK_CreateACLWithConsumer_Call struct {
	*mock.Call
}

// CreateACLWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - req operations.CreateACLWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialACLSDK_Expecter) CreateACLWithConsumer(ctx interface{}, req interface{}, opts ...interface{}) *MockKongCredentialACLSDK_CreateACLWithConsumer_Call {
	return &MockKongCredentialACLSDK_CreateACLWithConsumer_Call{Call: _e.mock.On("CreateACLWithConsumer",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockKongCredentialACLSDK_CreateACLWithConsumer_Call) Run(run func(ctx context.Context, req operations.CreateACLWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialACLSDK_CreateACLWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.CreateACLWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialACLSDK_CreateACLWithConsumer_Call) Return(_a0 *operations.CreateACLWithConsumerResponse, _a1 error) *MockKongCredentialACLSDK_CreateACLWithConsumer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKongCredentialACLSDK_CreateACLWithConsumer_Call) RunAndReturn(run func(context.Context, operations.CreateACLWithConsumerRequest, ...operations.Option) (*operations.CreateACLWithConsumerResponse, error)) *MockKongCredentialACLSDK_CreateACLWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteACLWithConsumer provides a mock function with given fields: ctx, request, opts
func (_m *MockKongCredentialACLSDK) DeleteACLWithConsumer(ctx context.Context, request operations.DeleteACLWithConsumerRequest, opts ...operations.Option) (*operations.DeleteACLWithConsumerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteACLWithConsumer")
	}

	var r0 *operations.DeleteACLWithConsumerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.DeleteACLWithConsumerRequest, ...operations.Option) (*operations.DeleteACLWithConsumerResponse, error)); ok {
		return rf(ctx, request, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.DeleteACLWithConsumerRequest, ...operations.Option) *operations.DeleteACLWithConsumerResponse); ok {
		r0 = rf(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteACLWithConsumerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.DeleteACLWithConsumerRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKongCredentialACLSDK_DeleteACLWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteACLWithConsumer'
type MockKongCredentialACLSDK_DeleteACLWithConsumer_Call struct {
	*mock.Call
}

// DeleteACLWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.DeleteACLWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialACLSDK_Expecter) DeleteACLWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call {
	return &MockKongCredentialACLSDK_DeleteACLWithConsumer_Call{Call: _e.mock.On("DeleteACLWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call) Run(run func(ctx context.Context, request operations.DeleteACLWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.DeleteACLWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call) Return(_a0 *operations.DeleteACLWithConsumerResponse, _a1 error) *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call) RunAndReturn(run func(context.Context, operations.DeleteACLWithConsumerRequest, ...operations.Option) (*operations.DeleteACLWithConsumerResponse, error)) *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertACLWithConsumer provides a mock function with given fields: ctx, request, opts
func (_m *MockKongCredentialACLSDK) UpsertACLWithConsumer(ctx context.Context, request operations.UpsertACLWithConsumerRequest, opts ...operations.Option) (*operations.UpsertACLWithConsumerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpsertACLWithConsumer")
	}

	var r0 *operations.UpsertACLWithConsumerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.UpsertACLWithConsumerRequest, ...operations.Option) (*operations.UpsertACLWithConsumerResponse, error)); ok {
		return rf(ctx, request, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.UpsertACLWithConsumerRequest, ...operations.Option) *operations.UpsertACLWithConsumerResponse); ok {
		r0 = rf(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertACLWithConsumerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.UpsertACLWithConsumerRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKongCredentialACLSDK_UpsertACLWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertACLWithConsumer'
type MockKongCredentialACLSDK_UpsertACLWithConsumer_Call struct {
	*mock.Call
}

// UpsertACLWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.UpsertACLWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialACLSDK_Expecter) UpsertACLWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call {
	return &MockKongCredentialACLSDK_UpsertACLWithConsumer_Call{Call: _e.mock.On("UpsertACLWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call) Run(run func(ctx context.Context, request operations.UpsertACLWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertACLWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call) Return(_a0 *operations.UpsertACLWithConsumerResponse, _a1 error) *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call) RunAndReturn(run func(context.Context, operations.UpsertACLWithConsumerRequest, ...operations.Option) (*operations.UpsertACLWithConsumerResponse, error)) *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKongCredentialACLSDK creates a new instance of MockKongCredentialACLSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKongCredentialACLSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKongCredentialACLSDK {
	mock := &MockKongCredentialACLSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
