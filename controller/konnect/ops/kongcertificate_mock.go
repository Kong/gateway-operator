// Code generated by mockery. DO NOT EDIT.

package ops

import (
	context "context"

	components "github.com/Kong/sdk-konnect-go/models/components"

	mock "github.com/stretchr/testify/mock"

	operations "github.com/Kong/sdk-konnect-go/models/operations"
)

// MockCertificatesSDK is an autogenerated mock type for the CertificatesSDK type
type MockCertificatesSDK struct {
	mock.Mock
}

type MockCertificatesSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCertificatesSDK) EXPECT() *MockCertificatesSDK_Expecter {
	return &MockCertificatesSDK_Expecter{mock: &_m.Mock}
}

// CreateCertificate provides a mock function with given fields: ctx, controlPlaneID, certificate, opts
func (_m *MockCertificatesSDK) CreateCertificate(ctx context.Context, controlPlaneID string, certificate components.CertificateInput, opts ...operations.Option) (*operations.CreateCertificateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, controlPlaneID, certificate)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCertificate")
	}

	var r0 *operations.CreateCertificateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, components.CertificateInput, ...operations.Option) (*operations.CreateCertificateResponse, error)); ok {
		return rf(ctx, controlPlaneID, certificate, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, components.CertificateInput, ...operations.Option) *operations.CreateCertificateResponse); ok {
		r0 = rf(ctx, controlPlaneID, certificate, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateCertificateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, components.CertificateInput, ...operations.Option) error); ok {
		r1 = rf(ctx, controlPlaneID, certificate, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCertificatesSDK_CreateCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCertificate'
type MockCertificatesSDK_CreateCertificate_Call struct {
	*mock.Call
}

// CreateCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - certificate components.CertificateInput
//   - opts ...operations.Option
func (_e *MockCertificatesSDK_Expecter) CreateCertificate(ctx interface{}, controlPlaneID interface{}, certificate interface{}, opts ...interface{}) *MockCertificatesSDK_CreateCertificate_Call {
	return &MockCertificatesSDK_CreateCertificate_Call{Call: _e.mock.On("CreateCertificate",
		append([]interface{}{ctx, controlPlaneID, certificate}, opts...)...)}
}

func (_c *MockCertificatesSDK_CreateCertificate_Call) Run(run func(ctx context.Context, controlPlaneID string, certificate components.CertificateInput, opts ...operations.Option)) *MockCertificatesSDK_CreateCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(components.CertificateInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCertificatesSDK_CreateCertificate_Call) Return(_a0 *operations.CreateCertificateResponse, _a1 error) *MockCertificatesSDK_CreateCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCertificatesSDK_CreateCertificate_Call) RunAndReturn(run func(context.Context, string, components.CertificateInput, ...operations.Option) (*operations.CreateCertificateResponse, error)) *MockCertificatesSDK_CreateCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCertificate provides a mock function with given fields: ctx, controlPlaneID, certificateID, opts
func (_m *MockCertificatesSDK) DeleteCertificate(ctx context.Context, controlPlaneID string, certificateID string, opts ...operations.Option) (*operations.DeleteCertificateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, controlPlaneID, certificateID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCertificate")
	}

	var r0 *operations.DeleteCertificateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteCertificateResponse, error)); ok {
		return rf(ctx, controlPlaneID, certificateID, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteCertificateResponse); ok {
		r0 = rf(ctx, controlPlaneID, certificateID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteCertificateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = rf(ctx, controlPlaneID, certificateID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCertificatesSDK_DeleteCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCertificate'
type MockCertificatesSDK_DeleteCertificate_Call struct {
	*mock.Call
}

// DeleteCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - certificateID string
//   - opts ...operations.Option
func (_e *MockCertificatesSDK_Expecter) DeleteCertificate(ctx interface{}, controlPlaneID interface{}, certificateID interface{}, opts ...interface{}) *MockCertificatesSDK_DeleteCertificate_Call {
	return &MockCertificatesSDK_DeleteCertificate_Call{Call: _e.mock.On("DeleteCertificate",
		append([]interface{}{ctx, controlPlaneID, certificateID}, opts...)...)}
}

func (_c *MockCertificatesSDK_DeleteCertificate_Call) Run(run func(ctx context.Context, controlPlaneID string, certificateID string, opts ...operations.Option)) *MockCertificatesSDK_DeleteCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockCertificatesSDK_DeleteCertificate_Call) Return(_a0 *operations.DeleteCertificateResponse, _a1 error) *MockCertificatesSDK_DeleteCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCertificatesSDK_DeleteCertificate_Call) RunAndReturn(run func(context.Context, string, string, ...operations.Option) (*operations.DeleteCertificateResponse, error)) *MockCertificatesSDK_DeleteCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertCertificate provides a mock function with given fields: ctx, request, opts
func (_m *MockCertificatesSDK) UpsertCertificate(ctx context.Context, request operations.UpsertCertificateRequest, opts ...operations.Option) (*operations.UpsertCertificateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpsertCertificate")
	}

	var r0 *operations.UpsertCertificateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.UpsertCertificateRequest, ...operations.Option) (*operations.UpsertCertificateResponse, error)); ok {
		return rf(ctx, request, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.UpsertCertificateRequest, ...operations.Option) *operations.UpsertCertificateResponse); ok {
		r0 = rf(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertCertificateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.UpsertCertificateRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCertificatesSDK_UpsertCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertCertificate'
type MockCertificatesSDK_UpsertCertificate_Call struct {
	*mock.Call
}

// UpsertCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.UpsertCertificateRequest
//   - opts ...operations.Option
func (_e *MockCertificatesSDK_Expecter) UpsertCertificate(ctx interface{}, request interface{}, opts ...interface{}) *MockCertificatesSDK_UpsertCertificate_Call {
	return &MockCertificatesSDK_UpsertCertificate_Call{Call: _e.mock.On("UpsertCertificate",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockCertificatesSDK_UpsertCertificate_Call) Run(run func(ctx context.Context, request operations.UpsertCertificateRequest, opts ...operations.Option)) *MockCertificatesSDK_UpsertCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertCertificateRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCertificatesSDK_UpsertCertificate_Call) Return(_a0 *operations.UpsertCertificateResponse, _a1 error) *MockCertificatesSDK_UpsertCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCertificatesSDK_UpsertCertificate_Call) RunAndReturn(run func(context.Context, operations.UpsertCertificateRequest, ...operations.Option) (*operations.UpsertCertificateResponse, error)) *MockCertificatesSDK_UpsertCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCertificatesSDK creates a new instance of MockCertificatesSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCertificatesSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCertificatesSDK {
	mock := &MockCertificatesSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
