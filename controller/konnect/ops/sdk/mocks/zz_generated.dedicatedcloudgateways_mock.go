// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	components "github.com/Kong/sdk-konnect-go/models/components"

	mock "github.com/stretchr/testify/mock"

	operations "github.com/Kong/sdk-konnect-go/models/operations"
)

// MockCloudGatewaysSDK is an autogenerated mock type for the CloudGatewaysSDK type
type MockCloudGatewaysSDK struct {
	mock.Mock
}

type MockCloudGatewaysSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCloudGatewaysSDK) EXPECT() *MockCloudGatewaysSDK_Expecter {
	return &MockCloudGatewaysSDK_Expecter{mock: &_m.Mock}
}

// CreateConfiguration provides a mock function with given fields: ctx, request, opts
func (_m *MockCloudGatewaysSDK) CreateConfiguration(ctx context.Context, request components.CreateConfigurationRequest, opts ...operations.Option) (*operations.CreateConfigurationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfiguration")
	}

	var r0 *operations.CreateConfigurationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, components.CreateConfigurationRequest, ...operations.Option) (*operations.CreateConfigurationResponse, error)); ok {
		return rf(ctx, request, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, components.CreateConfigurationRequest, ...operations.Option) *operations.CreateConfigurationResponse); ok {
		r0 = rf(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateConfigurationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, components.CreateConfigurationRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudGatewaysSDK_CreateConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConfiguration'
type MockCloudGatewaysSDK_CreateConfiguration_Call struct {
	*mock.Call
}

// CreateConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - request components.CreateConfigurationRequest
//   - opts ...operations.Option
func (_e *MockCloudGatewaysSDK_Expecter) CreateConfiguration(ctx interface{}, request interface{}, opts ...interface{}) *MockCloudGatewaysSDK_CreateConfiguration_Call {
	return &MockCloudGatewaysSDK_CreateConfiguration_Call{Call: _e.mock.On("CreateConfiguration",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockCloudGatewaysSDK_CreateConfiguration_Call) Run(run func(ctx context.Context, request components.CreateConfigurationRequest, opts ...operations.Option)) *MockCloudGatewaysSDK_CreateConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(components.CreateConfigurationRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudGatewaysSDK_CreateConfiguration_Call) Return(_a0 *operations.CreateConfigurationResponse, _a1 error) *MockCloudGatewaysSDK_CreateConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudGatewaysSDK_CreateConfiguration_Call) RunAndReturn(run func(context.Context, components.CreateConfigurationRequest, ...operations.Option) (*operations.CreateConfigurationResponse, error)) *MockCloudGatewaysSDK_CreateConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNetwork provides a mock function with given fields: ctx, request, opts
func (_m *MockCloudGatewaysSDK) CreateNetwork(ctx context.Context, request components.CreateNetworkRequest, opts ...operations.Option) (*operations.CreateNetworkResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNetwork")
	}

	var r0 *operations.CreateNetworkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, components.CreateNetworkRequest, ...operations.Option) (*operations.CreateNetworkResponse, error)); ok {
		return rf(ctx, request, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, components.CreateNetworkRequest, ...operations.Option) *operations.CreateNetworkResponse); ok {
		r0 = rf(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateNetworkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, components.CreateNetworkRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudGatewaysSDK_CreateNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNetwork'
type MockCloudGatewaysSDK_CreateNetwork_Call struct {
	*mock.Call
}

// CreateNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - request components.CreateNetworkRequest
//   - opts ...operations.Option
func (_e *MockCloudGatewaysSDK_Expecter) CreateNetwork(ctx interface{}, request interface{}, opts ...interface{}) *MockCloudGatewaysSDK_CreateNetwork_Call {
	return &MockCloudGatewaysSDK_CreateNetwork_Call{Call: _e.mock.On("CreateNetwork",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockCloudGatewaysSDK_CreateNetwork_Call) Run(run func(ctx context.Context, request components.CreateNetworkRequest, opts ...operations.Option)) *MockCloudGatewaysSDK_CreateNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(components.CreateNetworkRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudGatewaysSDK_CreateNetwork_Call) Return(_a0 *operations.CreateNetworkResponse, _a1 error) *MockCloudGatewaysSDK_CreateNetwork_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudGatewaysSDK_CreateNetwork_Call) RunAndReturn(run func(context.Context, components.CreateNetworkRequest, ...operations.Option) (*operations.CreateNetworkResponse, error)) *MockCloudGatewaysSDK_CreateNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNetwork provides a mock function with given fields: ctx, networkID, opts
func (_m *MockCloudGatewaysSDK) DeleteNetwork(ctx context.Context, networkID string, opts ...operations.Option) (*operations.DeleteNetworkResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, networkID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetwork")
	}

	var r0 *operations.DeleteNetworkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...operations.Option) (*operations.DeleteNetworkResponse, error)); ok {
		return rf(ctx, networkID, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...operations.Option) *operations.DeleteNetworkResponse); ok {
		r0 = rf(ctx, networkID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteNetworkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...operations.Option) error); ok {
		r1 = rf(ctx, networkID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudGatewaysSDK_DeleteNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNetwork'
type MockCloudGatewaysSDK_DeleteNetwork_Call struct {
	*mock.Call
}

// DeleteNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - networkID string
//   - opts ...operations.Option
func (_e *MockCloudGatewaysSDK_Expecter) DeleteNetwork(ctx interface{}, networkID interface{}, opts ...interface{}) *MockCloudGatewaysSDK_DeleteNetwork_Call {
	return &MockCloudGatewaysSDK_DeleteNetwork_Call{Call: _e.mock.On("DeleteNetwork",
		append([]interface{}{ctx, networkID}, opts...)...)}
}

func (_c *MockCloudGatewaysSDK_DeleteNetwork_Call) Run(run func(ctx context.Context, networkID string, opts ...operations.Option)) *MockCloudGatewaysSDK_DeleteNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudGatewaysSDK_DeleteNetwork_Call) Return(_a0 *operations.DeleteNetworkResponse, _a1 error) *MockCloudGatewaysSDK_DeleteNetwork_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudGatewaysSDK_DeleteNetwork_Call) RunAndReturn(run func(context.Context, string, ...operations.Option) (*operations.DeleteNetworkResponse, error)) *MockCloudGatewaysSDK_DeleteNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfiguration provides a mock function with given fields: ctx, configurationID, opts
func (_m *MockCloudGatewaysSDK) GetConfiguration(ctx context.Context, configurationID string, opts ...operations.Option) (*operations.GetConfigurationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, configurationID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfiguration")
	}

	var r0 *operations.GetConfigurationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...operations.Option) (*operations.GetConfigurationResponse, error)); ok {
		return rf(ctx, configurationID, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...operations.Option) *operations.GetConfigurationResponse); ok {
		r0 = rf(ctx, configurationID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetConfigurationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...operations.Option) error); ok {
		r1 = rf(ctx, configurationID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudGatewaysSDK_GetConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfiguration'
type MockCloudGatewaysSDK_GetConfiguration_Call struct {
	*mock.Call
}

// GetConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - configurationID string
//   - opts ...operations.Option
func (_e *MockCloudGatewaysSDK_Expecter) GetConfiguration(ctx interface{}, configurationID interface{}, opts ...interface{}) *MockCloudGatewaysSDK_GetConfiguration_Call {
	return &MockCloudGatewaysSDK_GetConfiguration_Call{Call: _e.mock.On("GetConfiguration",
		append([]interface{}{ctx, configurationID}, opts...)...)}
}

func (_c *MockCloudGatewaysSDK_GetConfiguration_Call) Run(run func(ctx context.Context, configurationID string, opts ...operations.Option)) *MockCloudGatewaysSDK_GetConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudGatewaysSDK_GetConfiguration_Call) Return(_a0 *operations.GetConfigurationResponse, _a1 error) *MockCloudGatewaysSDK_GetConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudGatewaysSDK_GetConfiguration_Call) RunAndReturn(run func(context.Context, string, ...operations.Option) (*operations.GetConfigurationResponse, error)) *MockCloudGatewaysSDK_GetConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetwork provides a mock function with given fields: ctx, networkID, opts
func (_m *MockCloudGatewaysSDK) GetNetwork(ctx context.Context, networkID string, opts ...operations.Option) (*operations.GetNetworkResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, networkID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNetwork")
	}

	var r0 *operations.GetNetworkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...operations.Option) (*operations.GetNetworkResponse, error)); ok {
		return rf(ctx, networkID, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...operations.Option) *operations.GetNetworkResponse); ok {
		r0 = rf(ctx, networkID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetNetworkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...operations.Option) error); ok {
		r1 = rf(ctx, networkID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudGatewaysSDK_GetNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetwork'
type MockCloudGatewaysSDK_GetNetwork_Call struct {
	*mock.Call
}

// GetNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - networkID string
//   - opts ...operations.Option
func (_e *MockCloudGatewaysSDK_Expecter) GetNetwork(ctx interface{}, networkID interface{}, opts ...interface{}) *MockCloudGatewaysSDK_GetNetwork_Call {
	return &MockCloudGatewaysSDK_GetNetwork_Call{Call: _e.mock.On("GetNetwork",
		append([]interface{}{ctx, networkID}, opts...)...)}
}

func (_c *MockCloudGatewaysSDK_GetNetwork_Call) Run(run func(ctx context.Context, networkID string, opts ...operations.Option)) *MockCloudGatewaysSDK_GetNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudGatewaysSDK_GetNetwork_Call) Return(_a0 *operations.GetNetworkResponse, _a1 error) *MockCloudGatewaysSDK_GetNetwork_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudGatewaysSDK_GetNetwork_Call) RunAndReturn(run func(context.Context, string, ...operations.Option) (*operations.GetNetworkResponse, error)) *MockCloudGatewaysSDK_GetNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// ListConfigurations provides a mock function with given fields: ctx, request, opts
func (_m *MockCloudGatewaysSDK) ListConfigurations(ctx context.Context, request operations.ListConfigurationsRequest, opts ...operations.Option) (*operations.ListConfigurationsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConfigurations")
	}

	var r0 *operations.ListConfigurationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.ListConfigurationsRequest, ...operations.Option) (*operations.ListConfigurationsResponse, error)); ok {
		return rf(ctx, request, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.ListConfigurationsRequest, ...operations.Option) *operations.ListConfigurationsResponse); ok {
		r0 = rf(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListConfigurationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.ListConfigurationsRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudGatewaysSDK_ListConfigurations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConfigurations'
type MockCloudGatewaysSDK_ListConfigurations_Call struct {
	*mock.Call
}

// ListConfigurations is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListConfigurationsRequest
//   - opts ...operations.Option
func (_e *MockCloudGatewaysSDK_Expecter) ListConfigurations(ctx interface{}, request interface{}, opts ...interface{}) *MockCloudGatewaysSDK_ListConfigurations_Call {
	return &MockCloudGatewaysSDK_ListConfigurations_Call{Call: _e.mock.On("ListConfigurations",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockCloudGatewaysSDK_ListConfigurations_Call) Run(run func(ctx context.Context, request operations.ListConfigurationsRequest, opts ...operations.Option)) *MockCloudGatewaysSDK_ListConfigurations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListConfigurationsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudGatewaysSDK_ListConfigurations_Call) Return(_a0 *operations.ListConfigurationsResponse, _a1 error) *MockCloudGatewaysSDK_ListConfigurations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudGatewaysSDK_ListConfigurations_Call) RunAndReturn(run func(context.Context, operations.ListConfigurationsRequest, ...operations.Option) (*operations.ListConfigurationsResponse, error)) *MockCloudGatewaysSDK_ListConfigurations_Call {
	_c.Call.Return(run)
	return _c
}

// ListNetworks provides a mock function with given fields: ctx, request, opts
func (_m *MockCloudGatewaysSDK) ListNetworks(ctx context.Context, request operations.ListNetworksRequest, opts ...operations.Option) (*operations.ListNetworksResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNetworks")
	}

	var r0 *operations.ListNetworksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.ListNetworksRequest, ...operations.Option) (*operations.ListNetworksResponse, error)); ok {
		return rf(ctx, request, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.ListNetworksRequest, ...operations.Option) *operations.ListNetworksResponse); ok {
		r0 = rf(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListNetworksResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.ListNetworksRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudGatewaysSDK_ListNetworks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNetworks'
type MockCloudGatewaysSDK_ListNetworks_Call struct {
	*mock.Call
}

// ListNetworks is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListNetworksRequest
//   - opts ...operations.Option
func (_e *MockCloudGatewaysSDK_Expecter) ListNetworks(ctx interface{}, request interface{}, opts ...interface{}) *MockCloudGatewaysSDK_ListNetworks_Call {
	return &MockCloudGatewaysSDK_ListNetworks_Call{Call: _e.mock.On("ListNetworks",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockCloudGatewaysSDK_ListNetworks_Call) Run(run func(ctx context.Context, request operations.ListNetworksRequest, opts ...operations.Option)) *MockCloudGatewaysSDK_ListNetworks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListNetworksRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudGatewaysSDK_ListNetworks_Call) Return(_a0 *operations.ListNetworksResponse, _a1 error) *MockCloudGatewaysSDK_ListNetworks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudGatewaysSDK_ListNetworks_Call) RunAndReturn(run func(context.Context, operations.ListNetworksRequest, ...operations.Option) (*operations.ListNetworksResponse, error)) *MockCloudGatewaysSDK_ListNetworks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNetwork provides a mock function with given fields: ctx, networkID, patchNetworkRequest, opts
func (_m *MockCloudGatewaysSDK) UpdateNetwork(ctx context.Context, networkID string, patchNetworkRequest components.PatchNetworkRequest, opts ...operations.Option) (*operations.UpdateNetworkResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, networkID, patchNetworkRequest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNetwork")
	}

	var r0 *operations.UpdateNetworkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, components.PatchNetworkRequest, ...operations.Option) (*operations.UpdateNetworkResponse, error)); ok {
		return rf(ctx, networkID, patchNetworkRequest, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, components.PatchNetworkRequest, ...operations.Option) *operations.UpdateNetworkResponse); ok {
		r0 = rf(ctx, networkID, patchNetworkRequest, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpdateNetworkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, components.PatchNetworkRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, networkID, patchNetworkRequest, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudGatewaysSDK_UpdateNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNetwork'
type MockCloudGatewaysSDK_UpdateNetwork_Call struct {
	*mock.Call
}

// UpdateNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - networkID string
//   - patchNetworkRequest components.PatchNetworkRequest
//   - opts ...operations.Option
func (_e *MockCloudGatewaysSDK_Expecter) UpdateNetwork(ctx interface{}, networkID interface{}, patchNetworkRequest interface{}, opts ...interface{}) *MockCloudGatewaysSDK_UpdateNetwork_Call {
	return &MockCloudGatewaysSDK_UpdateNetwork_Call{Call: _e.mock.On("UpdateNetwork",
		append([]interface{}{ctx, networkID, patchNetworkRequest}, opts...)...)}
}

func (_c *MockCloudGatewaysSDK_UpdateNetwork_Call) Run(run func(ctx context.Context, networkID string, patchNetworkRequest components.PatchNetworkRequest, opts ...operations.Option)) *MockCloudGatewaysSDK_UpdateNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(components.PatchNetworkRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudGatewaysSDK_UpdateNetwork_Call) Return(_a0 *operations.UpdateNetworkResponse, _a1 error) *MockCloudGatewaysSDK_UpdateNetwork_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudGatewaysSDK_UpdateNetwork_Call) RunAndReturn(run func(context.Context, string, components.PatchNetworkRequest, ...operations.Option) (*operations.UpdateNetworkResponse, error)) *MockCloudGatewaysSDK_UpdateNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCloudGatewaysSDK creates a new instance of MockCloudGatewaysSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCloudGatewaysSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCloudGatewaysSDK {
	mock := &MockCloudGatewaysSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
