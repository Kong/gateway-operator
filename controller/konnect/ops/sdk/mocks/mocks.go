// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/components"
	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockControlPlaneSDK creates a new instance of MockControlPlaneSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockControlPlaneSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockControlPlaneSDK {
	mock := &MockControlPlaneSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockControlPlaneSDK is an autogenerated mock type for the ControlPlaneSDK type
type MockControlPlaneSDK struct {
	mock.Mock
}

type MockControlPlaneSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockControlPlaneSDK) EXPECT() *MockControlPlaneSDK_Expecter {
	return &MockControlPlaneSDK_Expecter{mock: &_m.Mock}
}

// CreateControlPlane provides a mock function for the type MockControlPlaneSDK
func (_mock *MockControlPlaneSDK) CreateControlPlane(ctx context.Context, req components.CreateControlPlaneRequest, opts ...operations.Option) (*operations.CreateControlPlaneResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateControlPlane")
	}

	var r0 *operations.CreateControlPlaneResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, components.CreateControlPlaneRequest, ...operations.Option) (*operations.CreateControlPlaneResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, components.CreateControlPlaneRequest, ...operations.Option) *operations.CreateControlPlaneResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateControlPlaneResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, components.CreateControlPlaneRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockControlPlaneSDK_CreateControlPlane_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateControlPlane'
type MockControlPlaneSDK_CreateControlPlane_Call struct {
	*mock.Call
}

// CreateControlPlane is a helper method to define mock.On call
//   - ctx
//   - req
//   - opts
func (_e *MockControlPlaneSDK_Expecter) CreateControlPlane(ctx interface{}, req interface{}, opts ...interface{}) *MockControlPlaneSDK_CreateControlPlane_Call {
	return &MockControlPlaneSDK_CreateControlPlane_Call{Call: _e.mock.On("CreateControlPlane",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockControlPlaneSDK_CreateControlPlane_Call) Run(run func(ctx context.Context, req components.CreateControlPlaneRequest, opts ...operations.Option)) *MockControlPlaneSDK_CreateControlPlane_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(components.CreateControlPlaneRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockControlPlaneSDK_CreateControlPlane_Call) Return(createControlPlaneResponse *operations.CreateControlPlaneResponse, err error) *MockControlPlaneSDK_CreateControlPlane_Call {
	_c.Call.Return(createControlPlaneResponse, err)
	return _c
}

func (_c *MockControlPlaneSDK_CreateControlPlane_Call) RunAndReturn(run func(ctx context.Context, req components.CreateControlPlaneRequest, opts ...operations.Option) (*operations.CreateControlPlaneResponse, error)) *MockControlPlaneSDK_CreateControlPlane_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteControlPlane provides a mock function for the type MockControlPlaneSDK
func (_mock *MockControlPlaneSDK) DeleteControlPlane(ctx context.Context, id string, opts ...operations.Option) (*operations.DeleteControlPlaneResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, id, opts)
	} else {
		tmpRet = _mock.Called(ctx, id)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteControlPlane")
	}

	var r0 *operations.DeleteControlPlaneResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...operations.Option) (*operations.DeleteControlPlaneResponse, error)); ok {
		return returnFunc(ctx, id, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...operations.Option) *operations.DeleteControlPlaneResponse); ok {
		r0 = returnFunc(ctx, id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteControlPlaneResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, id, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockControlPlaneSDK_DeleteControlPlane_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteControlPlane'
type MockControlPlaneSDK_DeleteControlPlane_Call struct {
	*mock.Call
}

// DeleteControlPlane is a helper method to define mock.On call
//   - ctx
//   - id
//   - opts
func (_e *MockControlPlaneSDK_Expecter) DeleteControlPlane(ctx interface{}, id interface{}, opts ...interface{}) *MockControlPlaneSDK_DeleteControlPlane_Call {
	return &MockControlPlaneSDK_DeleteControlPlane_Call{Call: _e.mock.On("DeleteControlPlane",
		append([]interface{}{ctx, id}, opts...)...)}
}

func (_c *MockControlPlaneSDK_DeleteControlPlane_Call) Run(run func(ctx context.Context, id string, opts ...operations.Option)) *MockControlPlaneSDK_DeleteControlPlane_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockControlPlaneSDK_DeleteControlPlane_Call) Return(deleteControlPlaneResponse *operations.DeleteControlPlaneResponse, err error) *MockControlPlaneSDK_DeleteControlPlane_Call {
	_c.Call.Return(deleteControlPlaneResponse, err)
	return _c
}

func (_c *MockControlPlaneSDK_DeleteControlPlane_Call) RunAndReturn(run func(ctx context.Context, id string, opts ...operations.Option) (*operations.DeleteControlPlaneResponse, error)) *MockControlPlaneSDK_DeleteControlPlane_Call {
	_c.Call.Return(run)
	return _c
}

// ListControlPlanes provides a mock function for the type MockControlPlaneSDK
func (_mock *MockControlPlaneSDK) ListControlPlanes(ctx context.Context, request operations.ListControlPlanesRequest, opts ...operations.Option) (*operations.ListControlPlanesResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListControlPlanes")
	}

	var r0 *operations.ListControlPlanesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListControlPlanesRequest, ...operations.Option) (*operations.ListControlPlanesResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListControlPlanesRequest, ...operations.Option) *operations.ListControlPlanesResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListControlPlanesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListControlPlanesRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockControlPlaneSDK_ListControlPlanes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListControlPlanes'
type MockControlPlaneSDK_ListControlPlanes_Call struct {
	*mock.Call
}

// ListControlPlanes is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockControlPlaneSDK_Expecter) ListControlPlanes(ctx interface{}, request interface{}, opts ...interface{}) *MockControlPlaneSDK_ListControlPlanes_Call {
	return &MockControlPlaneSDK_ListControlPlanes_Call{Call: _e.mock.On("ListControlPlanes",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockControlPlaneSDK_ListControlPlanes_Call) Run(run func(ctx context.Context, request operations.ListControlPlanesRequest, opts ...operations.Option)) *MockControlPlaneSDK_ListControlPlanes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListControlPlanesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockControlPlaneSDK_ListControlPlanes_Call) Return(listControlPlanesResponse *operations.ListControlPlanesResponse, err error) *MockControlPlaneSDK_ListControlPlanes_Call {
	_c.Call.Return(listControlPlanesResponse, err)
	return _c
}

func (_c *MockControlPlaneSDK_ListControlPlanes_Call) RunAndReturn(run func(ctx context.Context, request operations.ListControlPlanesRequest, opts ...operations.Option) (*operations.ListControlPlanesResponse, error)) *MockControlPlaneSDK_ListControlPlanes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateControlPlane provides a mock function for the type MockControlPlaneSDK
func (_mock *MockControlPlaneSDK) UpdateControlPlane(ctx context.Context, id string, req components.UpdateControlPlaneRequest, opts ...operations.Option) (*operations.UpdateControlPlaneResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, id, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, id, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateControlPlane")
	}

	var r0 *operations.UpdateControlPlaneResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.UpdateControlPlaneRequest, ...operations.Option) (*operations.UpdateControlPlaneResponse, error)); ok {
		return returnFunc(ctx, id, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.UpdateControlPlaneRequest, ...operations.Option) *operations.UpdateControlPlaneResponse); ok {
		r0 = returnFunc(ctx, id, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpdateControlPlaneResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.UpdateControlPlaneRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, id, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockControlPlaneSDK_UpdateControlPlane_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateControlPlane'
type MockControlPlaneSDK_UpdateControlPlane_Call struct {
	*mock.Call
}

// UpdateControlPlane is a helper method to define mock.On call
//   - ctx
//   - id
//   - req
//   - opts
func (_e *MockControlPlaneSDK_Expecter) UpdateControlPlane(ctx interface{}, id interface{}, req interface{}, opts ...interface{}) *MockControlPlaneSDK_UpdateControlPlane_Call {
	return &MockControlPlaneSDK_UpdateControlPlane_Call{Call: _e.mock.On("UpdateControlPlane",
		append([]interface{}{ctx, id, req}, opts...)...)}
}

func (_c *MockControlPlaneSDK_UpdateControlPlane_Call) Run(run func(ctx context.Context, id string, req components.UpdateControlPlaneRequest, opts ...operations.Option)) *MockControlPlaneSDK_UpdateControlPlane_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(components.UpdateControlPlaneRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockControlPlaneSDK_UpdateControlPlane_Call) Return(updateControlPlaneResponse *operations.UpdateControlPlaneResponse, err error) *MockControlPlaneSDK_UpdateControlPlane_Call {
	_c.Call.Return(updateControlPlaneResponse, err)
	return _c
}

func (_c *MockControlPlaneSDK_UpdateControlPlane_Call) RunAndReturn(run func(ctx context.Context, id string, req components.UpdateControlPlaneRequest, opts ...operations.Option) (*operations.UpdateControlPlaneResponse, error)) *MockControlPlaneSDK_UpdateControlPlane_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockControlPlaneGroupSDK creates a new instance of MockControlPlaneGroupSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockControlPlaneGroupSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockControlPlaneGroupSDK {
	mock := &MockControlPlaneGroupSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockControlPlaneGroupSDK is an autogenerated mock type for the ControlPlaneGroupSDK type
type MockControlPlaneGroupSDK struct {
	mock.Mock
}

type MockControlPlaneGroupSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockControlPlaneGroupSDK) EXPECT() *MockControlPlaneGroupSDK_Expecter {
	return &MockControlPlaneGroupSDK_Expecter{mock: &_m.Mock}
}

// PutControlPlanesIDGroupMemberships provides a mock function for the type MockControlPlaneGroupSDK
func (_mock *MockControlPlaneGroupSDK) PutControlPlanesIDGroupMemberships(ctx context.Context, id string, groupMembership *components.GroupMembership, opts ...operations.Option) (*operations.PutControlPlanesIDGroupMembershipsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, id, groupMembership, opts)
	} else {
		tmpRet = _mock.Called(ctx, id, groupMembership)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PutControlPlanesIDGroupMemberships")
	}

	var r0 *operations.PutControlPlanesIDGroupMembershipsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *components.GroupMembership, ...operations.Option) (*operations.PutControlPlanesIDGroupMembershipsResponse, error)); ok {
		return returnFunc(ctx, id, groupMembership, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *components.GroupMembership, ...operations.Option) *operations.PutControlPlanesIDGroupMembershipsResponse); ok {
		r0 = returnFunc(ctx, id, groupMembership, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.PutControlPlanesIDGroupMembershipsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *components.GroupMembership, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, id, groupMembership, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutControlPlanesIDGroupMemberships'
type MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call struct {
	*mock.Call
}

// PutControlPlanesIDGroupMemberships is a helper method to define mock.On call
//   - ctx
//   - id
//   - groupMembership
//   - opts
func (_e *MockControlPlaneGroupSDK_Expecter) PutControlPlanesIDGroupMemberships(ctx interface{}, id interface{}, groupMembership interface{}, opts ...interface{}) *MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call {
	return &MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call{Call: _e.mock.On("PutControlPlanesIDGroupMemberships",
		append([]interface{}{ctx, id, groupMembership}, opts...)...)}
}

func (_c *MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call) Run(run func(ctx context.Context, id string, groupMembership *components.GroupMembership, opts ...operations.Option)) *MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*components.GroupMembership), variadicArgs...)
	})
	return _c
}

func (_c *MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call) Return(putControlPlanesIDGroupMembershipsResponse *operations.PutControlPlanesIDGroupMembershipsResponse, err error) *MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call {
	_c.Call.Return(putControlPlanesIDGroupMembershipsResponse, err)
	return _c
}

func (_c *MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call) RunAndReturn(run func(ctx context.Context, id string, groupMembership *components.GroupMembership, opts ...operations.Option) (*operations.PutControlPlanesIDGroupMembershipsResponse, error)) *MockControlPlaneGroupSDK_PutControlPlanesIDGroupMemberships_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKongCredentialACLSDK creates a new instance of MockKongCredentialACLSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKongCredentialACLSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKongCredentialACLSDK {
	mock := &MockKongCredentialACLSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKongCredentialACLSDK is an autogenerated mock type for the KongCredentialACLSDK type
type MockKongCredentialACLSDK struct {
	mock.Mock
}

type MockKongCredentialACLSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKongCredentialACLSDK) EXPECT() *MockKongCredentialACLSDK_Expecter {
	return &MockKongCredentialACLSDK_Expecter{mock: &_m.Mock}
}

// CreateACLWithConsumer provides a mock function for the type MockKongCredentialACLSDK
func (_mock *MockKongCredentialACLSDK) CreateACLWithConsumer(ctx context.Context, req operations.CreateACLWithConsumerRequest, opts ...operations.Option) (*operations.CreateACLWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateACLWithConsumer")
	}

	var r0 *operations.CreateACLWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateACLWithConsumerRequest, ...operations.Option) (*operations.CreateACLWithConsumerResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateACLWithConsumerRequest, ...operations.Option) *operations.CreateACLWithConsumerResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateACLWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.CreateACLWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialACLSDK_CreateACLWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateACLWithConsumer'
type MockKongCredentialACLSDK_CreateACLWithConsumer_Call struct {
	*mock.Call
}

// CreateACLWithConsumer is a helper method to define mock.On call
//   - ctx
//   - req
//   - opts
func (_e *MockKongCredentialACLSDK_Expecter) CreateACLWithConsumer(ctx interface{}, req interface{}, opts ...interface{}) *MockKongCredentialACLSDK_CreateACLWithConsumer_Call {
	return &MockKongCredentialACLSDK_CreateACLWithConsumer_Call{Call: _e.mock.On("CreateACLWithConsumer",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockKongCredentialACLSDK_CreateACLWithConsumer_Call) Run(run func(ctx context.Context, req operations.CreateACLWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialACLSDK_CreateACLWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.CreateACLWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialACLSDK_CreateACLWithConsumer_Call) Return(createACLWithConsumerResponse *operations.CreateACLWithConsumerResponse, err error) *MockKongCredentialACLSDK_CreateACLWithConsumer_Call {
	_c.Call.Return(createACLWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialACLSDK_CreateACLWithConsumer_Call) RunAndReturn(run func(ctx context.Context, req operations.CreateACLWithConsumerRequest, opts ...operations.Option) (*operations.CreateACLWithConsumerResponse, error)) *MockKongCredentialACLSDK_CreateACLWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteACLWithConsumer provides a mock function for the type MockKongCredentialACLSDK
func (_mock *MockKongCredentialACLSDK) DeleteACLWithConsumer(ctx context.Context, request operations.DeleteACLWithConsumerRequest, opts ...operations.Option) (*operations.DeleteACLWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteACLWithConsumer")
	}

	var r0 *operations.DeleteACLWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteACLWithConsumerRequest, ...operations.Option) (*operations.DeleteACLWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteACLWithConsumerRequest, ...operations.Option) *operations.DeleteACLWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteACLWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.DeleteACLWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialACLSDK_DeleteACLWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteACLWithConsumer'
type MockKongCredentialACLSDK_DeleteACLWithConsumer_Call struct {
	*mock.Call
}

// DeleteACLWithConsumer is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockKongCredentialACLSDK_Expecter) DeleteACLWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call {
	return &MockKongCredentialACLSDK_DeleteACLWithConsumer_Call{Call: _e.mock.On("DeleteACLWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call) Run(run func(ctx context.Context, request operations.DeleteACLWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.DeleteACLWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call) Return(deleteACLWithConsumerResponse *operations.DeleteACLWithConsumerResponse, err error) *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call {
	_c.Call.Return(deleteACLWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.DeleteACLWithConsumerRequest, opts ...operations.Option) (*operations.DeleteACLWithConsumerResponse, error)) *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// ListACL provides a mock function for the type MockKongCredentialACLSDK
func (_mock *MockKongCredentialACLSDK) ListACL(ctx context.Context, request operations.ListACLRequest, opts ...operations.Option) (*operations.ListACLResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListACL")
	}

	var r0 *operations.ListACLResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListACLRequest, ...operations.Option) (*operations.ListACLResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListACLRequest, ...operations.Option) *operations.ListACLResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListACLResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListACLRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialACLSDK_ListACL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListACL'
type MockKongCredentialACLSDK_ListACL_Call struct {
	*mock.Call
}

// ListACL is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockKongCredentialACLSDK_Expecter) ListACL(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialACLSDK_ListACL_Call {
	return &MockKongCredentialACLSDK_ListACL_Call{Call: _e.mock.On("ListACL",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialACLSDK_ListACL_Call) Run(run func(ctx context.Context, request operations.ListACLRequest, opts ...operations.Option)) *MockKongCredentialACLSDK_ListACL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListACLRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialACLSDK_ListACL_Call) Return(listACLResponse *operations.ListACLResponse, err error) *MockKongCredentialACLSDK_ListACL_Call {
	_c.Call.Return(listACLResponse, err)
	return _c
}

func (_c *MockKongCredentialACLSDK_ListACL_Call) RunAndReturn(run func(ctx context.Context, request operations.ListACLRequest, opts ...operations.Option) (*operations.ListACLResponse, error)) *MockKongCredentialACLSDK_ListACL_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertACLWithConsumer provides a mock function for the type MockKongCredentialACLSDK
func (_mock *MockKongCredentialACLSDK) UpsertACLWithConsumer(ctx context.Context, request operations.UpsertACLWithConsumerRequest, opts ...operations.Option) (*operations.UpsertACLWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertACLWithConsumer")
	}

	var r0 *operations.UpsertACLWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertACLWithConsumerRequest, ...operations.Option) (*operations.UpsertACLWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertACLWithConsumerRequest, ...operations.Option) *operations.UpsertACLWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertACLWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertACLWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialACLSDK_UpsertACLWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertACLWithConsumer'
type MockKongCredentialACLSDK_UpsertACLWithConsumer_Call struct {
	*mock.Call
}

// UpsertACLWithConsumer is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockKongCredentialACLSDK_Expecter) UpsertACLWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call {
	return &MockKongCredentialACLSDK_UpsertACLWithConsumer_Call{Call: _e.mock.On("UpsertACLWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call) Run(run func(ctx context.Context, request operations.UpsertACLWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertACLWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call) Return(upsertACLWithConsumerResponse *operations.UpsertACLWithConsumerResponse, err error) *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call {
	_c.Call.Return(upsertACLWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertACLWithConsumerRequest, opts ...operations.Option) (*operations.UpsertACLWithConsumerResponse, error)) *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKongCredentialAPIKeySDK creates a new instance of MockKongCredentialAPIKeySDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKongCredentialAPIKeySDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKongCredentialAPIKeySDK {
	mock := &MockKongCredentialAPIKeySDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKongCredentialAPIKeySDK is an autogenerated mock type for the KongCredentialAPIKeySDK type
type MockKongCredentialAPIKeySDK struct {
	mock.Mock
}

type MockKongCredentialAPIKeySDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKongCredentialAPIKeySDK) EXPECT() *MockKongCredentialAPIKeySDK_Expecter {
	return &MockKongCredentialAPIKeySDK_Expecter{mock: &_m.Mock}
}

// CreateKeyAuthWithConsumer provides a mock function for the type MockKongCredentialAPIKeySDK
func (_mock *MockKongCredentialAPIKeySDK) CreateKeyAuthWithConsumer(ctx context.Context, req operations.CreateKeyAuthWithConsumerRequest, opts ...operations.Option) (*operations.CreateKeyAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateKeyAuthWithConsumer")
	}

	var r0 *operations.CreateKeyAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateKeyAuthWithConsumerRequest, ...operations.Option) (*operations.CreateKeyAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateKeyAuthWithConsumerRequest, ...operations.Option) *operations.CreateKeyAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateKeyAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.CreateKeyAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateKeyAuthWithConsumer'
type MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call struct {
	*mock.Call
}

// CreateKeyAuthWithConsumer is a helper method to define mock.On call
//   - ctx
//   - req
//   - opts
func (_e *MockKongCredentialAPIKeySDK_Expecter) CreateKeyAuthWithConsumer(ctx interface{}, req interface{}, opts ...interface{}) *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call {
	return &MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call{Call: _e.mock.On("CreateKeyAuthWithConsumer",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call) Run(run func(ctx context.Context, req operations.CreateKeyAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.CreateKeyAuthWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call) Return(createKeyAuthWithConsumerResponse *operations.CreateKeyAuthWithConsumerResponse, err error) *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call {
	_c.Call.Return(createKeyAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, req operations.CreateKeyAuthWithConsumerRequest, opts ...operations.Option) (*operations.CreateKeyAuthWithConsumerResponse, error)) *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteKeyAuthWithConsumer provides a mock function for the type MockKongCredentialAPIKeySDK
func (_mock *MockKongCredentialAPIKeySDK) DeleteKeyAuthWithConsumer(ctx context.Context, request operations.DeleteKeyAuthWithConsumerRequest, opts ...operations.Option) (*operations.DeleteKeyAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteKeyAuthWithConsumer")
	}

	var r0 *operations.DeleteKeyAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteKeyAuthWithConsumerRequest, ...operations.Option) (*operations.DeleteKeyAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteKeyAuthWithConsumerRequest, ...operations.Option) *operations.DeleteKeyAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteKeyAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.DeleteKeyAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteKeyAuthWithConsumer'
type MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call struct {
	*mock.Call
}

// DeleteKeyAuthWithConsumer is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockKongCredentialAPIKeySDK_Expecter) DeleteKeyAuthWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call {
	return &MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call{Call: _e.mock.On("DeleteKeyAuthWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call) Run(run func(ctx context.Context, request operations.DeleteKeyAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.DeleteKeyAuthWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call) Return(deleteKeyAuthWithConsumerResponse *operations.DeleteKeyAuthWithConsumerResponse, err error) *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call {
	_c.Call.Return(deleteKeyAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.DeleteKeyAuthWithConsumerRequest, opts ...operations.Option) (*operations.DeleteKeyAuthWithConsumerResponse, error)) *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// ListKeyAuth provides a mock function for the type MockKongCredentialAPIKeySDK
func (_mock *MockKongCredentialAPIKeySDK) ListKeyAuth(ctx context.Context, request operations.ListKeyAuthRequest, opts ...operations.Option) (*operations.ListKeyAuthResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListKeyAuth")
	}

	var r0 *operations.ListKeyAuthResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListKeyAuthRequest, ...operations.Option) (*operations.ListKeyAuthResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListKeyAuthRequest, ...operations.Option) *operations.ListKeyAuthResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListKeyAuthResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListKeyAuthRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialAPIKeySDK_ListKeyAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListKeyAuth'
type MockKongCredentialAPIKeySDK_ListKeyAuth_Call struct {
	*mock.Call
}

// ListKeyAuth is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockKongCredentialAPIKeySDK_Expecter) ListKeyAuth(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialAPIKeySDK_ListKeyAuth_Call {
	return &MockKongCredentialAPIKeySDK_ListKeyAuth_Call{Call: _e.mock.On("ListKeyAuth",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialAPIKeySDK_ListKeyAuth_Call) Run(run func(ctx context.Context, request operations.ListKeyAuthRequest, opts ...operations.Option)) *MockKongCredentialAPIKeySDK_ListKeyAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListKeyAuthRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_ListKeyAuth_Call) Return(listKeyAuthResponse *operations.ListKeyAuthResponse, err error) *MockKongCredentialAPIKeySDK_ListKeyAuth_Call {
	_c.Call.Return(listKeyAuthResponse, err)
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_ListKeyAuth_Call) RunAndReturn(run func(ctx context.Context, request operations.ListKeyAuthRequest, opts ...operations.Option) (*operations.ListKeyAuthResponse, error)) *MockKongCredentialAPIKeySDK_ListKeyAuth_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertKeyAuthWithConsumer provides a mock function for the type MockKongCredentialAPIKeySDK
func (_mock *MockKongCredentialAPIKeySDK) UpsertKeyAuthWithConsumer(ctx context.Context, request operations.UpsertKeyAuthWithConsumerRequest, opts ...operations.Option) (*operations.UpsertKeyAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertKeyAuthWithConsumer")
	}

	var r0 *operations.UpsertKeyAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertKeyAuthWithConsumerRequest, ...operations.Option) (*operations.UpsertKeyAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertKeyAuthWithConsumerRequest, ...operations.Option) *operations.UpsertKeyAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertKeyAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertKeyAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertKeyAuthWithConsumer'
type MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call struct {
	*mock.Call
}

// UpsertKeyAuthWithConsumer is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockKongCredentialAPIKeySDK_Expecter) UpsertKeyAuthWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call {
	return &MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call{Call: _e.mock.On("UpsertKeyAuthWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call) Run(run func(ctx context.Context, request operations.UpsertKeyAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertKeyAuthWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call) Return(upsertKeyAuthWithConsumerResponse *operations.UpsertKeyAuthWithConsumerResponse, err error) *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call {
	_c.Call.Return(upsertKeyAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertKeyAuthWithConsumerRequest, opts ...operations.Option) (*operations.UpsertKeyAuthWithConsumerResponse, error)) *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKongCredentialBasicAuthSDK creates a new instance of MockKongCredentialBasicAuthSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKongCredentialBasicAuthSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKongCredentialBasicAuthSDK {
	mock := &MockKongCredentialBasicAuthSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKongCredentialBasicAuthSDK is an autogenerated mock type for the KongCredentialBasicAuthSDK type
type MockKongCredentialBasicAuthSDK struct {
	mock.Mock
}

type MockKongCredentialBasicAuthSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKongCredentialBasicAuthSDK) EXPECT() *MockKongCredentialBasicAuthSDK_Expecter {
	return &MockKongCredentialBasicAuthSDK_Expecter{mock: &_m.Mock}
}

// CreateBasicAuthWithConsumer provides a mock function for the type MockKongCredentialBasicAuthSDK
func (_mock *MockKongCredentialBasicAuthSDK) CreateBasicAuthWithConsumer(ctx context.Context, req operations.CreateBasicAuthWithConsumerRequest, opts ...operations.Option) (*operations.CreateBasicAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBasicAuthWithConsumer")
	}

	var r0 *operations.CreateBasicAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateBasicAuthWithConsumerRequest, ...operations.Option) (*operations.CreateBasicAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateBasicAuthWithConsumerRequest, ...operations.Option) *operations.CreateBasicAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateBasicAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.CreateBasicAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBasicAuthWithConsumer'
type MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call struct {
	*mock.Call
}

// CreateBasicAuthWithConsumer is a helper method to define mock.On call
//   - ctx
//   - req
//   - opts
func (_e *MockKongCredentialBasicAuthSDK_Expecter) CreateBasicAuthWithConsumer(ctx interface{}, req interface{}, opts ...interface{}) *MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call {
	return &MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call{Call: _e.mock.On("CreateBasicAuthWithConsumer",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call) Run(run func(ctx context.Context, req operations.CreateBasicAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.CreateBasicAuthWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call) Return(createBasicAuthWithConsumerResponse *operations.CreateBasicAuthWithConsumerResponse, err error) *MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call {
	_c.Call.Return(createBasicAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, req operations.CreateBasicAuthWithConsumerRequest, opts ...operations.Option) (*operations.CreateBasicAuthWithConsumerResponse, error)) *MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBasicAuthWithConsumer provides a mock function for the type MockKongCredentialBasicAuthSDK
func (_mock *MockKongCredentialBasicAuthSDK) DeleteBasicAuthWithConsumer(ctx context.Context, request operations.DeleteBasicAuthWithConsumerRequest, opts ...operations.Option) (*operations.DeleteBasicAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteBasicAuthWithConsumer")
	}

	var r0 *operations.DeleteBasicAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteBasicAuthWithConsumerRequest, ...operations.Option) (*operations.DeleteBasicAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteBasicAuthWithConsumerRequest, ...operations.Option) *operations.DeleteBasicAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteBasicAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.DeleteBasicAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBasicAuthWithConsumer'
type MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call struct {
	*mock.Call
}

// DeleteBasicAuthWithConsumer is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockKongCredentialBasicAuthSDK_Expecter) DeleteBasicAuthWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call {
	return &MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call{Call: _e.mock.On("DeleteBasicAuthWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call) Run(run func(ctx context.Context, request operations.DeleteBasicAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.DeleteBasicAuthWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call) Return(deleteBasicAuthWithConsumerResponse *operations.DeleteBasicAuthWithConsumerResponse, err error) *MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call {
	_c.Call.Return(deleteBasicAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.DeleteBasicAuthWithConsumerRequest, opts ...operations.Option) (*operations.DeleteBasicAuthWithConsumerResponse, error)) *MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// ListBasicAuth provides a mock function for the type MockKongCredentialBasicAuthSDK
func (_mock *MockKongCredentialBasicAuthSDK) ListBasicAuth(ctx context.Context, request operations.ListBasicAuthRequest, opts ...operations.Option) (*operations.ListBasicAuthResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListBasicAuth")
	}

	var r0 *operations.ListBasicAuthResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListBasicAuthRequest, ...operations.Option) (*operations.ListBasicAuthResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListBasicAuthRequest, ...operations.Option) *operations.ListBasicAuthResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListBasicAuthResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListBasicAuthRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialBasicAuthSDK_ListBasicAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBasicAuth'
type MockKongCredentialBasicAuthSDK_ListBasicAuth_Call struct {
	*mock.Call
}

// ListBasicAuth is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockKongCredentialBasicAuthSDK_Expecter) ListBasicAuth(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialBasicAuthSDK_ListBasicAuth_Call {
	return &MockKongCredentialBasicAuthSDK_ListBasicAuth_Call{Call: _e.mock.On("ListBasicAuth",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialBasicAuthSDK_ListBasicAuth_Call) Run(run func(ctx context.Context, request operations.ListBasicAuthRequest, opts ...operations.Option)) *MockKongCredentialBasicAuthSDK_ListBasicAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListBasicAuthRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialBasicAuthSDK_ListBasicAuth_Call) Return(listBasicAuthResponse *operations.ListBasicAuthResponse, err error) *MockKongCredentialBasicAuthSDK_ListBasicAuth_Call {
	_c.Call.Return(listBasicAuthResponse, err)
	return _c
}

func (_c *MockKongCredentialBasicAuthSDK_ListBasicAuth_Call) RunAndReturn(run func(ctx context.Context, request operations.ListBasicAuthRequest, opts ...operations.Option) (*operations.ListBasicAuthResponse, error)) *MockKongCredentialBasicAuthSDK_ListBasicAuth_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertBasicAuthWithConsumer provides a mock function for the type MockKongCredentialBasicAuthSDK
func (_mock *MockKongCredentialBasicAuthSDK) UpsertBasicAuthWithConsumer(ctx context.Context, request operations.UpsertBasicAuthWithConsumerRequest, opts ...operations.Option) (*operations.UpsertBasicAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertBasicAuthWithConsumer")
	}

	var r0 *operations.UpsertBasicAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertBasicAuthWithConsumerRequest, ...operations.Option) (*operations.UpsertBasicAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertBasicAuthWithConsumerRequest, ...operations.Option) *operations.UpsertBasicAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertBasicAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertBasicAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertBasicAuthWithConsumer'
type MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call struct {
	*mock.Call
}

// UpsertBasicAuthWithConsumer is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockKongCredentialBasicAuthSDK_Expecter) UpsertBasicAuthWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call {
	return &MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call{Call: _e.mock.On("UpsertBasicAuthWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call) Run(run func(ctx context.Context, request operations.UpsertBasicAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertBasicAuthWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call) Return(upsertBasicAuthWithConsumerResponse *operations.UpsertBasicAuthWithConsumerResponse, err error) *MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call {
	_c.Call.Return(upsertBasicAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertBasicAuthWithConsumerRequest, opts ...operations.Option) (*operations.UpsertBasicAuthWithConsumerResponse, error)) *MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKongCredentialHMACSDK creates a new instance of MockKongCredentialHMACSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKongCredentialHMACSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKongCredentialHMACSDK {
	mock := &MockKongCredentialHMACSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKongCredentialHMACSDK is an autogenerated mock type for the KongCredentialHMACSDK type
type MockKongCredentialHMACSDK struct {
	mock.Mock
}

type MockKongCredentialHMACSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKongCredentialHMACSDK) EXPECT() *MockKongCredentialHMACSDK_Expecter {
	return &MockKongCredentialHMACSDK_Expecter{mock: &_m.Mock}
}

// CreateHmacAuthWithConsumer provides a mock function for the type MockKongCredentialHMACSDK
func (_mock *MockKongCredentialHMACSDK) CreateHmacAuthWithConsumer(ctx context.Context, req operations.CreateHmacAuthWithConsumerRequest, opts ...operations.Option) (*operations.CreateHmacAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateHmacAuthWithConsumer")
	}

	var r0 *operations.CreateHmacAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateHmacAuthWithConsumerRequest, ...operations.Option) (*operations.CreateHmacAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateHmacAuthWithConsumerRequest, ...operations.Option) *operations.CreateHmacAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateHmacAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.CreateHmacAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateHmacAuthWithConsumer'
type MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call struct {
	*mock.Call
}

// CreateHmacAuthWithConsumer is a helper method to define mock.On call
//   - ctx
//   - req
//   - opts
func (_e *MockKongCredentialHMACSDK_Expecter) CreateHmacAuthWithConsumer(ctx interface{}, req interface{}, opts ...interface{}) *MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call {
	return &MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call{Call: _e.mock.On("CreateHmacAuthWithConsumer",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call) Run(run func(ctx context.Context, req operations.CreateHmacAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.CreateHmacAuthWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call) Return(createHmacAuthWithConsumerResponse *operations.CreateHmacAuthWithConsumerResponse, err error) *MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call {
	_c.Call.Return(createHmacAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, req operations.CreateHmacAuthWithConsumerRequest, opts ...operations.Option) (*operations.CreateHmacAuthWithConsumerResponse, error)) *MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteHmacAuthWithConsumer provides a mock function for the type MockKongCredentialHMACSDK
func (_mock *MockKongCredentialHMACSDK) DeleteHmacAuthWithConsumer(ctx context.Context, request operations.DeleteHmacAuthWithConsumerRequest, opts ...operations.Option) (*operations.DeleteHmacAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteHmacAuthWithConsumer")
	}

	var r0 *operations.DeleteHmacAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteHmacAuthWithConsumerRequest, ...operations.Option) (*operations.DeleteHmacAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteHmacAuthWithConsumerRequest, ...operations.Option) *operations.DeleteHmacAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteHmacAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.DeleteHmacAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteHmacAuthWithConsumer'
type MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call struct {
	*mock.Call
}

// DeleteHmacAuthWithConsumer is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockKongCredentialHMACSDK_Expecter) DeleteHmacAuthWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call {
	return &MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call{Call: _e.mock.On("DeleteHmacAuthWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call) Run(run func(ctx context.Context, request operations.DeleteHmacAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.DeleteHmacAuthWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call) Return(deleteHmacAuthWithConsumerResponse *operations.DeleteHmacAuthWithConsumerResponse, err error) *MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call {
	_c.Call.Return(deleteHmacAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.DeleteHmacAuthWithConsumerRequest, opts ...operations.Option) (*operations.DeleteHmacAuthWithConsumerResponse, error)) *MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// ListHmacAuth provides a mock function for the type MockKongCredentialHMACSDK
func (_mock *MockKongCredentialHMACSDK) ListHmacAuth(ctx context.Context, request operations.ListHmacAuthRequest, opts ...operations.Option) (*operations.ListHmacAuthResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListHmacAuth")
	}

	var r0 *operations.ListHmacAuthResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListHmacAuthRequest, ...operations.Option) (*operations.ListHmacAuthResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListHmacAuthRequest, ...operations.Option) *operations.ListHmacAuthResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListHmacAuthResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListHmacAuthRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialHMACSDK_ListHmacAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListHmacAuth'
type MockKongCredentialHMACSDK_ListHmacAuth_Call struct {
	*mock.Call
}

// ListHmacAuth is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockKongCredentialHMACSDK_Expecter) ListHmacAuth(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialHMACSDK_ListHmacAuth_Call {
	return &MockKongCredentialHMACSDK_ListHmacAuth_Call{Call: _e.mock.On("ListHmacAuth",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialHMACSDK_ListHmacAuth_Call) Run(run func(ctx context.Context, request operations.ListHmacAuthRequest, opts ...operations.Option)) *MockKongCredentialHMACSDK_ListHmacAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListHmacAuthRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialHMACSDK_ListHmacAuth_Call) Return(listHmacAuthResponse *operations.ListHmacAuthResponse, err error) *MockKongCredentialHMACSDK_ListHmacAuth_Call {
	_c.Call.Return(listHmacAuthResponse, err)
	return _c
}

func (_c *MockKongCredentialHMACSDK_ListHmacAuth_Call) RunAndReturn(run func(ctx context.Context, request operations.ListHmacAuthRequest, opts ...operations.Option) (*operations.ListHmacAuthResponse, error)) *MockKongCredentialHMACSDK_ListHmacAuth_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertHmacAuthWithConsumer provides a mock function for the type MockKongCredentialHMACSDK
func (_mock *MockKongCredentialHMACSDK) UpsertHmacAuthWithConsumer(ctx context.Context, request operations.UpsertHmacAuthWithConsumerRequest, opts ...operations.Option) (*operations.UpsertHmacAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertHmacAuthWithConsumer")
	}

	var r0 *operations.UpsertHmacAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertHmacAuthWithConsumerRequest, ...operations.Option) (*operations.UpsertHmacAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertHmacAuthWithConsumerRequest, ...operations.Option) *operations.UpsertHmacAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertHmacAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertHmacAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertHmacAuthWithConsumer'
type MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call struct {
	*mock.Call
}

// UpsertHmacAuthWithConsumer is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockKongCredentialHMACSDK_Expecter) UpsertHmacAuthWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call {
	return &MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call{Call: _e.mock.On("UpsertHmacAuthWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call) Run(run func(ctx context.Context, request operations.UpsertHmacAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertHmacAuthWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call) Return(upsertHmacAuthWithConsumerResponse *operations.UpsertHmacAuthWithConsumerResponse, err error) *MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call {
	_c.Call.Return(upsertHmacAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertHmacAuthWithConsumerRequest, opts ...operations.Option) (*operations.UpsertHmacAuthWithConsumerResponse, error)) *MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKongCredentialJWTSDK creates a new instance of MockKongCredentialJWTSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKongCredentialJWTSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKongCredentialJWTSDK {
	mock := &MockKongCredentialJWTSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKongCredentialJWTSDK is an autogenerated mock type for the KongCredentialJWTSDK type
type MockKongCredentialJWTSDK struct {
	mock.Mock
}

type MockKongCredentialJWTSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKongCredentialJWTSDK) EXPECT() *MockKongCredentialJWTSDK_Expecter {
	return &MockKongCredentialJWTSDK_Expecter{mock: &_m.Mock}
}

// CreateJwtWithConsumer provides a mock function for the type MockKongCredentialJWTSDK
func (_mock *MockKongCredentialJWTSDK) CreateJwtWithConsumer(ctx context.Context, req operations.CreateJwtWithConsumerRequest, opts ...operations.Option) (*operations.CreateJwtWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateJwtWithConsumer")
	}

	var r0 *operations.CreateJwtWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateJwtWithConsumerRequest, ...operations.Option) (*operations.CreateJwtWithConsumerResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateJwtWithConsumerRequest, ...operations.Option) *operations.CreateJwtWithConsumerResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateJwtWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.CreateJwtWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJwtWithConsumer'
type MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call struct {
	*mock.Call
}

// CreateJwtWithConsumer is a helper method to define mock.On call
//   - ctx
//   - req
//   - opts
func (_e *MockKongCredentialJWTSDK_Expecter) CreateJwtWithConsumer(ctx interface{}, req interface{}, opts ...interface{}) *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call {
	return &MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call{Call: _e.mock.On("CreateJwtWithConsumer",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call) Run(run func(ctx context.Context, req operations.CreateJwtWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.CreateJwtWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call) Return(createJwtWithConsumerResponse *operations.CreateJwtWithConsumerResponse, err error) *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call {
	_c.Call.Return(createJwtWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call) RunAndReturn(run func(ctx context.Context, req operations.CreateJwtWithConsumerRequest, opts ...operations.Option) (*operations.CreateJwtWithConsumerResponse, error)) *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteJwtWithConsumer provides a mock function for the type MockKongCredentialJWTSDK
func (_mock *MockKongCredentialJWTSDK) DeleteJwtWithConsumer(ctx context.Context, request operations.DeleteJwtWithConsumerRequest, opts ...operations.Option) (*operations.DeleteJwtWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteJwtWithConsumer")
	}

	var r0 *operations.DeleteJwtWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteJwtWithConsumerRequest, ...operations.Option) (*operations.DeleteJwtWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteJwtWithConsumerRequest, ...operations.Option) *operations.DeleteJwtWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteJwtWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.DeleteJwtWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJwtWithConsumer'
type MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call struct {
	*mock.Call
}

// DeleteJwtWithConsumer is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockKongCredentialJWTSDK_Expecter) DeleteJwtWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call {
	return &MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call{Call: _e.mock.On("DeleteJwtWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call) Run(run func(ctx context.Context, request operations.DeleteJwtWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.DeleteJwtWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call) Return(deleteJwtWithConsumerResponse *operations.DeleteJwtWithConsumerResponse, err error) *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call {
	_c.Call.Return(deleteJwtWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.DeleteJwtWithConsumerRequest, opts ...operations.Option) (*operations.DeleteJwtWithConsumerResponse, error)) *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// ListJwt provides a mock function for the type MockKongCredentialJWTSDK
func (_mock *MockKongCredentialJWTSDK) ListJwt(ctx context.Context, request operations.ListJwtRequest, opts ...operations.Option) (*operations.ListJwtResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListJwt")
	}

	var r0 *operations.ListJwtResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListJwtRequest, ...operations.Option) (*operations.ListJwtResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListJwtRequest, ...operations.Option) *operations.ListJwtResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListJwtResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListJwtRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialJWTSDK_ListJwt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListJwt'
type MockKongCredentialJWTSDK_ListJwt_Call struct {
	*mock.Call
}

// ListJwt is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockKongCredentialJWTSDK_Expecter) ListJwt(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialJWTSDK_ListJwt_Call {
	return &MockKongCredentialJWTSDK_ListJwt_Call{Call: _e.mock.On("ListJwt",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialJWTSDK_ListJwt_Call) Run(run func(ctx context.Context, request operations.ListJwtRequest, opts ...operations.Option)) *MockKongCredentialJWTSDK_ListJwt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListJwtRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialJWTSDK_ListJwt_Call) Return(listJwtResponse *operations.ListJwtResponse, err error) *MockKongCredentialJWTSDK_ListJwt_Call {
	_c.Call.Return(listJwtResponse, err)
	return _c
}

func (_c *MockKongCredentialJWTSDK_ListJwt_Call) RunAndReturn(run func(ctx context.Context, request operations.ListJwtRequest, opts ...operations.Option) (*operations.ListJwtResponse, error)) *MockKongCredentialJWTSDK_ListJwt_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertJwtWithConsumer provides a mock function for the type MockKongCredentialJWTSDK
func (_mock *MockKongCredentialJWTSDK) UpsertJwtWithConsumer(ctx context.Context, request operations.UpsertJwtWithConsumerRequest, opts ...operations.Option) (*operations.UpsertJwtWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertJwtWithConsumer")
	}

	var r0 *operations.UpsertJwtWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertJwtWithConsumerRequest, ...operations.Option) (*operations.UpsertJwtWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertJwtWithConsumerRequest, ...operations.Option) *operations.UpsertJwtWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertJwtWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertJwtWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertJwtWithConsumer'
type MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call struct {
	*mock.Call
}

// UpsertJwtWithConsumer is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockKongCredentialJWTSDK_Expecter) UpsertJwtWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call {
	return &MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call{Call: _e.mock.On("UpsertJwtWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call) Run(run func(ctx context.Context, request operations.UpsertJwtWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertJwtWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call) Return(upsertJwtWithConsumerResponse *operations.UpsertJwtWithConsumerResponse, err error) *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call {
	_c.Call.Return(upsertJwtWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertJwtWithConsumerRequest, opts ...operations.Option) (*operations.UpsertJwtWithConsumerResponse, error)) *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCloudGatewaysSDK creates a new instance of MockCloudGatewaysSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCloudGatewaysSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCloudGatewaysSDK {
	mock := &MockCloudGatewaysSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCloudGatewaysSDK is an autogenerated mock type for the CloudGatewaysSDK type
type MockCloudGatewaysSDK struct {
	mock.Mock
}

type MockCloudGatewaysSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCloudGatewaysSDK) EXPECT() *MockCloudGatewaysSDK_Expecter {
	return &MockCloudGatewaysSDK_Expecter{mock: &_m.Mock}
}

// CreateConfiguration provides a mock function for the type MockCloudGatewaysSDK
func (_mock *MockCloudGatewaysSDK) CreateConfiguration(ctx context.Context, request components.CreateConfigurationRequest, opts ...operations.Option) (*operations.CreateConfigurationResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateConfiguration")
	}

	var r0 *operations.CreateConfigurationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, components.CreateConfigurationRequest, ...operations.Option) (*operations.CreateConfigurationResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, components.CreateConfigurationRequest, ...operations.Option) *operations.CreateConfigurationResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateConfigurationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, components.CreateConfigurationRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudGatewaysSDK_CreateConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConfiguration'
type MockCloudGatewaysSDK_CreateConfiguration_Call struct {
	*mock.Call
}

// CreateConfiguration is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockCloudGatewaysSDK_Expecter) CreateConfiguration(ctx interface{}, request interface{}, opts ...interface{}) *MockCloudGatewaysSDK_CreateConfiguration_Call {
	return &MockCloudGatewaysSDK_CreateConfiguration_Call{Call: _e.mock.On("CreateConfiguration",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockCloudGatewaysSDK_CreateConfiguration_Call) Run(run func(ctx context.Context, request components.CreateConfigurationRequest, opts ...operations.Option)) *MockCloudGatewaysSDK_CreateConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(components.CreateConfigurationRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudGatewaysSDK_CreateConfiguration_Call) Return(createConfigurationResponse *operations.CreateConfigurationResponse, err error) *MockCloudGatewaysSDK_CreateConfiguration_Call {
	_c.Call.Return(createConfigurationResponse, err)
	return _c
}

func (_c *MockCloudGatewaysSDK_CreateConfiguration_Call) RunAndReturn(run func(ctx context.Context, request components.CreateConfigurationRequest, opts ...operations.Option) (*operations.CreateConfigurationResponse, error)) *MockCloudGatewaysSDK_CreateConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNetwork provides a mock function for the type MockCloudGatewaysSDK
func (_mock *MockCloudGatewaysSDK) CreateNetwork(ctx context.Context, request components.CreateNetworkRequest, opts ...operations.Option) (*operations.CreateNetworkResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateNetwork")
	}

	var r0 *operations.CreateNetworkResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, components.CreateNetworkRequest, ...operations.Option) (*operations.CreateNetworkResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, components.CreateNetworkRequest, ...operations.Option) *operations.CreateNetworkResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateNetworkResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, components.CreateNetworkRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudGatewaysSDK_CreateNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNetwork'
type MockCloudGatewaysSDK_CreateNetwork_Call struct {
	*mock.Call
}

// CreateNetwork is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockCloudGatewaysSDK_Expecter) CreateNetwork(ctx interface{}, request interface{}, opts ...interface{}) *MockCloudGatewaysSDK_CreateNetwork_Call {
	return &MockCloudGatewaysSDK_CreateNetwork_Call{Call: _e.mock.On("CreateNetwork",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockCloudGatewaysSDK_CreateNetwork_Call) Run(run func(ctx context.Context, request components.CreateNetworkRequest, opts ...operations.Option)) *MockCloudGatewaysSDK_CreateNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(components.CreateNetworkRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudGatewaysSDK_CreateNetwork_Call) Return(createNetworkResponse *operations.CreateNetworkResponse, err error) *MockCloudGatewaysSDK_CreateNetwork_Call {
	_c.Call.Return(createNetworkResponse, err)
	return _c
}

func (_c *MockCloudGatewaysSDK_CreateNetwork_Call) RunAndReturn(run func(ctx context.Context, request components.CreateNetworkRequest, opts ...operations.Option) (*operations.CreateNetworkResponse, error)) *MockCloudGatewaysSDK_CreateNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNetwork provides a mock function for the type MockCloudGatewaysSDK
func (_mock *MockCloudGatewaysSDK) DeleteNetwork(ctx context.Context, networkID string, opts ...operations.Option) (*operations.DeleteNetworkResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, networkID, opts)
	} else {
		tmpRet = _mock.Called(ctx, networkID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetwork")
	}

	var r0 *operations.DeleteNetworkResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...operations.Option) (*operations.DeleteNetworkResponse, error)); ok {
		return returnFunc(ctx, networkID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...operations.Option) *operations.DeleteNetworkResponse); ok {
		r0 = returnFunc(ctx, networkID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteNetworkResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, networkID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudGatewaysSDK_DeleteNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNetwork'
type MockCloudGatewaysSDK_DeleteNetwork_Call struct {
	*mock.Call
}

// DeleteNetwork is a helper method to define mock.On call
//   - ctx
//   - networkID
//   - opts
func (_e *MockCloudGatewaysSDK_Expecter) DeleteNetwork(ctx interface{}, networkID interface{}, opts ...interface{}) *MockCloudGatewaysSDK_DeleteNetwork_Call {
	return &MockCloudGatewaysSDK_DeleteNetwork_Call{Call: _e.mock.On("DeleteNetwork",
		append([]interface{}{ctx, networkID}, opts...)...)}
}

func (_c *MockCloudGatewaysSDK_DeleteNetwork_Call) Run(run func(ctx context.Context, networkID string, opts ...operations.Option)) *MockCloudGatewaysSDK_DeleteNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudGatewaysSDK_DeleteNetwork_Call) Return(deleteNetworkResponse *operations.DeleteNetworkResponse, err error) *MockCloudGatewaysSDK_DeleteNetwork_Call {
	_c.Call.Return(deleteNetworkResponse, err)
	return _c
}

func (_c *MockCloudGatewaysSDK_DeleteNetwork_Call) RunAndReturn(run func(ctx context.Context, networkID string, opts ...operations.Option) (*operations.DeleteNetworkResponse, error)) *MockCloudGatewaysSDK_DeleteNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfiguration provides a mock function for the type MockCloudGatewaysSDK
func (_mock *MockCloudGatewaysSDK) GetConfiguration(ctx context.Context, configurationID string, opts ...operations.Option) (*operations.GetConfigurationResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, configurationID, opts)
	} else {
		tmpRet = _mock.Called(ctx, configurationID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetConfiguration")
	}

	var r0 *operations.GetConfigurationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...operations.Option) (*operations.GetConfigurationResponse, error)); ok {
		return returnFunc(ctx, configurationID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...operations.Option) *operations.GetConfigurationResponse); ok {
		r0 = returnFunc(ctx, configurationID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetConfigurationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, configurationID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudGatewaysSDK_GetConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfiguration'
type MockCloudGatewaysSDK_GetConfiguration_Call struct {
	*mock.Call
}

// GetConfiguration is a helper method to define mock.On call
//   - ctx
//   - configurationID
//   - opts
func (_e *MockCloudGatewaysSDK_Expecter) GetConfiguration(ctx interface{}, configurationID interface{}, opts ...interface{}) *MockCloudGatewaysSDK_GetConfiguration_Call {
	return &MockCloudGatewaysSDK_GetConfiguration_Call{Call: _e.mock.On("GetConfiguration",
		append([]interface{}{ctx, configurationID}, opts...)...)}
}

func (_c *MockCloudGatewaysSDK_GetConfiguration_Call) Run(run func(ctx context.Context, configurationID string, opts ...operations.Option)) *MockCloudGatewaysSDK_GetConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudGatewaysSDK_GetConfiguration_Call) Return(getConfigurationResponse *operations.GetConfigurationResponse, err error) *MockCloudGatewaysSDK_GetConfiguration_Call {
	_c.Call.Return(getConfigurationResponse, err)
	return _c
}

func (_c *MockCloudGatewaysSDK_GetConfiguration_Call) RunAndReturn(run func(ctx context.Context, configurationID string, opts ...operations.Option) (*operations.GetConfigurationResponse, error)) *MockCloudGatewaysSDK_GetConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetwork provides a mock function for the type MockCloudGatewaysSDK
func (_mock *MockCloudGatewaysSDK) GetNetwork(ctx context.Context, networkID string, opts ...operations.Option) (*operations.GetNetworkResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, networkID, opts)
	} else {
		tmpRet = _mock.Called(ctx, networkID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetNetwork")
	}

	var r0 *operations.GetNetworkResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...operations.Option) (*operations.GetNetworkResponse, error)); ok {
		return returnFunc(ctx, networkID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...operations.Option) *operations.GetNetworkResponse); ok {
		r0 = returnFunc(ctx, networkID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetNetworkResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, networkID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudGatewaysSDK_GetNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetwork'
type MockCloudGatewaysSDK_GetNetwork_Call struct {
	*mock.Call
}

// GetNetwork is a helper method to define mock.On call
//   - ctx
//   - networkID
//   - opts
func (_e *MockCloudGatewaysSDK_Expecter) GetNetwork(ctx interface{}, networkID interface{}, opts ...interface{}) *MockCloudGatewaysSDK_GetNetwork_Call {
	return &MockCloudGatewaysSDK_GetNetwork_Call{Call: _e.mock.On("GetNetwork",
		append([]interface{}{ctx, networkID}, opts...)...)}
}

func (_c *MockCloudGatewaysSDK_GetNetwork_Call) Run(run func(ctx context.Context, networkID string, opts ...operations.Option)) *MockCloudGatewaysSDK_GetNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudGatewaysSDK_GetNetwork_Call) Return(getNetworkResponse *operations.GetNetworkResponse, err error) *MockCloudGatewaysSDK_GetNetwork_Call {
	_c.Call.Return(getNetworkResponse, err)
	return _c
}

func (_c *MockCloudGatewaysSDK_GetNetwork_Call) RunAndReturn(run func(ctx context.Context, networkID string, opts ...operations.Option) (*operations.GetNetworkResponse, error)) *MockCloudGatewaysSDK_GetNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// ListConfigurations provides a mock function for the type MockCloudGatewaysSDK
func (_mock *MockCloudGatewaysSDK) ListConfigurations(ctx context.Context, request operations.ListConfigurationsRequest, opts ...operations.Option) (*operations.ListConfigurationsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListConfigurations")
	}

	var r0 *operations.ListConfigurationsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListConfigurationsRequest, ...operations.Option) (*operations.ListConfigurationsResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListConfigurationsRequest, ...operations.Option) *operations.ListConfigurationsResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListConfigurationsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListConfigurationsRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudGatewaysSDK_ListConfigurations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConfigurations'
type MockCloudGatewaysSDK_ListConfigurations_Call struct {
	*mock.Call
}

// ListConfigurations is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockCloudGatewaysSDK_Expecter) ListConfigurations(ctx interface{}, request interface{}, opts ...interface{}) *MockCloudGatewaysSDK_ListConfigurations_Call {
	return &MockCloudGatewaysSDK_ListConfigurations_Call{Call: _e.mock.On("ListConfigurations",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockCloudGatewaysSDK_ListConfigurations_Call) Run(run func(ctx context.Context, request operations.ListConfigurationsRequest, opts ...operations.Option)) *MockCloudGatewaysSDK_ListConfigurations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListConfigurationsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudGatewaysSDK_ListConfigurations_Call) Return(listConfigurationsResponse *operations.ListConfigurationsResponse, err error) *MockCloudGatewaysSDK_ListConfigurations_Call {
	_c.Call.Return(listConfigurationsResponse, err)
	return _c
}

func (_c *MockCloudGatewaysSDK_ListConfigurations_Call) RunAndReturn(run func(ctx context.Context, request operations.ListConfigurationsRequest, opts ...operations.Option) (*operations.ListConfigurationsResponse, error)) *MockCloudGatewaysSDK_ListConfigurations_Call {
	_c.Call.Return(run)
	return _c
}

// ListNetworks provides a mock function for the type MockCloudGatewaysSDK
func (_mock *MockCloudGatewaysSDK) ListNetworks(ctx context.Context, request operations.ListNetworksRequest, opts ...operations.Option) (*operations.ListNetworksResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListNetworks")
	}

	var r0 *operations.ListNetworksResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListNetworksRequest, ...operations.Option) (*operations.ListNetworksResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListNetworksRequest, ...operations.Option) *operations.ListNetworksResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListNetworksResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListNetworksRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudGatewaysSDK_ListNetworks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNetworks'
type MockCloudGatewaysSDK_ListNetworks_Call struct {
	*mock.Call
}

// ListNetworks is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockCloudGatewaysSDK_Expecter) ListNetworks(ctx interface{}, request interface{}, opts ...interface{}) *MockCloudGatewaysSDK_ListNetworks_Call {
	return &MockCloudGatewaysSDK_ListNetworks_Call{Call: _e.mock.On("ListNetworks",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockCloudGatewaysSDK_ListNetworks_Call) Run(run func(ctx context.Context, request operations.ListNetworksRequest, opts ...operations.Option)) *MockCloudGatewaysSDK_ListNetworks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListNetworksRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudGatewaysSDK_ListNetworks_Call) Return(listNetworksResponse *operations.ListNetworksResponse, err error) *MockCloudGatewaysSDK_ListNetworks_Call {
	_c.Call.Return(listNetworksResponse, err)
	return _c
}

func (_c *MockCloudGatewaysSDK_ListNetworks_Call) RunAndReturn(run func(ctx context.Context, request operations.ListNetworksRequest, opts ...operations.Option) (*operations.ListNetworksResponse, error)) *MockCloudGatewaysSDK_ListNetworks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNetwork provides a mock function for the type MockCloudGatewaysSDK
func (_mock *MockCloudGatewaysSDK) UpdateNetwork(ctx context.Context, networkID string, patchNetworkRequest components.PatchNetworkRequest, opts ...operations.Option) (*operations.UpdateNetworkResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, networkID, patchNetworkRequest, opts)
	} else {
		tmpRet = _mock.Called(ctx, networkID, patchNetworkRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateNetwork")
	}

	var r0 *operations.UpdateNetworkResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.PatchNetworkRequest, ...operations.Option) (*operations.UpdateNetworkResponse, error)); ok {
		return returnFunc(ctx, networkID, patchNetworkRequest, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.PatchNetworkRequest, ...operations.Option) *operations.UpdateNetworkResponse); ok {
		r0 = returnFunc(ctx, networkID, patchNetworkRequest, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpdateNetworkResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.PatchNetworkRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, networkID, patchNetworkRequest, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudGatewaysSDK_UpdateNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNetwork'
type MockCloudGatewaysSDK_UpdateNetwork_Call struct {
	*mock.Call
}

// UpdateNetwork is a helper method to define mock.On call
//   - ctx
//   - networkID
//   - patchNetworkRequest
//   - opts
func (_e *MockCloudGatewaysSDK_Expecter) UpdateNetwork(ctx interface{}, networkID interface{}, patchNetworkRequest interface{}, opts ...interface{}) *MockCloudGatewaysSDK_UpdateNetwork_Call {
	return &MockCloudGatewaysSDK_UpdateNetwork_Call{Call: _e.mock.On("UpdateNetwork",
		append([]interface{}{ctx, networkID, patchNetworkRequest}, opts...)...)}
}

func (_c *MockCloudGatewaysSDK_UpdateNetwork_Call) Run(run func(ctx context.Context, networkID string, patchNetworkRequest components.PatchNetworkRequest, opts ...operations.Option)) *MockCloudGatewaysSDK_UpdateNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(components.PatchNetworkRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudGatewaysSDK_UpdateNetwork_Call) Return(updateNetworkResponse *operations.UpdateNetworkResponse, err error) *MockCloudGatewaysSDK_UpdateNetwork_Call {
	_c.Call.Return(updateNetworkResponse, err)
	return _c
}

func (_c *MockCloudGatewaysSDK_UpdateNetwork_Call) RunAndReturn(run func(ctx context.Context, networkID string, patchNetworkRequest components.PatchNetworkRequest, opts ...operations.Option) (*operations.UpdateNetworkResponse, error)) *MockCloudGatewaysSDK_UpdateNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCACertificatesSDK creates a new instance of MockCACertificatesSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCACertificatesSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCACertificatesSDK {
	mock := &MockCACertificatesSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCACertificatesSDK is an autogenerated mock type for the CACertificatesSDK type
type MockCACertificatesSDK struct {
	mock.Mock
}

type MockCACertificatesSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCACertificatesSDK) EXPECT() *MockCACertificatesSDK_Expecter {
	return &MockCACertificatesSDK_Expecter{mock: &_m.Mock}
}

// CreateCaCertificate provides a mock function for the type MockCACertificatesSDK
func (_mock *MockCACertificatesSDK) CreateCaCertificate(ctx context.Context, controlPlaneID string, caCertificate components.CACertificate, opts ...operations.Option) (*operations.CreateCaCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, caCertificate, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, caCertificate)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateCaCertificate")
	}

	var r0 *operations.CreateCaCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.CACertificate, ...operations.Option) (*operations.CreateCaCertificateResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, caCertificate, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.CACertificate, ...operations.Option) *operations.CreateCaCertificateResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, caCertificate, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateCaCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.CACertificate, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, caCertificate, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCACertificatesSDK_CreateCaCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCaCertificate'
type MockCACertificatesSDK_CreateCaCertificate_Call struct {
	*mock.Call
}

// CreateCaCertificate is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - caCertificate
//   - opts
func (_e *MockCACertificatesSDK_Expecter) CreateCaCertificate(ctx interface{}, controlPlaneID interface{}, caCertificate interface{}, opts ...interface{}) *MockCACertificatesSDK_CreateCaCertificate_Call {
	return &MockCACertificatesSDK_CreateCaCertificate_Call{Call: _e.mock.On("CreateCaCertificate",
		append([]interface{}{ctx, controlPlaneID, caCertificate}, opts...)...)}
}

func (_c *MockCACertificatesSDK_CreateCaCertificate_Call) Run(run func(ctx context.Context, controlPlaneID string, caCertificate components.CACertificate, opts ...operations.Option)) *MockCACertificatesSDK_CreateCaCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(components.CACertificate), variadicArgs...)
	})
	return _c
}

func (_c *MockCACertificatesSDK_CreateCaCertificate_Call) Return(createCaCertificateResponse *operations.CreateCaCertificateResponse, err error) *MockCACertificatesSDK_CreateCaCertificate_Call {
	_c.Call.Return(createCaCertificateResponse, err)
	return _c
}

func (_c *MockCACertificatesSDK_CreateCaCertificate_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, caCertificate components.CACertificate, opts ...operations.Option) (*operations.CreateCaCertificateResponse, error)) *MockCACertificatesSDK_CreateCaCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCaCertificate provides a mock function for the type MockCACertificatesSDK
func (_mock *MockCACertificatesSDK) DeleteCaCertificate(ctx context.Context, controlPlaneID string, caCertificateID string, opts ...operations.Option) (*operations.DeleteCaCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, caCertificateID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, caCertificateID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteCaCertificate")
	}

	var r0 *operations.DeleteCaCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteCaCertificateResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, caCertificateID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteCaCertificateResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, caCertificateID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteCaCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, caCertificateID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCACertificatesSDK_DeleteCaCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCaCertificate'
type MockCACertificatesSDK_DeleteCaCertificate_Call struct {
	*mock.Call
}

// DeleteCaCertificate is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - caCertificateID
//   - opts
func (_e *MockCACertificatesSDK_Expecter) DeleteCaCertificate(ctx interface{}, controlPlaneID interface{}, caCertificateID interface{}, opts ...interface{}) *MockCACertificatesSDK_DeleteCaCertificate_Call {
	return &MockCACertificatesSDK_DeleteCaCertificate_Call{Call: _e.mock.On("DeleteCaCertificate",
		append([]interface{}{ctx, controlPlaneID, caCertificateID}, opts...)...)}
}

func (_c *MockCACertificatesSDK_DeleteCaCertificate_Call) Run(run func(ctx context.Context, controlPlaneID string, caCertificateID string, opts ...operations.Option)) *MockCACertificatesSDK_DeleteCaCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockCACertificatesSDK_DeleteCaCertificate_Call) Return(deleteCaCertificateResponse *operations.DeleteCaCertificateResponse, err error) *MockCACertificatesSDK_DeleteCaCertificate_Call {
	_c.Call.Return(deleteCaCertificateResponse, err)
	return _c
}

func (_c *MockCACertificatesSDK_DeleteCaCertificate_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, caCertificateID string, opts ...operations.Option) (*operations.DeleteCaCertificateResponse, error)) *MockCACertificatesSDK_DeleteCaCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// ListCaCertificate provides a mock function for the type MockCACertificatesSDK
func (_mock *MockCACertificatesSDK) ListCaCertificate(ctx context.Context, request operations.ListCaCertificateRequest, opts ...operations.Option) (*operations.ListCaCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListCaCertificate")
	}

	var r0 *operations.ListCaCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListCaCertificateRequest, ...operations.Option) (*operations.ListCaCertificateResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListCaCertificateRequest, ...operations.Option) *operations.ListCaCertificateResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListCaCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListCaCertificateRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCACertificatesSDK_ListCaCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCaCertificate'
type MockCACertificatesSDK_ListCaCertificate_Call struct {
	*mock.Call
}

// ListCaCertificate is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockCACertificatesSDK_Expecter) ListCaCertificate(ctx interface{}, request interface{}, opts ...interface{}) *MockCACertificatesSDK_ListCaCertificate_Call {
	return &MockCACertificatesSDK_ListCaCertificate_Call{Call: _e.mock.On("ListCaCertificate",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockCACertificatesSDK_ListCaCertificate_Call) Run(run func(ctx context.Context, request operations.ListCaCertificateRequest, opts ...operations.Option)) *MockCACertificatesSDK_ListCaCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListCaCertificateRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCACertificatesSDK_ListCaCertificate_Call) Return(listCaCertificateResponse *operations.ListCaCertificateResponse, err error) *MockCACertificatesSDK_ListCaCertificate_Call {
	_c.Call.Return(listCaCertificateResponse, err)
	return _c
}

func (_c *MockCACertificatesSDK_ListCaCertificate_Call) RunAndReturn(run func(ctx context.Context, request operations.ListCaCertificateRequest, opts ...operations.Option) (*operations.ListCaCertificateResponse, error)) *MockCACertificatesSDK_ListCaCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertCaCertificate provides a mock function for the type MockCACertificatesSDK
func (_mock *MockCACertificatesSDK) UpsertCaCertificate(ctx context.Context, request operations.UpsertCaCertificateRequest, opts ...operations.Option) (*operations.UpsertCaCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertCaCertificate")
	}

	var r0 *operations.UpsertCaCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertCaCertificateRequest, ...operations.Option) (*operations.UpsertCaCertificateResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertCaCertificateRequest, ...operations.Option) *operations.UpsertCaCertificateResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertCaCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertCaCertificateRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCACertificatesSDK_UpsertCaCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertCaCertificate'
type MockCACertificatesSDK_UpsertCaCertificate_Call struct {
	*mock.Call
}

// UpsertCaCertificate is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockCACertificatesSDK_Expecter) UpsertCaCertificate(ctx interface{}, request interface{}, opts ...interface{}) *MockCACertificatesSDK_UpsertCaCertificate_Call {
	return &MockCACertificatesSDK_UpsertCaCertificate_Call{Call: _e.mock.On("UpsertCaCertificate",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockCACertificatesSDK_UpsertCaCertificate_Call) Run(run func(ctx context.Context, request operations.UpsertCaCertificateRequest, opts ...operations.Option)) *MockCACertificatesSDK_UpsertCaCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertCaCertificateRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCACertificatesSDK_UpsertCaCertificate_Call) Return(upsertCaCertificateResponse *operations.UpsertCaCertificateResponse, err error) *MockCACertificatesSDK_UpsertCaCertificate_Call {
	_c.Call.Return(upsertCaCertificateResponse, err)
	return _c
}

func (_c *MockCACertificatesSDK_UpsertCaCertificate_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertCaCertificateRequest, opts ...operations.Option) (*operations.UpsertCaCertificateResponse, error)) *MockCACertificatesSDK_UpsertCaCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCertificatesSDK creates a new instance of MockCertificatesSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCertificatesSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCertificatesSDK {
	mock := &MockCertificatesSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCertificatesSDK is an autogenerated mock type for the CertificatesSDK type
type MockCertificatesSDK struct {
	mock.Mock
}

type MockCertificatesSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCertificatesSDK) EXPECT() *MockCertificatesSDK_Expecter {
	return &MockCertificatesSDK_Expecter{mock: &_m.Mock}
}

// CreateCertificate provides a mock function for the type MockCertificatesSDK
func (_mock *MockCertificatesSDK) CreateCertificate(ctx context.Context, controlPlaneID string, certificate components.Certificate, opts ...operations.Option) (*operations.CreateCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, certificate, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, certificate)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateCertificate")
	}

	var r0 *operations.CreateCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Certificate, ...operations.Option) (*operations.CreateCertificateResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, certificate, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Certificate, ...operations.Option) *operations.CreateCertificateResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, certificate, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.Certificate, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, certificate, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCertificatesSDK_CreateCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCertificate'
type MockCertificatesSDK_CreateCertificate_Call struct {
	*mock.Call
}

// CreateCertificate is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - certificate
//   - opts
func (_e *MockCertificatesSDK_Expecter) CreateCertificate(ctx interface{}, controlPlaneID interface{}, certificate interface{}, opts ...interface{}) *MockCertificatesSDK_CreateCertificate_Call {
	return &MockCertificatesSDK_CreateCertificate_Call{Call: _e.mock.On("CreateCertificate",
		append([]interface{}{ctx, controlPlaneID, certificate}, opts...)...)}
}

func (_c *MockCertificatesSDK_CreateCertificate_Call) Run(run func(ctx context.Context, controlPlaneID string, certificate components.Certificate, opts ...operations.Option)) *MockCertificatesSDK_CreateCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(components.Certificate), variadicArgs...)
	})
	return _c
}

func (_c *MockCertificatesSDK_CreateCertificate_Call) Return(createCertificateResponse *operations.CreateCertificateResponse, err error) *MockCertificatesSDK_CreateCertificate_Call {
	_c.Call.Return(createCertificateResponse, err)
	return _c
}

func (_c *MockCertificatesSDK_CreateCertificate_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, certificate components.Certificate, opts ...operations.Option) (*operations.CreateCertificateResponse, error)) *MockCertificatesSDK_CreateCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCertificate provides a mock function for the type MockCertificatesSDK
func (_mock *MockCertificatesSDK) DeleteCertificate(ctx context.Context, controlPlaneID string, certificateID string, opts ...operations.Option) (*operations.DeleteCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, certificateID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, certificateID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteCertificate")
	}

	var r0 *operations.DeleteCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteCertificateResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, certificateID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteCertificateResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, certificateID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, certificateID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCertificatesSDK_DeleteCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCertificate'
type MockCertificatesSDK_DeleteCertificate_Call struct {
	*mock.Call
}

// DeleteCertificate is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - certificateID
//   - opts
func (_e *MockCertificatesSDK_Expecter) DeleteCertificate(ctx interface{}, controlPlaneID interface{}, certificateID interface{}, opts ...interface{}) *MockCertificatesSDK_DeleteCertificate_Call {
	return &MockCertificatesSDK_DeleteCertificate_Call{Call: _e.mock.On("DeleteCertificate",
		append([]interface{}{ctx, controlPlaneID, certificateID}, opts...)...)}
}

func (_c *MockCertificatesSDK_DeleteCertificate_Call) Run(run func(ctx context.Context, controlPlaneID string, certificateID string, opts ...operations.Option)) *MockCertificatesSDK_DeleteCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockCertificatesSDK_DeleteCertificate_Call) Return(deleteCertificateResponse *operations.DeleteCertificateResponse, err error) *MockCertificatesSDK_DeleteCertificate_Call {
	_c.Call.Return(deleteCertificateResponse, err)
	return _c
}

func (_c *MockCertificatesSDK_DeleteCertificate_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, certificateID string, opts ...operations.Option) (*operations.DeleteCertificateResponse, error)) *MockCertificatesSDK_DeleteCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// ListCertificate provides a mock function for the type MockCertificatesSDK
func (_mock *MockCertificatesSDK) ListCertificate(ctx context.Context, request operations.ListCertificateRequest, opts ...operations.Option) (*operations.ListCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListCertificate")
	}

	var r0 *operations.ListCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListCertificateRequest, ...operations.Option) (*operations.ListCertificateResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListCertificateRequest, ...operations.Option) *operations.ListCertificateResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListCertificateRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCertificatesSDK_ListCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCertificate'
type MockCertificatesSDK_ListCertificate_Call struct {
	*mock.Call
}

// ListCertificate is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockCertificatesSDK_Expecter) ListCertificate(ctx interface{}, request interface{}, opts ...interface{}) *MockCertificatesSDK_ListCertificate_Call {
	return &MockCertificatesSDK_ListCertificate_Call{Call: _e.mock.On("ListCertificate",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockCertificatesSDK_ListCertificate_Call) Run(run func(ctx context.Context, request operations.ListCertificateRequest, opts ...operations.Option)) *MockCertificatesSDK_ListCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListCertificateRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCertificatesSDK_ListCertificate_Call) Return(listCertificateResponse *operations.ListCertificateResponse, err error) *MockCertificatesSDK_ListCertificate_Call {
	_c.Call.Return(listCertificateResponse, err)
	return _c
}

func (_c *MockCertificatesSDK_ListCertificate_Call) RunAndReturn(run func(ctx context.Context, request operations.ListCertificateRequest, opts ...operations.Option) (*operations.ListCertificateResponse, error)) *MockCertificatesSDK_ListCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertCertificate provides a mock function for the type MockCertificatesSDK
func (_mock *MockCertificatesSDK) UpsertCertificate(ctx context.Context, request operations.UpsertCertificateRequest, opts ...operations.Option) (*operations.UpsertCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertCertificate")
	}

	var r0 *operations.UpsertCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertCertificateRequest, ...operations.Option) (*operations.UpsertCertificateResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertCertificateRequest, ...operations.Option) *operations.UpsertCertificateResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertCertificateRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCertificatesSDK_UpsertCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertCertificate'
type MockCertificatesSDK_UpsertCertificate_Call struct {
	*mock.Call
}

// UpsertCertificate is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockCertificatesSDK_Expecter) UpsertCertificate(ctx interface{}, request interface{}, opts ...interface{}) *MockCertificatesSDK_UpsertCertificate_Call {
	return &MockCertificatesSDK_UpsertCertificate_Call{Call: _e.mock.On("UpsertCertificate",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockCertificatesSDK_UpsertCertificate_Call) Run(run func(ctx context.Context, request operations.UpsertCertificateRequest, opts ...operations.Option)) *MockCertificatesSDK_UpsertCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertCertificateRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCertificatesSDK_UpsertCertificate_Call) Return(upsertCertificateResponse *operations.UpsertCertificateResponse, err error) *MockCertificatesSDK_UpsertCertificate_Call {
	_c.Call.Return(upsertCertificateResponse, err)
	return _c
}

func (_c *MockCertificatesSDK_UpsertCertificate_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertCertificateRequest, opts ...operations.Option) (*operations.UpsertCertificateResponse, error)) *MockCertificatesSDK_UpsertCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConsumersSDK creates a new instance of MockConsumersSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumersSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumersSDK {
	mock := &MockConsumersSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConsumersSDK is an autogenerated mock type for the ConsumersSDK type
type MockConsumersSDK struct {
	mock.Mock
}

type MockConsumersSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumersSDK) EXPECT() *MockConsumersSDK_Expecter {
	return &MockConsumersSDK_Expecter{mock: &_m.Mock}
}

// CreateConsumer provides a mock function for the type MockConsumersSDK
func (_mock *MockConsumersSDK) CreateConsumer(ctx context.Context, controlPlaneID string, consumerInput components.Consumer, opts ...operations.Option) (*operations.CreateConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, consumerInput, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, consumerInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateConsumer")
	}

	var r0 *operations.CreateConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Consumer, ...operations.Option) (*operations.CreateConsumerResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, consumerInput, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Consumer, ...operations.Option) *operations.CreateConsumerResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, consumerInput, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.Consumer, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, consumerInput, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumersSDK_CreateConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConsumer'
type MockConsumersSDK_CreateConsumer_Call struct {
	*mock.Call
}

// CreateConsumer is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - consumerInput
//   - opts
func (_e *MockConsumersSDK_Expecter) CreateConsumer(ctx interface{}, controlPlaneID interface{}, consumerInput interface{}, opts ...interface{}) *MockConsumersSDK_CreateConsumer_Call {
	return &MockConsumersSDK_CreateConsumer_Call{Call: _e.mock.On("CreateConsumer",
		append([]interface{}{ctx, controlPlaneID, consumerInput}, opts...)...)}
}

func (_c *MockConsumersSDK_CreateConsumer_Call) Run(run func(ctx context.Context, controlPlaneID string, consumerInput components.Consumer, opts ...operations.Option)) *MockConsumersSDK_CreateConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(components.Consumer), variadicArgs...)
	})
	return _c
}

func (_c *MockConsumersSDK_CreateConsumer_Call) Return(createConsumerResponse *operations.CreateConsumerResponse, err error) *MockConsumersSDK_CreateConsumer_Call {
	_c.Call.Return(createConsumerResponse, err)
	return _c
}

func (_c *MockConsumersSDK_CreateConsumer_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, consumerInput components.Consumer, opts ...operations.Option) (*operations.CreateConsumerResponse, error)) *MockConsumersSDK_CreateConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteConsumer provides a mock function for the type MockConsumersSDK
func (_mock *MockConsumersSDK) DeleteConsumer(ctx context.Context, controlPlaneID string, consumerID string, opts ...operations.Option) (*operations.DeleteConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, consumerID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, consumerID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteConsumer")
	}

	var r0 *operations.DeleteConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteConsumerResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, consumerID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteConsumerResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, consumerID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, consumerID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumersSDK_DeleteConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConsumer'
type MockConsumersSDK_DeleteConsumer_Call struct {
	*mock.Call
}

// DeleteConsumer is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - consumerID
//   - opts
func (_e *MockConsumersSDK_Expecter) DeleteConsumer(ctx interface{}, controlPlaneID interface{}, consumerID interface{}, opts ...interface{}) *MockConsumersSDK_DeleteConsumer_Call {
	return &MockConsumersSDK_DeleteConsumer_Call{Call: _e.mock.On("DeleteConsumer",
		append([]interface{}{ctx, controlPlaneID, consumerID}, opts...)...)}
}

func (_c *MockConsumersSDK_DeleteConsumer_Call) Run(run func(ctx context.Context, controlPlaneID string, consumerID string, opts ...operations.Option)) *MockConsumersSDK_DeleteConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockConsumersSDK_DeleteConsumer_Call) Return(deleteConsumerResponse *operations.DeleteConsumerResponse, err error) *MockConsumersSDK_DeleteConsumer_Call {
	_c.Call.Return(deleteConsumerResponse, err)
	return _c
}

func (_c *MockConsumersSDK_DeleteConsumer_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, consumerID string, opts ...operations.Option) (*operations.DeleteConsumerResponse, error)) *MockConsumersSDK_DeleteConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// ListConsumer provides a mock function for the type MockConsumersSDK
func (_mock *MockConsumersSDK) ListConsumer(ctx context.Context, request operations.ListConsumerRequest, opts ...operations.Option) (*operations.ListConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListConsumer")
	}

	var r0 *operations.ListConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListConsumerRequest, ...operations.Option) (*operations.ListConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListConsumerRequest, ...operations.Option) *operations.ListConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumersSDK_ListConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConsumer'
type MockConsumersSDK_ListConsumer_Call struct {
	*mock.Call
}

// ListConsumer is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockConsumersSDK_Expecter) ListConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockConsumersSDK_ListConsumer_Call {
	return &MockConsumersSDK_ListConsumer_Call{Call: _e.mock.On("ListConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockConsumersSDK_ListConsumer_Call) Run(run func(ctx context.Context, request operations.ListConsumerRequest, opts ...operations.Option)) *MockConsumersSDK_ListConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockConsumersSDK_ListConsumer_Call) Return(listConsumerResponse *operations.ListConsumerResponse, err error) *MockConsumersSDK_ListConsumer_Call {
	_c.Call.Return(listConsumerResponse, err)
	return _c
}

func (_c *MockConsumersSDK_ListConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.ListConsumerRequest, opts ...operations.Option) (*operations.ListConsumerResponse, error)) *MockConsumersSDK_ListConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertConsumer provides a mock function for the type MockConsumersSDK
func (_mock *MockConsumersSDK) UpsertConsumer(ctx context.Context, upsertConsumerRequest operations.UpsertConsumerRequest, opts ...operations.Option) (*operations.UpsertConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, upsertConsumerRequest, opts)
	} else {
		tmpRet = _mock.Called(ctx, upsertConsumerRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertConsumer")
	}

	var r0 *operations.UpsertConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertConsumerRequest, ...operations.Option) (*operations.UpsertConsumerResponse, error)); ok {
		return returnFunc(ctx, upsertConsumerRequest, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertConsumerRequest, ...operations.Option) *operations.UpsertConsumerResponse); ok {
		r0 = returnFunc(ctx, upsertConsumerRequest, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, upsertConsumerRequest, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumersSDK_UpsertConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertConsumer'
type MockConsumersSDK_UpsertConsumer_Call struct {
	*mock.Call
}

// UpsertConsumer is a helper method to define mock.On call
//   - ctx
//   - upsertConsumerRequest
//   - opts
func (_e *MockConsumersSDK_Expecter) UpsertConsumer(ctx interface{}, upsertConsumerRequest interface{}, opts ...interface{}) *MockConsumersSDK_UpsertConsumer_Call {
	return &MockConsumersSDK_UpsertConsumer_Call{Call: _e.mock.On("UpsertConsumer",
		append([]interface{}{ctx, upsertConsumerRequest}, opts...)...)}
}

func (_c *MockConsumersSDK_UpsertConsumer_Call) Run(run func(ctx context.Context, upsertConsumerRequest operations.UpsertConsumerRequest, opts ...operations.Option)) *MockConsumersSDK_UpsertConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockConsumersSDK_UpsertConsumer_Call) Return(upsertConsumerResponse *operations.UpsertConsumerResponse, err error) *MockConsumersSDK_UpsertConsumer_Call {
	_c.Call.Return(upsertConsumerResponse, err)
	return _c
}

func (_c *MockConsumersSDK_UpsertConsumer_Call) RunAndReturn(run func(ctx context.Context, upsertConsumerRequest operations.UpsertConsumerRequest, opts ...operations.Option) (*operations.UpsertConsumerResponse, error)) *MockConsumersSDK_UpsertConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConsumerGroupSDK creates a new instance of MockConsumerGroupSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumerGroupSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumerGroupSDK {
	mock := &MockConsumerGroupSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConsumerGroupSDK is an autogenerated mock type for the ConsumerGroupSDK type
type MockConsumerGroupSDK struct {
	mock.Mock
}

type MockConsumerGroupSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumerGroupSDK) EXPECT() *MockConsumerGroupSDK_Expecter {
	return &MockConsumerGroupSDK_Expecter{mock: &_m.Mock}
}

// AddConsumerToGroup provides a mock function for the type MockConsumerGroupSDK
func (_mock *MockConsumerGroupSDK) AddConsumerToGroup(ctx context.Context, request operations.AddConsumerToGroupRequest, opts ...operations.Option) (*operations.AddConsumerToGroupResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AddConsumerToGroup")
	}

	var r0 *operations.AddConsumerToGroupResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.AddConsumerToGroupRequest, ...operations.Option) (*operations.AddConsumerToGroupResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.AddConsumerToGroupRequest, ...operations.Option) *operations.AddConsumerToGroupResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.AddConsumerToGroupResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.AddConsumerToGroupRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumerGroupSDK_AddConsumerToGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddConsumerToGroup'
type MockConsumerGroupSDK_AddConsumerToGroup_Call struct {
	*mock.Call
}

// AddConsumerToGroup is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockConsumerGroupSDK_Expecter) AddConsumerToGroup(ctx interface{}, request interface{}, opts ...interface{}) *MockConsumerGroupSDK_AddConsumerToGroup_Call {
	return &MockConsumerGroupSDK_AddConsumerToGroup_Call{Call: _e.mock.On("AddConsumerToGroup",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockConsumerGroupSDK_AddConsumerToGroup_Call) Run(run func(ctx context.Context, request operations.AddConsumerToGroupRequest, opts ...operations.Option)) *MockConsumerGroupSDK_AddConsumerToGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.AddConsumerToGroupRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockConsumerGroupSDK_AddConsumerToGroup_Call) Return(addConsumerToGroupResponse *operations.AddConsumerToGroupResponse, err error) *MockConsumerGroupSDK_AddConsumerToGroup_Call {
	_c.Call.Return(addConsumerToGroupResponse, err)
	return _c
}

func (_c *MockConsumerGroupSDK_AddConsumerToGroup_Call) RunAndReturn(run func(ctx context.Context, request operations.AddConsumerToGroupRequest, opts ...operations.Option) (*operations.AddConsumerToGroupResponse, error)) *MockConsumerGroupSDK_AddConsumerToGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateConsumerGroup provides a mock function for the type MockConsumerGroupSDK
func (_mock *MockConsumerGroupSDK) CreateConsumerGroup(ctx context.Context, controlPlaneID string, consumerInput components.ConsumerGroup, opts ...operations.Option) (*operations.CreateConsumerGroupResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, consumerInput, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, consumerInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateConsumerGroup")
	}

	var r0 *operations.CreateConsumerGroupResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.ConsumerGroup, ...operations.Option) (*operations.CreateConsumerGroupResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, consumerInput, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.ConsumerGroup, ...operations.Option) *operations.CreateConsumerGroupResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, consumerInput, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateConsumerGroupResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.ConsumerGroup, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, consumerInput, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumerGroupSDK_CreateConsumerGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConsumerGroup'
type MockConsumerGroupSDK_CreateConsumerGroup_Call struct {
	*mock.Call
}

// CreateConsumerGroup is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - consumerInput
//   - opts
func (_e *MockConsumerGroupSDK_Expecter) CreateConsumerGroup(ctx interface{}, controlPlaneID interface{}, consumerInput interface{}, opts ...interface{}) *MockConsumerGroupSDK_CreateConsumerGroup_Call {
	return &MockConsumerGroupSDK_CreateConsumerGroup_Call{Call: _e.mock.On("CreateConsumerGroup",
		append([]interface{}{ctx, controlPlaneID, consumerInput}, opts...)...)}
}

func (_c *MockConsumerGroupSDK_CreateConsumerGroup_Call) Run(run func(ctx context.Context, controlPlaneID string, consumerInput components.ConsumerGroup, opts ...operations.Option)) *MockConsumerGroupSDK_CreateConsumerGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(components.ConsumerGroup), variadicArgs...)
	})
	return _c
}

func (_c *MockConsumerGroupSDK_CreateConsumerGroup_Call) Return(createConsumerGroupResponse *operations.CreateConsumerGroupResponse, err error) *MockConsumerGroupSDK_CreateConsumerGroup_Call {
	_c.Call.Return(createConsumerGroupResponse, err)
	return _c
}

func (_c *MockConsumerGroupSDK_CreateConsumerGroup_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, consumerInput components.ConsumerGroup, opts ...operations.Option) (*operations.CreateConsumerGroupResponse, error)) *MockConsumerGroupSDK_CreateConsumerGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteConsumerGroup provides a mock function for the type MockConsumerGroupSDK
func (_mock *MockConsumerGroupSDK) DeleteConsumerGroup(ctx context.Context, controlPlaneID string, consumerID string, opts ...operations.Option) (*operations.DeleteConsumerGroupResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, consumerID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, consumerID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteConsumerGroup")
	}

	var r0 *operations.DeleteConsumerGroupResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteConsumerGroupResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, consumerID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteConsumerGroupResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, consumerID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteConsumerGroupResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, consumerID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumerGroupSDK_DeleteConsumerGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConsumerGroup'
type MockConsumerGroupSDK_DeleteConsumerGroup_Call struct {
	*mock.Call
}

// DeleteConsumerGroup is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - consumerID
//   - opts
func (_e *MockConsumerGroupSDK_Expecter) DeleteConsumerGroup(ctx interface{}, controlPlaneID interface{}, consumerID interface{}, opts ...interface{}) *MockConsumerGroupSDK_DeleteConsumerGroup_Call {
	return &MockConsumerGroupSDK_DeleteConsumerGroup_Call{Call: _e.mock.On("DeleteConsumerGroup",
		append([]interface{}{ctx, controlPlaneID, consumerID}, opts...)...)}
}

func (_c *MockConsumerGroupSDK_DeleteConsumerGroup_Call) Run(run func(ctx context.Context, controlPlaneID string, consumerID string, opts ...operations.Option)) *MockConsumerGroupSDK_DeleteConsumerGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockConsumerGroupSDK_DeleteConsumerGroup_Call) Return(deleteConsumerGroupResponse *operations.DeleteConsumerGroupResponse, err error) *MockConsumerGroupSDK_DeleteConsumerGroup_Call {
	_c.Call.Return(deleteConsumerGroupResponse, err)
	return _c
}

func (_c *MockConsumerGroupSDK_DeleteConsumerGroup_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, consumerID string, opts ...operations.Option) (*operations.DeleteConsumerGroupResponse, error)) *MockConsumerGroupSDK_DeleteConsumerGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ListConsumerGroup provides a mock function for the type MockConsumerGroupSDK
func (_mock *MockConsumerGroupSDK) ListConsumerGroup(ctx context.Context, request operations.ListConsumerGroupRequest, opts ...operations.Option) (*operations.ListConsumerGroupResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListConsumerGroup")
	}

	var r0 *operations.ListConsumerGroupResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListConsumerGroupRequest, ...operations.Option) (*operations.ListConsumerGroupResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListConsumerGroupRequest, ...operations.Option) *operations.ListConsumerGroupResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListConsumerGroupResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListConsumerGroupRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumerGroupSDK_ListConsumerGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConsumerGroup'
type MockConsumerGroupSDK_ListConsumerGroup_Call struct {
	*mock.Call
}

// ListConsumerGroup is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockConsumerGroupSDK_Expecter) ListConsumerGroup(ctx interface{}, request interface{}, opts ...interface{}) *MockConsumerGroupSDK_ListConsumerGroup_Call {
	return &MockConsumerGroupSDK_ListConsumerGroup_Call{Call: _e.mock.On("ListConsumerGroup",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockConsumerGroupSDK_ListConsumerGroup_Call) Run(run func(ctx context.Context, request operations.ListConsumerGroupRequest, opts ...operations.Option)) *MockConsumerGroupSDK_ListConsumerGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListConsumerGroupRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockConsumerGroupSDK_ListConsumerGroup_Call) Return(listConsumerGroupResponse *operations.ListConsumerGroupResponse, err error) *MockConsumerGroupSDK_ListConsumerGroup_Call {
	_c.Call.Return(listConsumerGroupResponse, err)
	return _c
}

func (_c *MockConsumerGroupSDK_ListConsumerGroup_Call) RunAndReturn(run func(ctx context.Context, request operations.ListConsumerGroupRequest, opts ...operations.Option) (*operations.ListConsumerGroupResponse, error)) *MockConsumerGroupSDK_ListConsumerGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ListConsumerGroupsForConsumer provides a mock function for the type MockConsumerGroupSDK
func (_mock *MockConsumerGroupSDK) ListConsumerGroupsForConsumer(ctx context.Context, request operations.ListConsumerGroupsForConsumerRequest, opts ...operations.Option) (*operations.ListConsumerGroupsForConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListConsumerGroupsForConsumer")
	}

	var r0 *operations.ListConsumerGroupsForConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListConsumerGroupsForConsumerRequest, ...operations.Option) (*operations.ListConsumerGroupsForConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListConsumerGroupsForConsumerRequest, ...operations.Option) *operations.ListConsumerGroupsForConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListConsumerGroupsForConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListConsumerGroupsForConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumerGroupSDK_ListConsumerGroupsForConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConsumerGroupsForConsumer'
type MockConsumerGroupSDK_ListConsumerGroupsForConsumer_Call struct {
	*mock.Call
}

// ListConsumerGroupsForConsumer is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockConsumerGroupSDK_Expecter) ListConsumerGroupsForConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockConsumerGroupSDK_ListConsumerGroupsForConsumer_Call {
	return &MockConsumerGroupSDK_ListConsumerGroupsForConsumer_Call{Call: _e.mock.On("ListConsumerGroupsForConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockConsumerGroupSDK_ListConsumerGroupsForConsumer_Call) Run(run func(ctx context.Context, request operations.ListConsumerGroupsForConsumerRequest, opts ...operations.Option)) *MockConsumerGroupSDK_ListConsumerGroupsForConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListConsumerGroupsForConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockConsumerGroupSDK_ListConsumerGroupsForConsumer_Call) Return(listConsumerGroupsForConsumerResponse *operations.ListConsumerGroupsForConsumerResponse, err error) *MockConsumerGroupSDK_ListConsumerGroupsForConsumer_Call {
	_c.Call.Return(listConsumerGroupsForConsumerResponse, err)
	return _c
}

func (_c *MockConsumerGroupSDK_ListConsumerGroupsForConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.ListConsumerGroupsForConsumerRequest, opts ...operations.Option) (*operations.ListConsumerGroupsForConsumerResponse, error)) *MockConsumerGroupSDK_ListConsumerGroupsForConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveConsumerFromGroup provides a mock function for the type MockConsumerGroupSDK
func (_mock *MockConsumerGroupSDK) RemoveConsumerFromGroup(ctx context.Context, request operations.RemoveConsumerFromGroupRequest, opts ...operations.Option) (*operations.RemoveConsumerFromGroupResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemoveConsumerFromGroup")
	}

	var r0 *operations.RemoveConsumerFromGroupResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.RemoveConsumerFromGroupRequest, ...operations.Option) (*operations.RemoveConsumerFromGroupResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.RemoveConsumerFromGroupRequest, ...operations.Option) *operations.RemoveConsumerFromGroupResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.RemoveConsumerFromGroupResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.RemoveConsumerFromGroupRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumerGroupSDK_RemoveConsumerFromGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveConsumerFromGroup'
type MockConsumerGroupSDK_RemoveConsumerFromGroup_Call struct {
	*mock.Call
}

// RemoveConsumerFromGroup is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockConsumerGroupSDK_Expecter) RemoveConsumerFromGroup(ctx interface{}, request interface{}, opts ...interface{}) *MockConsumerGroupSDK_RemoveConsumerFromGroup_Call {
	return &MockConsumerGroupSDK_RemoveConsumerFromGroup_Call{Call: _e.mock.On("RemoveConsumerFromGroup",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockConsumerGroupSDK_RemoveConsumerFromGroup_Call) Run(run func(ctx context.Context, request operations.RemoveConsumerFromGroupRequest, opts ...operations.Option)) *MockConsumerGroupSDK_RemoveConsumerFromGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.RemoveConsumerFromGroupRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockConsumerGroupSDK_RemoveConsumerFromGroup_Call) Return(removeConsumerFromGroupResponse *operations.RemoveConsumerFromGroupResponse, err error) *MockConsumerGroupSDK_RemoveConsumerFromGroup_Call {
	_c.Call.Return(removeConsumerFromGroupResponse, err)
	return _c
}

func (_c *MockConsumerGroupSDK_RemoveConsumerFromGroup_Call) RunAndReturn(run func(ctx context.Context, request operations.RemoveConsumerFromGroupRequest, opts ...operations.Option) (*operations.RemoveConsumerFromGroupResponse, error)) *MockConsumerGroupSDK_RemoveConsumerFromGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertConsumerGroup provides a mock function for the type MockConsumerGroupSDK
func (_mock *MockConsumerGroupSDK) UpsertConsumerGroup(ctx context.Context, upsertConsumerRequest operations.UpsertConsumerGroupRequest, opts ...operations.Option) (*operations.UpsertConsumerGroupResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, upsertConsumerRequest, opts)
	} else {
		tmpRet = _mock.Called(ctx, upsertConsumerRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertConsumerGroup")
	}

	var r0 *operations.UpsertConsumerGroupResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertConsumerGroupRequest, ...operations.Option) (*operations.UpsertConsumerGroupResponse, error)); ok {
		return returnFunc(ctx, upsertConsumerRequest, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertConsumerGroupRequest, ...operations.Option) *operations.UpsertConsumerGroupResponse); ok {
		r0 = returnFunc(ctx, upsertConsumerRequest, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertConsumerGroupResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertConsumerGroupRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, upsertConsumerRequest, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumerGroupSDK_UpsertConsumerGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertConsumerGroup'
type MockConsumerGroupSDK_UpsertConsumerGroup_Call struct {
	*mock.Call
}

// UpsertConsumerGroup is a helper method to define mock.On call
//   - ctx
//   - upsertConsumerRequest
//   - opts
func (_e *MockConsumerGroupSDK_Expecter) UpsertConsumerGroup(ctx interface{}, upsertConsumerRequest interface{}, opts ...interface{}) *MockConsumerGroupSDK_UpsertConsumerGroup_Call {
	return &MockConsumerGroupSDK_UpsertConsumerGroup_Call{Call: _e.mock.On("UpsertConsumerGroup",
		append([]interface{}{ctx, upsertConsumerRequest}, opts...)...)}
}

func (_c *MockConsumerGroupSDK_UpsertConsumerGroup_Call) Run(run func(ctx context.Context, upsertConsumerRequest operations.UpsertConsumerGroupRequest, opts ...operations.Option)) *MockConsumerGroupSDK_UpsertConsumerGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertConsumerGroupRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockConsumerGroupSDK_UpsertConsumerGroup_Call) Return(upsertConsumerGroupResponse *operations.UpsertConsumerGroupResponse, err error) *MockConsumerGroupSDK_UpsertConsumerGroup_Call {
	_c.Call.Return(upsertConsumerGroupResponse, err)
	return _c
}

func (_c *MockConsumerGroupSDK_UpsertConsumerGroup_Call) RunAndReturn(run func(ctx context.Context, upsertConsumerRequest operations.UpsertConsumerGroupRequest, opts ...operations.Option) (*operations.UpsertConsumerGroupResponse, error)) *MockConsumerGroupSDK_UpsertConsumerGroup_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataPlaneClientCertificatesSDK creates a new instance of MockDataPlaneClientCertificatesSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataPlaneClientCertificatesSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataPlaneClientCertificatesSDK {
	mock := &MockDataPlaneClientCertificatesSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDataPlaneClientCertificatesSDK is an autogenerated mock type for the DataPlaneClientCertificatesSDK type
type MockDataPlaneClientCertificatesSDK struct {
	mock.Mock
}

type MockDataPlaneClientCertificatesSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataPlaneClientCertificatesSDK) EXPECT() *MockDataPlaneClientCertificatesSDK_Expecter {
	return &MockDataPlaneClientCertificatesSDK_Expecter{mock: &_m.Mock}
}

// CreateDataplaneCertificate provides a mock function for the type MockDataPlaneClientCertificatesSDK
func (_mock *MockDataPlaneClientCertificatesSDK) CreateDataplaneCertificate(ctx context.Context, cpID string, dpReq *components.DataPlaneClientCertificateRequest, opts ...operations.Option) (*operations.CreateDataplaneCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, cpID, dpReq, opts)
	} else {
		tmpRet = _mock.Called(ctx, cpID, dpReq)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateDataplaneCertificate")
	}

	var r0 *operations.CreateDataplaneCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *components.DataPlaneClientCertificateRequest, ...operations.Option) (*operations.CreateDataplaneCertificateResponse, error)); ok {
		return returnFunc(ctx, cpID, dpReq, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *components.DataPlaneClientCertificateRequest, ...operations.Option) *operations.CreateDataplaneCertificateResponse); ok {
		r0 = returnFunc(ctx, cpID, dpReq, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateDataplaneCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *components.DataPlaneClientCertificateRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, cpID, dpReq, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDataplaneCertificate'
type MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call struct {
	*mock.Call
}

// CreateDataplaneCertificate is a helper method to define mock.On call
//   - ctx
//   - cpID
//   - dpReq
//   - opts
func (_e *MockDataPlaneClientCertificatesSDK_Expecter) CreateDataplaneCertificate(ctx interface{}, cpID interface{}, dpReq interface{}, opts ...interface{}) *MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call {
	return &MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call{Call: _e.mock.On("CreateDataplaneCertificate",
		append([]interface{}{ctx, cpID, dpReq}, opts...)...)}
}

func (_c *MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call) Run(run func(ctx context.Context, cpID string, dpReq *components.DataPlaneClientCertificateRequest, opts ...operations.Option)) *MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*components.DataPlaneClientCertificateRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call) Return(createDataplaneCertificateResponse *operations.CreateDataplaneCertificateResponse, err error) *MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call {
	_c.Call.Return(createDataplaneCertificateResponse, err)
	return _c
}

func (_c *MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call) RunAndReturn(run func(ctx context.Context, cpID string, dpReq *components.DataPlaneClientCertificateRequest, opts ...operations.Option) (*operations.CreateDataplaneCertificateResponse, error)) *MockDataPlaneClientCertificatesSDK_CreateDataplaneCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataplaneCertificate provides a mock function for the type MockDataPlaneClientCertificatesSDK
func (_mock *MockDataPlaneClientCertificatesSDK) DeleteDataplaneCertificate(ctx context.Context, controlPlaneID string, certificateID string, opts ...operations.Option) (*operations.DeleteDataplaneCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, certificateID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, certificateID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataplaneCertificate")
	}

	var r0 *operations.DeleteDataplaneCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteDataplaneCertificateResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, certificateID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteDataplaneCertificateResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, certificateID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteDataplaneCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, certificateID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataplaneCertificate'
type MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call struct {
	*mock.Call
}

// DeleteDataplaneCertificate is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - certificateID
//   - opts
func (_e *MockDataPlaneClientCertificatesSDK_Expecter) DeleteDataplaneCertificate(ctx interface{}, controlPlaneID interface{}, certificateID interface{}, opts ...interface{}) *MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call {
	return &MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call{Call: _e.mock.On("DeleteDataplaneCertificate",
		append([]interface{}{ctx, controlPlaneID, certificateID}, opts...)...)}
}

func (_c *MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call) Run(run func(ctx context.Context, controlPlaneID string, certificateID string, opts ...operations.Option)) *MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call) Return(deleteDataplaneCertificateResponse *operations.DeleteDataplaneCertificateResponse, err error) *MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call {
	_c.Call.Return(deleteDataplaneCertificateResponse, err)
	return _c
}

func (_c *MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, certificateID string, opts ...operations.Option) (*operations.DeleteDataplaneCertificateResponse, error)) *MockDataPlaneClientCertificatesSDK_DeleteDataplaneCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// ListDpClientCertificates provides a mock function for the type MockDataPlaneClientCertificatesSDK
func (_mock *MockDataPlaneClientCertificatesSDK) ListDpClientCertificates(ctx context.Context, controlPlaneID string, opts ...operations.Option) (*operations.ListDpClientCertificatesResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListDpClientCertificates")
	}

	var r0 *operations.ListDpClientCertificatesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...operations.Option) (*operations.ListDpClientCertificatesResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...operations.Option) *operations.ListDpClientCertificatesResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListDpClientCertificatesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDataPlaneClientCertificatesSDK_ListDpClientCertificates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDpClientCertificates'
type MockDataPlaneClientCertificatesSDK_ListDpClientCertificates_Call struct {
	*mock.Call
}

// ListDpClientCertificates is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - opts
func (_e *MockDataPlaneClientCertificatesSDK_Expecter) ListDpClientCertificates(ctx interface{}, controlPlaneID interface{}, opts ...interface{}) *MockDataPlaneClientCertificatesSDK_ListDpClientCertificates_Call {
	return &MockDataPlaneClientCertificatesSDK_ListDpClientCertificates_Call{Call: _e.mock.On("ListDpClientCertificates",
		append([]interface{}{ctx, controlPlaneID}, opts...)...)}
}

func (_c *MockDataPlaneClientCertificatesSDK_ListDpClientCertificates_Call) Run(run func(ctx context.Context, controlPlaneID string, opts ...operations.Option)) *MockDataPlaneClientCertificatesSDK_ListDpClientCertificates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDataPlaneClientCertificatesSDK_ListDpClientCertificates_Call) Return(listDpClientCertificatesResponse *operations.ListDpClientCertificatesResponse, err error) *MockDataPlaneClientCertificatesSDK_ListDpClientCertificates_Call {
	_c.Call.Return(listDpClientCertificatesResponse, err)
	return _c
}

func (_c *MockDataPlaneClientCertificatesSDK_ListDpClientCertificates_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, opts ...operations.Option) (*operations.ListDpClientCertificatesResponse, error)) *MockDataPlaneClientCertificatesSDK_ListDpClientCertificates_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKeysSDK creates a new instance of MockKeysSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeysSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeysSDK {
	mock := &MockKeysSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKeysSDK is an autogenerated mock type for the KeysSDK type
type MockKeysSDK struct {
	mock.Mock
}

type MockKeysSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeysSDK) EXPECT() *MockKeysSDK_Expecter {
	return &MockKeysSDK_Expecter{mock: &_m.Mock}
}

// CreateKey provides a mock function for the type MockKeysSDK
func (_mock *MockKeysSDK) CreateKey(ctx context.Context, controlPlaneID string, Key components.Key, opts ...operations.Option) (*operations.CreateKeyResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, Key, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, Key)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateKey")
	}

	var r0 *operations.CreateKeyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Key, ...operations.Option) (*operations.CreateKeyResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, Key, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Key, ...operations.Option) *operations.CreateKeyResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, Key, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateKeyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.Key, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, Key, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeysSDK_CreateKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateKey'
type MockKeysSDK_CreateKey_Call struct {
	*mock.Call
}

// CreateKey is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - Key
//   - opts
func (_e *MockKeysSDK_Expecter) CreateKey(ctx interface{}, controlPlaneID interface{}, Key interface{}, opts ...interface{}) *MockKeysSDK_CreateKey_Call {
	return &MockKeysSDK_CreateKey_Call{Call: _e.mock.On("CreateKey",
		append([]interface{}{ctx, controlPlaneID, Key}, opts...)...)}
}

func (_c *MockKeysSDK_CreateKey_Call) Run(run func(ctx context.Context, controlPlaneID string, Key components.Key, opts ...operations.Option)) *MockKeysSDK_CreateKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(components.Key), variadicArgs...)
	})
	return _c
}

func (_c *MockKeysSDK_CreateKey_Call) Return(createKeyResponse *operations.CreateKeyResponse, err error) *MockKeysSDK_CreateKey_Call {
	_c.Call.Return(createKeyResponse, err)
	return _c
}

func (_c *MockKeysSDK_CreateKey_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, Key components.Key, opts ...operations.Option) (*operations.CreateKeyResponse, error)) *MockKeysSDK_CreateKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteKey provides a mock function for the type MockKeysSDK
func (_mock *MockKeysSDK) DeleteKey(ctx context.Context, controlPlaneID string, KeyID string, opts ...operations.Option) (*operations.DeleteKeyResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, KeyID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, KeyID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteKey")
	}

	var r0 *operations.DeleteKeyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteKeyResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, KeyID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteKeyResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, KeyID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteKeyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, KeyID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeysSDK_DeleteKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteKey'
type MockKeysSDK_DeleteKey_Call struct {
	*mock.Call
}

// DeleteKey is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - KeyID
//   - opts
func (_e *MockKeysSDK_Expecter) DeleteKey(ctx interface{}, controlPlaneID interface{}, KeyID interface{}, opts ...interface{}) *MockKeysSDK_DeleteKey_Call {
	return &MockKeysSDK_DeleteKey_Call{Call: _e.mock.On("DeleteKey",
		append([]interface{}{ctx, controlPlaneID, KeyID}, opts...)...)}
}

func (_c *MockKeysSDK_DeleteKey_Call) Run(run func(ctx context.Context, controlPlaneID string, KeyID string, opts ...operations.Option)) *MockKeysSDK_DeleteKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockKeysSDK_DeleteKey_Call) Return(deleteKeyResponse *operations.DeleteKeyResponse, err error) *MockKeysSDK_DeleteKey_Call {
	_c.Call.Return(deleteKeyResponse, err)
	return _c
}

func (_c *MockKeysSDK_DeleteKey_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, KeyID string, opts ...operations.Option) (*operations.DeleteKeyResponse, error)) *MockKeysSDK_DeleteKey_Call {
	_c.Call.Return(run)
	return _c
}

// ListKey provides a mock function for the type MockKeysSDK
func (_mock *MockKeysSDK) ListKey(ctx context.Context, request operations.ListKeyRequest, opts ...operations.Option) (*operations.ListKeyResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListKey")
	}

	var r0 *operations.ListKeyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListKeyRequest, ...operations.Option) (*operations.ListKeyResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListKeyRequest, ...operations.Option) *operations.ListKeyResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListKeyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListKeyRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeysSDK_ListKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListKey'
type MockKeysSDK_ListKey_Call struct {
	*mock.Call
}

// ListKey is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockKeysSDK_Expecter) ListKey(ctx interface{}, request interface{}, opts ...interface{}) *MockKeysSDK_ListKey_Call {
	return &MockKeysSDK_ListKey_Call{Call: _e.mock.On("ListKey",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKeysSDK_ListKey_Call) Run(run func(ctx context.Context, request operations.ListKeyRequest, opts ...operations.Option)) *MockKeysSDK_ListKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListKeyRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKeysSDK_ListKey_Call) Return(listKeyResponse *operations.ListKeyResponse, err error) *MockKeysSDK_ListKey_Call {
	_c.Call.Return(listKeyResponse, err)
	return _c
}

func (_c *MockKeysSDK_ListKey_Call) RunAndReturn(run func(ctx context.Context, request operations.ListKeyRequest, opts ...operations.Option) (*operations.ListKeyResponse, error)) *MockKeysSDK_ListKey_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertKey provides a mock function for the type MockKeysSDK
func (_mock *MockKeysSDK) UpsertKey(ctx context.Context, request operations.UpsertKeyRequest, opts ...operations.Option) (*operations.UpsertKeyResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertKey")
	}

	var r0 *operations.UpsertKeyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertKeyRequest, ...operations.Option) (*operations.UpsertKeyResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertKeyRequest, ...operations.Option) *operations.UpsertKeyResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertKeyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertKeyRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeysSDK_UpsertKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertKey'
type MockKeysSDK_UpsertKey_Call struct {
	*mock.Call
}

// UpsertKey is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockKeysSDK_Expecter) UpsertKey(ctx interface{}, request interface{}, opts ...interface{}) *MockKeysSDK_UpsertKey_Call {
	return &MockKeysSDK_UpsertKey_Call{Call: _e.mock.On("UpsertKey",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKeysSDK_UpsertKey_Call) Run(run func(ctx context.Context, request operations.UpsertKeyRequest, opts ...operations.Option)) *MockKeysSDK_UpsertKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertKeyRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKeysSDK_UpsertKey_Call) Return(upsertKeyResponse *operations.UpsertKeyResponse, err error) *MockKeysSDK_UpsertKey_Call {
	_c.Call.Return(upsertKeyResponse, err)
	return _c
}

func (_c *MockKeysSDK_UpsertKey_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertKeyRequest, opts ...operations.Option) (*operations.UpsertKeyResponse, error)) *MockKeysSDK_UpsertKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKeySetsSDK creates a new instance of MockKeySetsSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeySetsSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeySetsSDK {
	mock := &MockKeySetsSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKeySetsSDK is an autogenerated mock type for the KeySetsSDK type
type MockKeySetsSDK struct {
	mock.Mock
}

type MockKeySetsSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeySetsSDK) EXPECT() *MockKeySetsSDK_Expecter {
	return &MockKeySetsSDK_Expecter{mock: &_m.Mock}
}

// CreateKeySet provides a mock function for the type MockKeySetsSDK
func (_mock *MockKeySetsSDK) CreateKeySet(ctx context.Context, controlPlaneID string, keySet components.KeySet, opts ...operations.Option) (*operations.CreateKeySetResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, keySet, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, keySet)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateKeySet")
	}

	var r0 *operations.CreateKeySetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.KeySet, ...operations.Option) (*operations.CreateKeySetResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, keySet, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.KeySet, ...operations.Option) *operations.CreateKeySetResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, keySet, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateKeySetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.KeySet, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, keySet, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeySetsSDK_CreateKeySet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateKeySet'
type MockKeySetsSDK_CreateKeySet_Call struct {
	*mock.Call
}

// CreateKeySet is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - keySet
//   - opts
func (_e *MockKeySetsSDK_Expecter) CreateKeySet(ctx interface{}, controlPlaneID interface{}, keySet interface{}, opts ...interface{}) *MockKeySetsSDK_CreateKeySet_Call {
	return &MockKeySetsSDK_CreateKeySet_Call{Call: _e.mock.On("CreateKeySet",
		append([]interface{}{ctx, controlPlaneID, keySet}, opts...)...)}
}

func (_c *MockKeySetsSDK_CreateKeySet_Call) Run(run func(ctx context.Context, controlPlaneID string, keySet components.KeySet, opts ...operations.Option)) *MockKeySetsSDK_CreateKeySet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(components.KeySet), variadicArgs...)
	})
	return _c
}

func (_c *MockKeySetsSDK_CreateKeySet_Call) Return(createKeySetResponse *operations.CreateKeySetResponse, err error) *MockKeySetsSDK_CreateKeySet_Call {
	_c.Call.Return(createKeySetResponse, err)
	return _c
}

func (_c *MockKeySetsSDK_CreateKeySet_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, keySet components.KeySet, opts ...operations.Option) (*operations.CreateKeySetResponse, error)) *MockKeySetsSDK_CreateKeySet_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteKeySet provides a mock function for the type MockKeySetsSDK
func (_mock *MockKeySetsSDK) DeleteKeySet(ctx context.Context, controlPlaneID string, keySetID string, opts ...operations.Option) (*operations.DeleteKeySetResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, keySetID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, keySetID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteKeySet")
	}

	var r0 *operations.DeleteKeySetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteKeySetResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, keySetID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteKeySetResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, keySetID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteKeySetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, keySetID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeySetsSDK_DeleteKeySet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteKeySet'
type MockKeySetsSDK_DeleteKeySet_Call struct {
	*mock.Call
}

// DeleteKeySet is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - keySetID
//   - opts
func (_e *MockKeySetsSDK_Expecter) DeleteKeySet(ctx interface{}, controlPlaneID interface{}, keySetID interface{}, opts ...interface{}) *MockKeySetsSDK_DeleteKeySet_Call {
	return &MockKeySetsSDK_DeleteKeySet_Call{Call: _e.mock.On("DeleteKeySet",
		append([]interface{}{ctx, controlPlaneID, keySetID}, opts...)...)}
}

func (_c *MockKeySetsSDK_DeleteKeySet_Call) Run(run func(ctx context.Context, controlPlaneID string, keySetID string, opts ...operations.Option)) *MockKeySetsSDK_DeleteKeySet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockKeySetsSDK_DeleteKeySet_Call) Return(deleteKeySetResponse *operations.DeleteKeySetResponse, err error) *MockKeySetsSDK_DeleteKeySet_Call {
	_c.Call.Return(deleteKeySetResponse, err)
	return _c
}

func (_c *MockKeySetsSDK_DeleteKeySet_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, keySetID string, opts ...operations.Option) (*operations.DeleteKeySetResponse, error)) *MockKeySetsSDK_DeleteKeySet_Call {
	_c.Call.Return(run)
	return _c
}

// ListKeySet provides a mock function for the type MockKeySetsSDK
func (_mock *MockKeySetsSDK) ListKeySet(ctx context.Context, request operations.ListKeySetRequest, opts ...operations.Option) (*operations.ListKeySetResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListKeySet")
	}

	var r0 *operations.ListKeySetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListKeySetRequest, ...operations.Option) (*operations.ListKeySetResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListKeySetRequest, ...operations.Option) *operations.ListKeySetResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListKeySetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListKeySetRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeySetsSDK_ListKeySet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListKeySet'
type MockKeySetsSDK_ListKeySet_Call struct {
	*mock.Call
}

// ListKeySet is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockKeySetsSDK_Expecter) ListKeySet(ctx interface{}, request interface{}, opts ...interface{}) *MockKeySetsSDK_ListKeySet_Call {
	return &MockKeySetsSDK_ListKeySet_Call{Call: _e.mock.On("ListKeySet",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKeySetsSDK_ListKeySet_Call) Run(run func(ctx context.Context, request operations.ListKeySetRequest, opts ...operations.Option)) *MockKeySetsSDK_ListKeySet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListKeySetRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKeySetsSDK_ListKeySet_Call) Return(listKeySetResponse *operations.ListKeySetResponse, err error) *MockKeySetsSDK_ListKeySet_Call {
	_c.Call.Return(listKeySetResponse, err)
	return _c
}

func (_c *MockKeySetsSDK_ListKeySet_Call) RunAndReturn(run func(ctx context.Context, request operations.ListKeySetRequest, opts ...operations.Option) (*operations.ListKeySetResponse, error)) *MockKeySetsSDK_ListKeySet_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertKeySet provides a mock function for the type MockKeySetsSDK
func (_mock *MockKeySetsSDK) UpsertKeySet(ctx context.Context, request operations.UpsertKeySetRequest, opts ...operations.Option) (*operations.UpsertKeySetResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertKeySet")
	}

	var r0 *operations.UpsertKeySetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertKeySetRequest, ...operations.Option) (*operations.UpsertKeySetResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertKeySetRequest, ...operations.Option) *operations.UpsertKeySetResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertKeySetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertKeySetRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeySetsSDK_UpsertKeySet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertKeySet'
type MockKeySetsSDK_UpsertKeySet_Call struct {
	*mock.Call
}

// UpsertKeySet is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockKeySetsSDK_Expecter) UpsertKeySet(ctx interface{}, request interface{}, opts ...interface{}) *MockKeySetsSDK_UpsertKeySet_Call {
	return &MockKeySetsSDK_UpsertKeySet_Call{Call: _e.mock.On("UpsertKeySet",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKeySetsSDK_UpsertKeySet_Call) Run(run func(ctx context.Context, request operations.UpsertKeySetRequest, opts ...operations.Option)) *MockKeySetsSDK_UpsertKeySet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertKeySetRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKeySetsSDK_UpsertKeySet_Call) Return(upsertKeySetResponse *operations.UpsertKeySetResponse, err error) *MockKeySetsSDK_UpsertKeySet_Call {
	_c.Call.Return(upsertKeySetResponse, err)
	return _c
}

func (_c *MockKeySetsSDK_UpsertKeySet_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertKeySetRequest, opts ...operations.Option) (*operations.UpsertKeySetResponse, error)) *MockKeySetsSDK_UpsertKeySet_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRoutesSDK creates a new instance of MockRoutesSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRoutesSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRoutesSDK {
	mock := &MockRoutesSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRoutesSDK is an autogenerated mock type for the RoutesSDK type
type MockRoutesSDK struct {
	mock.Mock
}

type MockRoutesSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRoutesSDK) EXPECT() *MockRoutesSDK_Expecter {
	return &MockRoutesSDK_Expecter{mock: &_m.Mock}
}

// CreateRoute provides a mock function for the type MockRoutesSDK
func (_mock *MockRoutesSDK) CreateRoute(ctx context.Context, controlPlaneID string, route components.Route, opts ...operations.Option) (*operations.CreateRouteResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, route, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, route)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateRoute")
	}

	var r0 *operations.CreateRouteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Route, ...operations.Option) (*operations.CreateRouteResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, route, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Route, ...operations.Option) *operations.CreateRouteResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, route, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateRouteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.Route, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, route, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoutesSDK_CreateRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoute'
type MockRoutesSDK_CreateRoute_Call struct {
	*mock.Call
}

// CreateRoute is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - route
//   - opts
func (_e *MockRoutesSDK_Expecter) CreateRoute(ctx interface{}, controlPlaneID interface{}, route interface{}, opts ...interface{}) *MockRoutesSDK_CreateRoute_Call {
	return &MockRoutesSDK_CreateRoute_Call{Call: _e.mock.On("CreateRoute",
		append([]interface{}{ctx, controlPlaneID, route}, opts...)...)}
}

func (_c *MockRoutesSDK_CreateRoute_Call) Run(run func(ctx context.Context, controlPlaneID string, route components.Route, opts ...operations.Option)) *MockRoutesSDK_CreateRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(components.Route), variadicArgs...)
	})
	return _c
}

func (_c *MockRoutesSDK_CreateRoute_Call) Return(createRouteResponse *operations.CreateRouteResponse, err error) *MockRoutesSDK_CreateRoute_Call {
	_c.Call.Return(createRouteResponse, err)
	return _c
}

func (_c *MockRoutesSDK_CreateRoute_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, route components.Route, opts ...operations.Option) (*operations.CreateRouteResponse, error)) *MockRoutesSDK_CreateRoute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRoute provides a mock function for the type MockRoutesSDK
func (_mock *MockRoutesSDK) DeleteRoute(ctx context.Context, controlPlaneID string, routeID string, opts ...operations.Option) (*operations.DeleteRouteResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, routeID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, routeID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoute")
	}

	var r0 *operations.DeleteRouteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteRouteResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, routeID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteRouteResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, routeID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteRouteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, routeID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoutesSDK_DeleteRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoute'
type MockRoutesSDK_DeleteRoute_Call struct {
	*mock.Call
}

// DeleteRoute is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - routeID
//   - opts
func (_e *MockRoutesSDK_Expecter) DeleteRoute(ctx interface{}, controlPlaneID interface{}, routeID interface{}, opts ...interface{}) *MockRoutesSDK_DeleteRoute_Call {
	return &MockRoutesSDK_DeleteRoute_Call{Call: _e.mock.On("DeleteRoute",
		append([]interface{}{ctx, controlPlaneID, routeID}, opts...)...)}
}

func (_c *MockRoutesSDK_DeleteRoute_Call) Run(run func(ctx context.Context, controlPlaneID string, routeID string, opts ...operations.Option)) *MockRoutesSDK_DeleteRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockRoutesSDK_DeleteRoute_Call) Return(deleteRouteResponse *operations.DeleteRouteResponse, err error) *MockRoutesSDK_DeleteRoute_Call {
	_c.Call.Return(deleteRouteResponse, err)
	return _c
}

func (_c *MockRoutesSDK_DeleteRoute_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, routeID string, opts ...operations.Option) (*operations.DeleteRouteResponse, error)) *MockRoutesSDK_DeleteRoute_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoute provides a mock function for the type MockRoutesSDK
func (_mock *MockRoutesSDK) ListRoute(ctx context.Context, request operations.ListRouteRequest, opts ...operations.Option) (*operations.ListRouteResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListRoute")
	}

	var r0 *operations.ListRouteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListRouteRequest, ...operations.Option) (*operations.ListRouteResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListRouteRequest, ...operations.Option) *operations.ListRouteResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListRouteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListRouteRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoutesSDK_ListRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoute'
type MockRoutesSDK_ListRoute_Call struct {
	*mock.Call
}

// ListRoute is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockRoutesSDK_Expecter) ListRoute(ctx interface{}, request interface{}, opts ...interface{}) *MockRoutesSDK_ListRoute_Call {
	return &MockRoutesSDK_ListRoute_Call{Call: _e.mock.On("ListRoute",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockRoutesSDK_ListRoute_Call) Run(run func(ctx context.Context, request operations.ListRouteRequest, opts ...operations.Option)) *MockRoutesSDK_ListRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListRouteRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRoutesSDK_ListRoute_Call) Return(listRouteResponse *operations.ListRouteResponse, err error) *MockRoutesSDK_ListRoute_Call {
	_c.Call.Return(listRouteResponse, err)
	return _c
}

func (_c *MockRoutesSDK_ListRoute_Call) RunAndReturn(run func(ctx context.Context, request operations.ListRouteRequest, opts ...operations.Option) (*operations.ListRouteResponse, error)) *MockRoutesSDK_ListRoute_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertRoute provides a mock function for the type MockRoutesSDK
func (_mock *MockRoutesSDK) UpsertRoute(ctx context.Context, req operations.UpsertRouteRequest, opts ...operations.Option) (*operations.UpsertRouteResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertRoute")
	}

	var r0 *operations.UpsertRouteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertRouteRequest, ...operations.Option) (*operations.UpsertRouteResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertRouteRequest, ...operations.Option) *operations.UpsertRouteResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertRouteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertRouteRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoutesSDK_UpsertRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertRoute'
type MockRoutesSDK_UpsertRoute_Call struct {
	*mock.Call
}

// UpsertRoute is a helper method to define mock.On call
//   - ctx
//   - req
//   - opts
func (_e *MockRoutesSDK_Expecter) UpsertRoute(ctx interface{}, req interface{}, opts ...interface{}) *MockRoutesSDK_UpsertRoute_Call {
	return &MockRoutesSDK_UpsertRoute_Call{Call: _e.mock.On("UpsertRoute",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockRoutesSDK_UpsertRoute_Call) Run(run func(ctx context.Context, req operations.UpsertRouteRequest, opts ...operations.Option)) *MockRoutesSDK_UpsertRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertRouteRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRoutesSDK_UpsertRoute_Call) Return(upsertRouteResponse *operations.UpsertRouteResponse, err error) *MockRoutesSDK_UpsertRoute_Call {
	_c.Call.Return(upsertRouteResponse, err)
	return _c
}

func (_c *MockRoutesSDK_UpsertRoute_Call) RunAndReturn(run func(ctx context.Context, req operations.UpsertRouteRequest, opts ...operations.Option) (*operations.UpsertRouteResponse, error)) *MockRoutesSDK_UpsertRoute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServicesSDK creates a new instance of MockServicesSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServicesSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServicesSDK {
	mock := &MockServicesSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServicesSDK is an autogenerated mock type for the ServicesSDK type
type MockServicesSDK struct {
	mock.Mock
}

type MockServicesSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServicesSDK) EXPECT() *MockServicesSDK_Expecter {
	return &MockServicesSDK_Expecter{mock: &_m.Mock}
}

// CreateService provides a mock function for the type MockServicesSDK
func (_mock *MockServicesSDK) CreateService(ctx context.Context, controlPlaneID string, service components.Service, opts ...operations.Option) (*operations.CreateServiceResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, service, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, service)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *operations.CreateServiceResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Service, ...operations.Option) (*operations.CreateServiceResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, service, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Service, ...operations.Option) *operations.CreateServiceResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, service, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateServiceResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.Service, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, service, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicesSDK_CreateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateService'
type MockServicesSDK_CreateService_Call struct {
	*mock.Call
}

// CreateService is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - service
//   - opts
func (_e *MockServicesSDK_Expecter) CreateService(ctx interface{}, controlPlaneID interface{}, service interface{}, opts ...interface{}) *MockServicesSDK_CreateService_Call {
	return &MockServicesSDK_CreateService_Call{Call: _e.mock.On("CreateService",
		append([]interface{}{ctx, controlPlaneID, service}, opts...)...)}
}

func (_c *MockServicesSDK_CreateService_Call) Run(run func(ctx context.Context, controlPlaneID string, service components.Service, opts ...operations.Option)) *MockServicesSDK_CreateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(components.Service), variadicArgs...)
	})
	return _c
}

func (_c *MockServicesSDK_CreateService_Call) Return(createServiceResponse *operations.CreateServiceResponse, err error) *MockServicesSDK_CreateService_Call {
	_c.Call.Return(createServiceResponse, err)
	return _c
}

func (_c *MockServicesSDK_CreateService_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, service components.Service, opts ...operations.Option) (*operations.CreateServiceResponse, error)) *MockServicesSDK_CreateService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteService provides a mock function for the type MockServicesSDK
func (_mock *MockServicesSDK) DeleteService(ctx context.Context, controlPlaneID string, serviceID string, opts ...operations.Option) (*operations.DeleteServiceResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, serviceID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, serviceID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 *operations.DeleteServiceResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteServiceResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, serviceID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteServiceResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, serviceID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteServiceResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, serviceID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicesSDK_DeleteService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteService'
type MockServicesSDK_DeleteService_Call struct {
	*mock.Call
}

// DeleteService is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - serviceID
//   - opts
func (_e *MockServicesSDK_Expecter) DeleteService(ctx interface{}, controlPlaneID interface{}, serviceID interface{}, opts ...interface{}) *MockServicesSDK_DeleteService_Call {
	return &MockServicesSDK_DeleteService_Call{Call: _e.mock.On("DeleteService",
		append([]interface{}{ctx, controlPlaneID, serviceID}, opts...)...)}
}

func (_c *MockServicesSDK_DeleteService_Call) Run(run func(ctx context.Context, controlPlaneID string, serviceID string, opts ...operations.Option)) *MockServicesSDK_DeleteService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockServicesSDK_DeleteService_Call) Return(deleteServiceResponse *operations.DeleteServiceResponse, err error) *MockServicesSDK_DeleteService_Call {
	_c.Call.Return(deleteServiceResponse, err)
	return _c
}

func (_c *MockServicesSDK_DeleteService_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, serviceID string, opts ...operations.Option) (*operations.DeleteServiceResponse, error)) *MockServicesSDK_DeleteService_Call {
	_c.Call.Return(run)
	return _c
}

// ListService provides a mock function for the type MockServicesSDK
func (_mock *MockServicesSDK) ListService(ctx context.Context, request operations.ListServiceRequest, opts ...operations.Option) (*operations.ListServiceResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListService")
	}

	var r0 *operations.ListServiceResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListServiceRequest, ...operations.Option) (*operations.ListServiceResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListServiceRequest, ...operations.Option) *operations.ListServiceResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListServiceResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListServiceRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicesSDK_ListService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListService'
type MockServicesSDK_ListService_Call struct {
	*mock.Call
}

// ListService is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockServicesSDK_Expecter) ListService(ctx interface{}, request interface{}, opts ...interface{}) *MockServicesSDK_ListService_Call {
	return &MockServicesSDK_ListService_Call{Call: _e.mock.On("ListService",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockServicesSDK_ListService_Call) Run(run func(ctx context.Context, request operations.ListServiceRequest, opts ...operations.Option)) *MockServicesSDK_ListService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListServiceRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockServicesSDK_ListService_Call) Return(listServiceResponse *operations.ListServiceResponse, err error) *MockServicesSDK_ListService_Call {
	_c.Call.Return(listServiceResponse, err)
	return _c
}

func (_c *MockServicesSDK_ListService_Call) RunAndReturn(run func(ctx context.Context, request operations.ListServiceRequest, opts ...operations.Option) (*operations.ListServiceResponse, error)) *MockServicesSDK_ListService_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertService provides a mock function for the type MockServicesSDK
func (_mock *MockServicesSDK) UpsertService(ctx context.Context, req operations.UpsertServiceRequest, opts ...operations.Option) (*operations.UpsertServiceResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertService")
	}

	var r0 *operations.UpsertServiceResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertServiceRequest, ...operations.Option) (*operations.UpsertServiceResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertServiceRequest, ...operations.Option) *operations.UpsertServiceResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertServiceResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertServiceRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicesSDK_UpsertService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertService'
type MockServicesSDK_UpsertService_Call struct {
	*mock.Call
}

// UpsertService is a helper method to define mock.On call
//   - ctx
//   - req
//   - opts
func (_e *MockServicesSDK_Expecter) UpsertService(ctx interface{}, req interface{}, opts ...interface{}) *MockServicesSDK_UpsertService_Call {
	return &MockServicesSDK_UpsertService_Call{Call: _e.mock.On("UpsertService",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockServicesSDK_UpsertService_Call) Run(run func(ctx context.Context, req operations.UpsertServiceRequest, opts ...operations.Option)) *MockServicesSDK_UpsertService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertServiceRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockServicesSDK_UpsertService_Call) Return(upsertServiceResponse *operations.UpsertServiceResponse, err error) *MockServicesSDK_UpsertService_Call {
	_c.Call.Return(upsertServiceResponse, err)
	return _c
}

func (_c *MockServicesSDK_UpsertService_Call) RunAndReturn(run func(ctx context.Context, req operations.UpsertServiceRequest, opts ...operations.Option) (*operations.UpsertServiceResponse, error)) *MockServicesSDK_UpsertService_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSNIsSDK creates a new instance of MockSNIsSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSNIsSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSNIsSDK {
	mock := &MockSNIsSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSNIsSDK is an autogenerated mock type for the SNIsSDK type
type MockSNIsSDK struct {
	mock.Mock
}

type MockSNIsSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSNIsSDK) EXPECT() *MockSNIsSDK_Expecter {
	return &MockSNIsSDK_Expecter{mock: &_m.Mock}
}

// CreateSniWithCertificate provides a mock function for the type MockSNIsSDK
func (_mock *MockSNIsSDK) CreateSniWithCertificate(context1 context.Context, createSniWithCertificateRequest operations.CreateSniWithCertificateRequest, options ...operations.Option) (*operations.CreateSniWithCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(context1, createSniWithCertificateRequest, options)
	} else {
		tmpRet = _mock.Called(context1, createSniWithCertificateRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateSniWithCertificate")
	}

	var r0 *operations.CreateSniWithCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateSniWithCertificateRequest, ...operations.Option) (*operations.CreateSniWithCertificateResponse, error)); ok {
		return returnFunc(context1, createSniWithCertificateRequest, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateSniWithCertificateRequest, ...operations.Option) *operations.CreateSniWithCertificateResponse); ok {
		r0 = returnFunc(context1, createSniWithCertificateRequest, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateSniWithCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.CreateSniWithCertificateRequest, ...operations.Option) error); ok {
		r1 = returnFunc(context1, createSniWithCertificateRequest, options...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSNIsSDK_CreateSniWithCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSniWithCertificate'
type MockSNIsSDK_CreateSniWithCertificate_Call struct {
	*mock.Call
}

// CreateSniWithCertificate is a helper method to define mock.On call
//   - context1
//   - createSniWithCertificateRequest
//   - options
func (_e *MockSNIsSDK_Expecter) CreateSniWithCertificate(context1 interface{}, createSniWithCertificateRequest interface{}, options ...interface{}) *MockSNIsSDK_CreateSniWithCertificate_Call {
	return &MockSNIsSDK_CreateSniWithCertificate_Call{Call: _e.mock.On("CreateSniWithCertificate",
		append([]interface{}{context1, createSniWithCertificateRequest}, options...)...)}
}

func (_c *MockSNIsSDK_CreateSniWithCertificate_Call) Run(run func(context1 context.Context, createSniWithCertificateRequest operations.CreateSniWithCertificateRequest, options ...operations.Option)) *MockSNIsSDK_CreateSniWithCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.CreateSniWithCertificateRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockSNIsSDK_CreateSniWithCertificate_Call) Return(createSniWithCertificateResponse *operations.CreateSniWithCertificateResponse, err error) *MockSNIsSDK_CreateSniWithCertificate_Call {
	_c.Call.Return(createSniWithCertificateResponse, err)
	return _c
}

func (_c *MockSNIsSDK_CreateSniWithCertificate_Call) RunAndReturn(run func(context1 context.Context, createSniWithCertificateRequest operations.CreateSniWithCertificateRequest, options ...operations.Option) (*operations.CreateSniWithCertificateResponse, error)) *MockSNIsSDK_CreateSniWithCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSniWithCertificate provides a mock function for the type MockSNIsSDK
func (_mock *MockSNIsSDK) DeleteSniWithCertificate(ctx context.Context, request operations.DeleteSniWithCertificateRequest, opts ...operations.Option) (*operations.DeleteSniWithCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteSniWithCertificate")
	}

	var r0 *operations.DeleteSniWithCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteSniWithCertificateRequest, ...operations.Option) (*operations.DeleteSniWithCertificateResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteSniWithCertificateRequest, ...operations.Option) *operations.DeleteSniWithCertificateResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteSniWithCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.DeleteSniWithCertificateRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSNIsSDK_DeleteSniWithCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSniWithCertificate'
type MockSNIsSDK_DeleteSniWithCertificate_Call struct {
	*mock.Call
}

// DeleteSniWithCertificate is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockSNIsSDK_Expecter) DeleteSniWithCertificate(ctx interface{}, request interface{}, opts ...interface{}) *MockSNIsSDK_DeleteSniWithCertificate_Call {
	return &MockSNIsSDK_DeleteSniWithCertificate_Call{Call: _e.mock.On("DeleteSniWithCertificate",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockSNIsSDK_DeleteSniWithCertificate_Call) Run(run func(ctx context.Context, request operations.DeleteSniWithCertificateRequest, opts ...operations.Option)) *MockSNIsSDK_DeleteSniWithCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.DeleteSniWithCertificateRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockSNIsSDK_DeleteSniWithCertificate_Call) Return(deleteSniWithCertificateResponse *operations.DeleteSniWithCertificateResponse, err error) *MockSNIsSDK_DeleteSniWithCertificate_Call {
	_c.Call.Return(deleteSniWithCertificateResponse, err)
	return _c
}

func (_c *MockSNIsSDK_DeleteSniWithCertificate_Call) RunAndReturn(run func(ctx context.Context, request operations.DeleteSniWithCertificateRequest, opts ...operations.Option) (*operations.DeleteSniWithCertificateResponse, error)) *MockSNIsSDK_DeleteSniWithCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// ListSni provides a mock function for the type MockSNIsSDK
func (_mock *MockSNIsSDK) ListSni(ctx context.Context, request operations.ListSniRequest, opts ...operations.Option) (*operations.ListSniResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListSni")
	}

	var r0 *operations.ListSniResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListSniRequest, ...operations.Option) (*operations.ListSniResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListSniRequest, ...operations.Option) *operations.ListSniResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListSniResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListSniRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSNIsSDK_ListSni_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSni'
type MockSNIsSDK_ListSni_Call struct {
	*mock.Call
}

// ListSni is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockSNIsSDK_Expecter) ListSni(ctx interface{}, request interface{}, opts ...interface{}) *MockSNIsSDK_ListSni_Call {
	return &MockSNIsSDK_ListSni_Call{Call: _e.mock.On("ListSni",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockSNIsSDK_ListSni_Call) Run(run func(ctx context.Context, request operations.ListSniRequest, opts ...operations.Option)) *MockSNIsSDK_ListSni_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListSniRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockSNIsSDK_ListSni_Call) Return(listSniResponse *operations.ListSniResponse, err error) *MockSNIsSDK_ListSni_Call {
	_c.Call.Return(listSniResponse, err)
	return _c
}

func (_c *MockSNIsSDK_ListSni_Call) RunAndReturn(run func(ctx context.Context, request operations.ListSniRequest, opts ...operations.Option) (*operations.ListSniResponse, error)) *MockSNIsSDK_ListSni_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertSniWithCertificate provides a mock function for the type MockSNIsSDK
func (_mock *MockSNIsSDK) UpsertSniWithCertificate(ctx context.Context, request operations.UpsertSniWithCertificateRequest, opts ...operations.Option) (*operations.UpsertSniWithCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertSniWithCertificate")
	}

	var r0 *operations.UpsertSniWithCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertSniWithCertificateRequest, ...operations.Option) (*operations.UpsertSniWithCertificateResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertSniWithCertificateRequest, ...operations.Option) *operations.UpsertSniWithCertificateResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertSniWithCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertSniWithCertificateRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSNIsSDK_UpsertSniWithCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertSniWithCertificate'
type MockSNIsSDK_UpsertSniWithCertificate_Call struct {
	*mock.Call
}

// UpsertSniWithCertificate is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockSNIsSDK_Expecter) UpsertSniWithCertificate(ctx interface{}, request interface{}, opts ...interface{}) *MockSNIsSDK_UpsertSniWithCertificate_Call {
	return &MockSNIsSDK_UpsertSniWithCertificate_Call{Call: _e.mock.On("UpsertSniWithCertificate",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockSNIsSDK_UpsertSniWithCertificate_Call) Run(run func(ctx context.Context, request operations.UpsertSniWithCertificateRequest, opts ...operations.Option)) *MockSNIsSDK_UpsertSniWithCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertSniWithCertificateRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockSNIsSDK_UpsertSniWithCertificate_Call) Return(upsertSniWithCertificateResponse *operations.UpsertSniWithCertificateResponse, err error) *MockSNIsSDK_UpsertSniWithCertificate_Call {
	_c.Call.Return(upsertSniWithCertificateResponse, err)
	return _c
}

func (_c *MockSNIsSDK_UpsertSniWithCertificate_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertSniWithCertificateRequest, opts ...operations.Option) (*operations.UpsertSniWithCertificateResponse, error)) *MockSNIsSDK_UpsertSniWithCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTargetsSDK creates a new instance of MockTargetsSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTargetsSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTargetsSDK {
	mock := &MockTargetsSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTargetsSDK is an autogenerated mock type for the TargetsSDK type
type MockTargetsSDK struct {
	mock.Mock
}

type MockTargetsSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTargetsSDK) EXPECT() *MockTargetsSDK_Expecter {
	return &MockTargetsSDK_Expecter{mock: &_m.Mock}
}

// CreateTargetWithUpstream provides a mock function for the type MockTargetsSDK
func (_mock *MockTargetsSDK) CreateTargetWithUpstream(ctx context.Context, req operations.CreateTargetWithUpstreamRequest, opts ...operations.Option) (*operations.CreateTargetWithUpstreamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateTargetWithUpstream")
	}

	var r0 *operations.CreateTargetWithUpstreamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateTargetWithUpstreamRequest, ...operations.Option) (*operations.CreateTargetWithUpstreamResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateTargetWithUpstreamRequest, ...operations.Option) *operations.CreateTargetWithUpstreamResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateTargetWithUpstreamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.CreateTargetWithUpstreamRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTargetsSDK_CreateTargetWithUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTargetWithUpstream'
type MockTargetsSDK_CreateTargetWithUpstream_Call struct {
	*mock.Call
}

// CreateTargetWithUpstream is a helper method to define mock.On call
//   - ctx
//   - req
//   - opts
func (_e *MockTargetsSDK_Expecter) CreateTargetWithUpstream(ctx interface{}, req interface{}, opts ...interface{}) *MockTargetsSDK_CreateTargetWithUpstream_Call {
	return &MockTargetsSDK_CreateTargetWithUpstream_Call{Call: _e.mock.On("CreateTargetWithUpstream",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockTargetsSDK_CreateTargetWithUpstream_Call) Run(run func(ctx context.Context, req operations.CreateTargetWithUpstreamRequest, opts ...operations.Option)) *MockTargetsSDK_CreateTargetWithUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.CreateTargetWithUpstreamRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTargetsSDK_CreateTargetWithUpstream_Call) Return(createTargetWithUpstreamResponse *operations.CreateTargetWithUpstreamResponse, err error) *MockTargetsSDK_CreateTargetWithUpstream_Call {
	_c.Call.Return(createTargetWithUpstreamResponse, err)
	return _c
}

func (_c *MockTargetsSDK_CreateTargetWithUpstream_Call) RunAndReturn(run func(ctx context.Context, req operations.CreateTargetWithUpstreamRequest, opts ...operations.Option) (*operations.CreateTargetWithUpstreamResponse, error)) *MockTargetsSDK_CreateTargetWithUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTargetWithUpstream provides a mock function for the type MockTargetsSDK
func (_mock *MockTargetsSDK) DeleteTargetWithUpstream(ctx context.Context, req operations.DeleteTargetWithUpstreamRequest, opts ...operations.Option) (*operations.DeleteTargetWithUpstreamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteTargetWithUpstream")
	}

	var r0 *operations.DeleteTargetWithUpstreamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteTargetWithUpstreamRequest, ...operations.Option) (*operations.DeleteTargetWithUpstreamResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteTargetWithUpstreamRequest, ...operations.Option) *operations.DeleteTargetWithUpstreamResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteTargetWithUpstreamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.DeleteTargetWithUpstreamRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTargetsSDK_DeleteTargetWithUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTargetWithUpstream'
type MockTargetsSDK_DeleteTargetWithUpstream_Call struct {
	*mock.Call
}

// DeleteTargetWithUpstream is a helper method to define mock.On call
//   - ctx
//   - req
//   - opts
func (_e *MockTargetsSDK_Expecter) DeleteTargetWithUpstream(ctx interface{}, req interface{}, opts ...interface{}) *MockTargetsSDK_DeleteTargetWithUpstream_Call {
	return &MockTargetsSDK_DeleteTargetWithUpstream_Call{Call: _e.mock.On("DeleteTargetWithUpstream",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockTargetsSDK_DeleteTargetWithUpstream_Call) Run(run func(ctx context.Context, req operations.DeleteTargetWithUpstreamRequest, opts ...operations.Option)) *MockTargetsSDK_DeleteTargetWithUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.DeleteTargetWithUpstreamRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTargetsSDK_DeleteTargetWithUpstream_Call) Return(deleteTargetWithUpstreamResponse *operations.DeleteTargetWithUpstreamResponse, err error) *MockTargetsSDK_DeleteTargetWithUpstream_Call {
	_c.Call.Return(deleteTargetWithUpstreamResponse, err)
	return _c
}

func (_c *MockTargetsSDK_DeleteTargetWithUpstream_Call) RunAndReturn(run func(ctx context.Context, req operations.DeleteTargetWithUpstreamRequest, opts ...operations.Option) (*operations.DeleteTargetWithUpstreamResponse, error)) *MockTargetsSDK_DeleteTargetWithUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// ListTargetWithUpstream provides a mock function for the type MockTargetsSDK
func (_mock *MockTargetsSDK) ListTargetWithUpstream(ctx context.Context, request operations.ListTargetWithUpstreamRequest, opts ...operations.Option) (*operations.ListTargetWithUpstreamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListTargetWithUpstream")
	}

	var r0 *operations.ListTargetWithUpstreamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListTargetWithUpstreamRequest, ...operations.Option) (*operations.ListTargetWithUpstreamResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListTargetWithUpstreamRequest, ...operations.Option) *operations.ListTargetWithUpstreamResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListTargetWithUpstreamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListTargetWithUpstreamRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTargetsSDK_ListTargetWithUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTargetWithUpstream'
type MockTargetsSDK_ListTargetWithUpstream_Call struct {
	*mock.Call
}

// ListTargetWithUpstream is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockTargetsSDK_Expecter) ListTargetWithUpstream(ctx interface{}, request interface{}, opts ...interface{}) *MockTargetsSDK_ListTargetWithUpstream_Call {
	return &MockTargetsSDK_ListTargetWithUpstream_Call{Call: _e.mock.On("ListTargetWithUpstream",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockTargetsSDK_ListTargetWithUpstream_Call) Run(run func(ctx context.Context, request operations.ListTargetWithUpstreamRequest, opts ...operations.Option)) *MockTargetsSDK_ListTargetWithUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListTargetWithUpstreamRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTargetsSDK_ListTargetWithUpstream_Call) Return(listTargetWithUpstreamResponse *operations.ListTargetWithUpstreamResponse, err error) *MockTargetsSDK_ListTargetWithUpstream_Call {
	_c.Call.Return(listTargetWithUpstreamResponse, err)
	return _c
}

func (_c *MockTargetsSDK_ListTargetWithUpstream_Call) RunAndReturn(run func(ctx context.Context, request operations.ListTargetWithUpstreamRequest, opts ...operations.Option) (*operations.ListTargetWithUpstreamResponse, error)) *MockTargetsSDK_ListTargetWithUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertTargetWithUpstream provides a mock function for the type MockTargetsSDK
func (_mock *MockTargetsSDK) UpsertTargetWithUpstream(ctx context.Context, req operations.UpsertTargetWithUpstreamRequest, opts ...operations.Option) (*operations.UpsertTargetWithUpstreamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertTargetWithUpstream")
	}

	var r0 *operations.UpsertTargetWithUpstreamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertTargetWithUpstreamRequest, ...operations.Option) (*operations.UpsertTargetWithUpstreamResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertTargetWithUpstreamRequest, ...operations.Option) *operations.UpsertTargetWithUpstreamResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertTargetWithUpstreamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertTargetWithUpstreamRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTargetsSDK_UpsertTargetWithUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertTargetWithUpstream'
type MockTargetsSDK_UpsertTargetWithUpstream_Call struct {
	*mock.Call
}

// UpsertTargetWithUpstream is a helper method to define mock.On call
//   - ctx
//   - req
//   - opts
func (_e *MockTargetsSDK_Expecter) UpsertTargetWithUpstream(ctx interface{}, req interface{}, opts ...interface{}) *MockTargetsSDK_UpsertTargetWithUpstream_Call {
	return &MockTargetsSDK_UpsertTargetWithUpstream_Call{Call: _e.mock.On("UpsertTargetWithUpstream",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockTargetsSDK_UpsertTargetWithUpstream_Call) Run(run func(ctx context.Context, req operations.UpsertTargetWithUpstreamRequest, opts ...operations.Option)) *MockTargetsSDK_UpsertTargetWithUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertTargetWithUpstreamRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTargetsSDK_UpsertTargetWithUpstream_Call) Return(upsertTargetWithUpstreamResponse *operations.UpsertTargetWithUpstreamResponse, err error) *MockTargetsSDK_UpsertTargetWithUpstream_Call {
	_c.Call.Return(upsertTargetWithUpstreamResponse, err)
	return _c
}

func (_c *MockTargetsSDK_UpsertTargetWithUpstream_Call) RunAndReturn(run func(ctx context.Context, req operations.UpsertTargetWithUpstreamRequest, opts ...operations.Option) (*operations.UpsertTargetWithUpstreamResponse, error)) *MockTargetsSDK_UpsertTargetWithUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpstreamsSDK creates a new instance of MockUpstreamsSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpstreamsSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpstreamsSDK {
	mock := &MockUpstreamsSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUpstreamsSDK is an autogenerated mock type for the UpstreamsSDK type
type MockUpstreamsSDK struct {
	mock.Mock
}

type MockUpstreamsSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpstreamsSDK) EXPECT() *MockUpstreamsSDK_Expecter {
	return &MockUpstreamsSDK_Expecter{mock: &_m.Mock}
}

// CreateUpstream provides a mock function for the type MockUpstreamsSDK
func (_mock *MockUpstreamsSDK) CreateUpstream(ctx context.Context, controlPlaneID string, upstream components.Upstream, opts ...operations.Option) (*operations.CreateUpstreamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, upstream, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, upstream)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateUpstream")
	}

	var r0 *operations.CreateUpstreamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Upstream, ...operations.Option) (*operations.CreateUpstreamResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, upstream, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Upstream, ...operations.Option) *operations.CreateUpstreamResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, upstream, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateUpstreamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.Upstream, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, upstream, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpstreamsSDK_CreateUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUpstream'
type MockUpstreamsSDK_CreateUpstream_Call struct {
	*mock.Call
}

// CreateUpstream is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - upstream
//   - opts
func (_e *MockUpstreamsSDK_Expecter) CreateUpstream(ctx interface{}, controlPlaneID interface{}, upstream interface{}, opts ...interface{}) *MockUpstreamsSDK_CreateUpstream_Call {
	return &MockUpstreamsSDK_CreateUpstream_Call{Call: _e.mock.On("CreateUpstream",
		append([]interface{}{ctx, controlPlaneID, upstream}, opts...)...)}
}

func (_c *MockUpstreamsSDK_CreateUpstream_Call) Run(run func(ctx context.Context, controlPlaneID string, upstream components.Upstream, opts ...operations.Option)) *MockUpstreamsSDK_CreateUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(components.Upstream), variadicArgs...)
	})
	return _c
}

func (_c *MockUpstreamsSDK_CreateUpstream_Call) Return(createUpstreamResponse *operations.CreateUpstreamResponse, err error) *MockUpstreamsSDK_CreateUpstream_Call {
	_c.Call.Return(createUpstreamResponse, err)
	return _c
}

func (_c *MockUpstreamsSDK_CreateUpstream_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, upstream components.Upstream, opts ...operations.Option) (*operations.CreateUpstreamResponse, error)) *MockUpstreamsSDK_CreateUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUpstream provides a mock function for the type MockUpstreamsSDK
func (_mock *MockUpstreamsSDK) DeleteUpstream(ctx context.Context, controlPlaneID string, upstreamID string, opts ...operations.Option) (*operations.DeleteUpstreamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, upstreamID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, upstreamID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteUpstream")
	}

	var r0 *operations.DeleteUpstreamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteUpstreamResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, upstreamID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteUpstreamResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, upstreamID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteUpstreamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, upstreamID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpstreamsSDK_DeleteUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUpstream'
type MockUpstreamsSDK_DeleteUpstream_Call struct {
	*mock.Call
}

// DeleteUpstream is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - upstreamID
//   - opts
func (_e *MockUpstreamsSDK_Expecter) DeleteUpstream(ctx interface{}, controlPlaneID interface{}, upstreamID interface{}, opts ...interface{}) *MockUpstreamsSDK_DeleteUpstream_Call {
	return &MockUpstreamsSDK_DeleteUpstream_Call{Call: _e.mock.On("DeleteUpstream",
		append([]interface{}{ctx, controlPlaneID, upstreamID}, opts...)...)}
}

func (_c *MockUpstreamsSDK_DeleteUpstream_Call) Run(run func(ctx context.Context, controlPlaneID string, upstreamID string, opts ...operations.Option)) *MockUpstreamsSDK_DeleteUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUpstreamsSDK_DeleteUpstream_Call) Return(deleteUpstreamResponse *operations.DeleteUpstreamResponse, err error) *MockUpstreamsSDK_DeleteUpstream_Call {
	_c.Call.Return(deleteUpstreamResponse, err)
	return _c
}

func (_c *MockUpstreamsSDK_DeleteUpstream_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, upstreamID string, opts ...operations.Option) (*operations.DeleteUpstreamResponse, error)) *MockUpstreamsSDK_DeleteUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// ListUpstream provides a mock function for the type MockUpstreamsSDK
func (_mock *MockUpstreamsSDK) ListUpstream(ctx context.Context, request operations.ListUpstreamRequest, opts ...operations.Option) (*operations.ListUpstreamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListUpstream")
	}

	var r0 *operations.ListUpstreamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListUpstreamRequest, ...operations.Option) (*operations.ListUpstreamResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListUpstreamRequest, ...operations.Option) *operations.ListUpstreamResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListUpstreamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListUpstreamRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpstreamsSDK_ListUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUpstream'
type MockUpstreamsSDK_ListUpstream_Call struct {
	*mock.Call
}

// ListUpstream is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockUpstreamsSDK_Expecter) ListUpstream(ctx interface{}, request interface{}, opts ...interface{}) *MockUpstreamsSDK_ListUpstream_Call {
	return &MockUpstreamsSDK_ListUpstream_Call{Call: _e.mock.On("ListUpstream",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockUpstreamsSDK_ListUpstream_Call) Run(run func(ctx context.Context, request operations.ListUpstreamRequest, opts ...operations.Option)) *MockUpstreamsSDK_ListUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListUpstreamRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUpstreamsSDK_ListUpstream_Call) Return(listUpstreamResponse *operations.ListUpstreamResponse, err error) *MockUpstreamsSDK_ListUpstream_Call {
	_c.Call.Return(listUpstreamResponse, err)
	return _c
}

func (_c *MockUpstreamsSDK_ListUpstream_Call) RunAndReturn(run func(ctx context.Context, request operations.ListUpstreamRequest, opts ...operations.Option) (*operations.ListUpstreamResponse, error)) *MockUpstreamsSDK_ListUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertUpstream provides a mock function for the type MockUpstreamsSDK
func (_mock *MockUpstreamsSDK) UpsertUpstream(ctx context.Context, req operations.UpsertUpstreamRequest, opts ...operations.Option) (*operations.UpsertUpstreamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertUpstream")
	}

	var r0 *operations.UpsertUpstreamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertUpstreamRequest, ...operations.Option) (*operations.UpsertUpstreamResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertUpstreamRequest, ...operations.Option) *operations.UpsertUpstreamResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertUpstreamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertUpstreamRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpstreamsSDK_UpsertUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertUpstream'
type MockUpstreamsSDK_UpsertUpstream_Call struct {
	*mock.Call
}

// UpsertUpstream is a helper method to define mock.On call
//   - ctx
//   - req
//   - opts
func (_e *MockUpstreamsSDK_Expecter) UpsertUpstream(ctx interface{}, req interface{}, opts ...interface{}) *MockUpstreamsSDK_UpsertUpstream_Call {
	return &MockUpstreamsSDK_UpsertUpstream_Call{Call: _e.mock.On("UpsertUpstream",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockUpstreamsSDK_UpsertUpstream_Call) Run(run func(ctx context.Context, req operations.UpsertUpstreamRequest, opts ...operations.Option)) *MockUpstreamsSDK_UpsertUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertUpstreamRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUpstreamsSDK_UpsertUpstream_Call) Return(upsertUpstreamResponse *operations.UpsertUpstreamResponse, err error) *MockUpstreamsSDK_UpsertUpstream_Call {
	_c.Call.Return(upsertUpstreamResponse, err)
	return _c
}

func (_c *MockUpstreamsSDK_UpsertUpstream_Call) RunAndReturn(run func(ctx context.Context, req operations.UpsertUpstreamRequest, opts ...operations.Option) (*operations.UpsertUpstreamResponse, error)) *MockUpstreamsSDK_UpsertUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVaultSDK creates a new instance of MockVaultSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVaultSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVaultSDK {
	mock := &MockVaultSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVaultSDK is an autogenerated mock type for the VaultSDK type
type MockVaultSDK struct {
	mock.Mock
}

type MockVaultSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVaultSDK) EXPECT() *MockVaultSDK_Expecter {
	return &MockVaultSDK_Expecter{mock: &_m.Mock}
}

// CreateVault provides a mock function for the type MockVaultSDK
func (_mock *MockVaultSDK) CreateVault(ctx context.Context, controlPlaneID string, vault components.Vault, opts ...operations.Option) (*operations.CreateVaultResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, vault, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, vault)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateVault")
	}

	var r0 *operations.CreateVaultResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Vault, ...operations.Option) (*operations.CreateVaultResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, vault, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Vault, ...operations.Option) *operations.CreateVaultResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, vault, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateVaultResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.Vault, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, vault, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVaultSDK_CreateVault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVault'
type MockVaultSDK_CreateVault_Call struct {
	*mock.Call
}

// CreateVault is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - vault
//   - opts
func (_e *MockVaultSDK_Expecter) CreateVault(ctx interface{}, controlPlaneID interface{}, vault interface{}, opts ...interface{}) *MockVaultSDK_CreateVault_Call {
	return &MockVaultSDK_CreateVault_Call{Call: _e.mock.On("CreateVault",
		append([]interface{}{ctx, controlPlaneID, vault}, opts...)...)}
}

func (_c *MockVaultSDK_CreateVault_Call) Run(run func(ctx context.Context, controlPlaneID string, vault components.Vault, opts ...operations.Option)) *MockVaultSDK_CreateVault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(components.Vault), variadicArgs...)
	})
	return _c
}

func (_c *MockVaultSDK_CreateVault_Call) Return(createVaultResponse *operations.CreateVaultResponse, err error) *MockVaultSDK_CreateVault_Call {
	_c.Call.Return(createVaultResponse, err)
	return _c
}

func (_c *MockVaultSDK_CreateVault_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, vault components.Vault, opts ...operations.Option) (*operations.CreateVaultResponse, error)) *MockVaultSDK_CreateVault_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVault provides a mock function for the type MockVaultSDK
func (_mock *MockVaultSDK) DeleteVault(ctx context.Context, controlPlaneID string, vaultID string, opts ...operations.Option) (*operations.DeleteVaultResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, vaultID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, vaultID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteVault")
	}

	var r0 *operations.DeleteVaultResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteVaultResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, vaultID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteVaultResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, vaultID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteVaultResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, vaultID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVaultSDK_DeleteVault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVault'
type MockVaultSDK_DeleteVault_Call struct {
	*mock.Call
}

// DeleteVault is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - vaultID
//   - opts
func (_e *MockVaultSDK_Expecter) DeleteVault(ctx interface{}, controlPlaneID interface{}, vaultID interface{}, opts ...interface{}) *MockVaultSDK_DeleteVault_Call {
	return &MockVaultSDK_DeleteVault_Call{Call: _e.mock.On("DeleteVault",
		append([]interface{}{ctx, controlPlaneID, vaultID}, opts...)...)}
}

func (_c *MockVaultSDK_DeleteVault_Call) Run(run func(ctx context.Context, controlPlaneID string, vaultID string, opts ...operations.Option)) *MockVaultSDK_DeleteVault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockVaultSDK_DeleteVault_Call) Return(deleteVaultResponse *operations.DeleteVaultResponse, err error) *MockVaultSDK_DeleteVault_Call {
	_c.Call.Return(deleteVaultResponse, err)
	return _c
}

func (_c *MockVaultSDK_DeleteVault_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, vaultID string, opts ...operations.Option) (*operations.DeleteVaultResponse, error)) *MockVaultSDK_DeleteVault_Call {
	_c.Call.Return(run)
	return _c
}

// ListVault provides a mock function for the type MockVaultSDK
func (_mock *MockVaultSDK) ListVault(ctx context.Context, request operations.ListVaultRequest, opts ...operations.Option) (*operations.ListVaultResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListVault")
	}

	var r0 *operations.ListVaultResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListVaultRequest, ...operations.Option) (*operations.ListVaultResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListVaultRequest, ...operations.Option) *operations.ListVaultResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListVaultResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListVaultRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVaultSDK_ListVault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVault'
type MockVaultSDK_ListVault_Call struct {
	*mock.Call
}

// ListVault is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockVaultSDK_Expecter) ListVault(ctx interface{}, request interface{}, opts ...interface{}) *MockVaultSDK_ListVault_Call {
	return &MockVaultSDK_ListVault_Call{Call: _e.mock.On("ListVault",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockVaultSDK_ListVault_Call) Run(run func(ctx context.Context, request operations.ListVaultRequest, opts ...operations.Option)) *MockVaultSDK_ListVault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListVaultRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockVaultSDK_ListVault_Call) Return(listVaultResponse *operations.ListVaultResponse, err error) *MockVaultSDK_ListVault_Call {
	_c.Call.Return(listVaultResponse, err)
	return _c
}

func (_c *MockVaultSDK_ListVault_Call) RunAndReturn(run func(ctx context.Context, request operations.ListVaultRequest, opts ...operations.Option) (*operations.ListVaultResponse, error)) *MockVaultSDK_ListVault_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertVault provides a mock function for the type MockVaultSDK
func (_mock *MockVaultSDK) UpsertVault(ctx context.Context, request operations.UpsertVaultRequest, opts ...operations.Option) (*operations.UpsertVaultResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertVault")
	}

	var r0 *operations.UpsertVaultResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertVaultRequest, ...operations.Option) (*operations.UpsertVaultResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertVaultRequest, ...operations.Option) *operations.UpsertVaultResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertVaultResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertVaultRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVaultSDK_UpsertVault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertVault'
type MockVaultSDK_UpsertVault_Call struct {
	*mock.Call
}

// UpsertVault is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockVaultSDK_Expecter) UpsertVault(ctx interface{}, request interface{}, opts ...interface{}) *MockVaultSDK_UpsertVault_Call {
	return &MockVaultSDK_UpsertVault_Call{Call: _e.mock.On("UpsertVault",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockVaultSDK_UpsertVault_Call) Run(run func(ctx context.Context, request operations.UpsertVaultRequest, opts ...operations.Option)) *MockVaultSDK_UpsertVault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertVaultRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockVaultSDK_UpsertVault_Call) Return(upsertVaultResponse *operations.UpsertVaultResponse, err error) *MockVaultSDK_UpsertVault_Call {
	_c.Call.Return(upsertVaultResponse, err)
	return _c
}

func (_c *MockVaultSDK_UpsertVault_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertVaultRequest, opts ...operations.Option) (*operations.UpsertVaultResponse, error)) *MockVaultSDK_UpsertVault_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransitGatewaysSDK creates a new instance of MockTransitGatewaysSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransitGatewaysSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransitGatewaysSDK {
	mock := &MockTransitGatewaysSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransitGatewaysSDK is an autogenerated mock type for the TransitGatewaysSDK type
type MockTransitGatewaysSDK struct {
	mock.Mock
}

type MockTransitGatewaysSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransitGatewaysSDK) EXPECT() *MockTransitGatewaysSDK_Expecter {
	return &MockTransitGatewaysSDK_Expecter{mock: &_m.Mock}
}

// CreateTransitGateway provides a mock function for the type MockTransitGatewaysSDK
func (_mock *MockTransitGatewaysSDK) CreateTransitGateway(ctx context.Context, networkID string, createTransitGatewayRequest components.CreateTransitGatewayRequest, opts ...operations.Option) (*operations.CreateTransitGatewayResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, networkID, createTransitGatewayRequest, opts)
	} else {
		tmpRet = _mock.Called(ctx, networkID, createTransitGatewayRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateTransitGateway")
	}

	var r0 *operations.CreateTransitGatewayResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.CreateTransitGatewayRequest, []operations.Option) (*operations.CreateTransitGatewayResponse, error)); ok {
		return returnFunc(ctx, networkID, createTransitGatewayRequest, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.CreateTransitGatewayRequest, ...operations.Option) *operations.CreateTransitGatewayResponse); ok {
		r0 = returnFunc(ctx, networkID, createTransitGatewayRequest, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateTransitGatewayResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.CreateTransitGatewayRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, networkID, createTransitGatewayRequest, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransitGatewaysSDK_CreateTransitGateway_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransitGateway'
type MockTransitGatewaysSDK_CreateTransitGateway_Call struct {
	*mock.Call
}

// CreateTransitGateway is a helper method to define mock.On call
//   - ctx
//   - networkID
//   - createTransitGatewayRequest
//   - opts
func (_e *MockTransitGatewaysSDK_Expecter) CreateTransitGateway(ctx interface{}, networkID interface{}, createTransitGatewayRequest interface{}, opts ...interface{}) *MockTransitGatewaysSDK_CreateTransitGateway_Call {
	return &MockTransitGatewaysSDK_CreateTransitGateway_Call{Call: _e.mock.On("CreateTransitGateway",
		append([]interface{}{ctx, networkID, createTransitGatewayRequest}, opts...)...)}
}

func (_c *MockTransitGatewaysSDK_CreateTransitGateway_Call) Run(run func(ctx context.Context, networkID string, createTransitGatewayRequest components.CreateTransitGatewayRequest, opts ...operations.Option)) *MockTransitGatewaysSDK_CreateTransitGateway_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(components.CreateTransitGatewayRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTransitGatewaysSDK_CreateTransitGateway_Call) Return(createTransitGatewayResponse *operations.CreateTransitGatewayResponse, err error) *MockTransitGatewaysSDK_CreateTransitGateway_Call {
	_c.Call.Return(createTransitGatewayResponse, err)
	return _c
}

func (_c *MockTransitGatewaysSDK_CreateTransitGateway_Call) RunAndReturn(run func(ctx context.Context, networkID string, createTransitGatewayRequest components.CreateTransitGatewayRequest, opts ...operations.Option) (*operations.CreateTransitGatewayResponse, error)) *MockTransitGatewaysSDK_CreateTransitGateway_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTransitGateway provides a mock function for the type MockTransitGatewaysSDK
func (_mock *MockTransitGatewaysSDK) DeleteTransitGateway(ctx context.Context, networkID string, transitGatewayID string, opts ...operations.Option) (*operations.DeleteTransitGatewayResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, networkID, transitGatewayID, opts)
	} else {
		tmpRet = _mock.Called(ctx, networkID, transitGatewayID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteTransitGateway")
	}

	var r0 *operations.DeleteTransitGatewayResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []operations.Option) (*operations.DeleteTransitGatewayResponse, error)); ok {
		return returnFunc(ctx, networkID, transitGatewayID, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteTransitGatewayResponse); ok {
		r0 = returnFunc(ctx, networkID, transitGatewayID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteTransitGatewayResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, networkID, transitGatewayID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransitGatewaysSDK_DeleteTransitGateway_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTransitGateway'
type MockTransitGatewaysSDK_DeleteTransitGateway_Call struct {
	*mock.Call
}

// DeleteTransitGateway is a helper method to define mock.On call
//   - ctx
//   - networkID
//   - transitGatewayID
//   - opts
func (_e *MockTransitGatewaysSDK_Expecter) DeleteTransitGateway(ctx interface{}, networkID interface{}, transitGatewayID interface{}, opts ...interface{}) *MockTransitGatewaysSDK_DeleteTransitGateway_Call {
	return &MockTransitGatewaysSDK_DeleteTransitGateway_Call{Call: _e.mock.On("DeleteTransitGateway",
		append([]interface{}{ctx, networkID, transitGatewayID}, opts...)...)}
}

func (_c *MockTransitGatewaysSDK_DeleteTransitGateway_Call) Run(run func(ctx context.Context, networkID string, transitGatewayID string, opts ...operations.Option)) *MockTransitGatewaysSDK_DeleteTransitGateway_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockTransitGatewaysSDK_DeleteTransitGateway_Call) Return(deleteTransitGatewayResponse *operations.DeleteTransitGatewayResponse, err error) *MockTransitGatewaysSDK_DeleteTransitGateway_Call {
	_c.Call.Return(deleteTransitGatewayResponse, err)
	return _c
}

func (_c *MockTransitGatewaysSDK_DeleteTransitGateway_Call) RunAndReturn(run func(ctx context.Context, networkID string, transitGatewayID string, opts ...operations.Option) (*operations.DeleteTransitGatewayResponse, error)) *MockTransitGatewaysSDK_DeleteTransitGateway_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransitGateway provides a mock function for the type MockTransitGatewaysSDK
func (_mock *MockTransitGatewaysSDK) GetTransitGateway(ctx context.Context, networkID string, transitGatewayID string, opts ...operations.Option) (*operations.GetTransitGatewayResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, networkID, transitGatewayID, opts)
	} else {
		tmpRet = _mock.Called(ctx, networkID, transitGatewayID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTransitGateway")
	}

	var r0 *operations.GetTransitGatewayResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []operations.Option) (*operations.GetTransitGatewayResponse, error)); ok {
		return returnFunc(ctx, networkID, transitGatewayID, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.GetTransitGatewayResponse); ok {
		r0 = returnFunc(ctx, networkID, transitGatewayID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetTransitGatewayResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, networkID, transitGatewayID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransitGatewaysSDK_GetTransitGateway_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransitGateway'
type MockTransitGatewaysSDK_GetTransitGateway_Call struct {
	*mock.Call
}

// GetTransitGateway is a helper method to define mock.On call
//   - ctx
//   - networkID
//   - transitGatewayID
//   - opts
func (_e *MockTransitGatewaysSDK_Expecter) GetTransitGateway(ctx interface{}, networkID interface{}, transitGatewayID interface{}, opts ...interface{}) *MockTransitGatewaysSDK_GetTransitGateway_Call {
	return &MockTransitGatewaysSDK_GetTransitGateway_Call{Call: _e.mock.On("GetTransitGateway",
		append([]interface{}{ctx, networkID, transitGatewayID}, opts...)...)}
}

func (_c *MockTransitGatewaysSDK_GetTransitGateway_Call) Run(run func(ctx context.Context, networkID string, transitGatewayID string, opts ...operations.Option)) *MockTransitGatewaysSDK_GetTransitGateway_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockTransitGatewaysSDK_GetTransitGateway_Call) Return(getTransitGatewayResponse *operations.GetTransitGatewayResponse, err error) *MockTransitGatewaysSDK_GetTransitGateway_Call {
	_c.Call.Return(getTransitGatewayResponse, err)
	return _c
}

func (_c *MockTransitGatewaysSDK_GetTransitGateway_Call) RunAndReturn(run func(ctx context.Context, networkID string, transitGatewayID string, opts ...operations.Option) (*operations.GetTransitGatewayResponse, error)) *MockTransitGatewaysSDK_GetTransitGateway_Call {
	_c.Call.Return(run)
	return _c
}

// ListTransitGateways provides a mock function for the type MockTransitGatewaysSDK
func (_mock *MockTransitGatewaysSDK) ListTransitGateways(ctx context.Context, request operations.ListTransitGatewaysRequest, opts ...operations.Option) (*operations.ListTransitGatewaysResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListTransitGateways")
	}

	var r0 *operations.ListTransitGatewaysResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListTransitGatewaysRequest, []operations.Option) (*operations.ListTransitGatewaysResponse, error)); ok {
		return returnFunc(ctx, request, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListTransitGatewaysRequest, ...operations.Option) *operations.ListTransitGatewaysResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListTransitGatewaysResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListTransitGatewaysRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransitGatewaysSDK_ListTransitGateways_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTransitGateways'
type MockTransitGatewaysSDK_ListTransitGateways_Call struct {
	*mock.Call
}

// ListTransitGateways is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockTransitGatewaysSDK_Expecter) ListTransitGateways(ctx interface{}, request interface{}, opts ...interface{}) *MockTransitGatewaysSDK_ListTransitGateways_Call {
	return &MockTransitGatewaysSDK_ListTransitGateways_Call{Call: _e.mock.On("ListTransitGateways",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockTransitGatewaysSDK_ListTransitGateways_Call) Run(run func(ctx context.Context, request operations.ListTransitGatewaysRequest, opts ...operations.Option)) *MockTransitGatewaysSDK_ListTransitGateways_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListTransitGatewaysRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTransitGatewaysSDK_ListTransitGateways_Call) Return(listTransitGatewaysResponse *operations.ListTransitGatewaysResponse, err error) *MockTransitGatewaysSDK_ListTransitGateways_Call {
	_c.Call.Return(listTransitGatewaysResponse, err)
	return _c
}

func (_c *MockTransitGatewaysSDK_ListTransitGateways_Call) RunAndReturn(run func(ctx context.Context, request operations.ListTransitGatewaysRequest, opts ...operations.Option) (*operations.ListTransitGatewaysResponse, error)) *MockTransitGatewaysSDK_ListTransitGateways_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMeSDK creates a new instance of MockMeSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMeSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMeSDK {
	mock := &MockMeSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMeSDK is an autogenerated mock type for the MeSDK type
type MockMeSDK struct {
	mock.Mock
}

type MockMeSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMeSDK) EXPECT() *MockMeSDK_Expecter {
	return &MockMeSDK_Expecter{mock: &_m.Mock}
}

// GetOrganizationsMe provides a mock function for the type MockMeSDK
func (_mock *MockMeSDK) GetOrganizationsMe(ctx context.Context, opts ...operations.Option) (*operations.GetOrganizationsMeResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, opts)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationsMe")
	}

	var r0 *operations.GetOrganizationsMeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...operations.Option) (*operations.GetOrganizationsMeResponse, error)); ok {
		return returnFunc(ctx, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...operations.Option) *operations.GetOrganizationsMeResponse); ok {
		r0 = returnFunc(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetOrganizationsMeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMeSDK_GetOrganizationsMe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationsMe'
type MockMeSDK_GetOrganizationsMe_Call struct {
	*mock.Call
}

// GetOrganizationsMe is a helper method to define mock.On call
//   - ctx
//   - opts
func (_e *MockMeSDK_Expecter) GetOrganizationsMe(ctx interface{}, opts ...interface{}) *MockMeSDK_GetOrganizationsMe_Call {
	return &MockMeSDK_GetOrganizationsMe_Call{Call: _e.mock.On("GetOrganizationsMe",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockMeSDK_GetOrganizationsMe_Call) Run(run func(ctx context.Context, opts ...operations.Option)) *MockMeSDK_GetOrganizationsMe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockMeSDK_GetOrganizationsMe_Call) Return(getOrganizationsMeResponse *operations.GetOrganizationsMeResponse, err error) *MockMeSDK_GetOrganizationsMe_Call {
	_c.Call.Return(getOrganizationsMeResponse, err)
	return _c
}

func (_c *MockMeSDK_GetOrganizationsMe_Call) RunAndReturn(run func(ctx context.Context, opts ...operations.Option) (*operations.GetOrganizationsMeResponse, error)) *MockMeSDK_GetOrganizationsMe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPluginSDK creates a new instance of MockPluginSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPluginSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPluginSDK {
	mock := &MockPluginSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPluginSDK is an autogenerated mock type for the PluginSDK type
type MockPluginSDK struct {
	mock.Mock
}

type MockPluginSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPluginSDK) EXPECT() *MockPluginSDK_Expecter {
	return &MockPluginSDK_Expecter{mock: &_m.Mock}
}

// CreatePlugin provides a mock function for the type MockPluginSDK
func (_mock *MockPluginSDK) CreatePlugin(ctx context.Context, controlPlaneID string, plugin components.Plugin, opts ...operations.Option) (*operations.CreatePluginResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, plugin, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, plugin)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreatePlugin")
	}

	var r0 *operations.CreatePluginResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Plugin, ...operations.Option) (*operations.CreatePluginResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, plugin, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Plugin, ...operations.Option) *operations.CreatePluginResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, plugin, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreatePluginResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.Plugin, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, plugin, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPluginSDK_CreatePlugin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePlugin'
type MockPluginSDK_CreatePlugin_Call struct {
	*mock.Call
}

// CreatePlugin is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - plugin
//   - opts
func (_e *MockPluginSDK_Expecter) CreatePlugin(ctx interface{}, controlPlaneID interface{}, plugin interface{}, opts ...interface{}) *MockPluginSDK_CreatePlugin_Call {
	return &MockPluginSDK_CreatePlugin_Call{Call: _e.mock.On("CreatePlugin",
		append([]interface{}{ctx, controlPlaneID, plugin}, opts...)...)}
}

func (_c *MockPluginSDK_CreatePlugin_Call) Run(run func(ctx context.Context, controlPlaneID string, plugin components.Plugin, opts ...operations.Option)) *MockPluginSDK_CreatePlugin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(components.Plugin), variadicArgs...)
	})
	return _c
}

func (_c *MockPluginSDK_CreatePlugin_Call) Return(createPluginResponse *operations.CreatePluginResponse, err error) *MockPluginSDK_CreatePlugin_Call {
	_c.Call.Return(createPluginResponse, err)
	return _c
}

func (_c *MockPluginSDK_CreatePlugin_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, plugin components.Plugin, opts ...operations.Option) (*operations.CreatePluginResponse, error)) *MockPluginSDK_CreatePlugin_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePlugin provides a mock function for the type MockPluginSDK
func (_mock *MockPluginSDK) DeletePlugin(ctx context.Context, controlPlaneID string, pluginID string, opts ...operations.Option) (*operations.DeletePluginResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, pluginID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, pluginID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeletePlugin")
	}

	var r0 *operations.DeletePluginResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeletePluginResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, pluginID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeletePluginResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, pluginID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeletePluginResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, pluginID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPluginSDK_DeletePlugin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePlugin'
type MockPluginSDK_DeletePlugin_Call struct {
	*mock.Call
}

// DeletePlugin is a helper method to define mock.On call
//   - ctx
//   - controlPlaneID
//   - pluginID
//   - opts
func (_e *MockPluginSDK_Expecter) DeletePlugin(ctx interface{}, controlPlaneID interface{}, pluginID interface{}, opts ...interface{}) *MockPluginSDK_DeletePlugin_Call {
	return &MockPluginSDK_DeletePlugin_Call{Call: _e.mock.On("DeletePlugin",
		append([]interface{}{ctx, controlPlaneID, pluginID}, opts...)...)}
}

func (_c *MockPluginSDK_DeletePlugin_Call) Run(run func(ctx context.Context, controlPlaneID string, pluginID string, opts ...operations.Option)) *MockPluginSDK_DeletePlugin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockPluginSDK_DeletePlugin_Call) Return(deletePluginResponse *operations.DeletePluginResponse, err error) *MockPluginSDK_DeletePlugin_Call {
	_c.Call.Return(deletePluginResponse, err)
	return _c
}

func (_c *MockPluginSDK_DeletePlugin_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, pluginID string, opts ...operations.Option) (*operations.DeletePluginResponse, error)) *MockPluginSDK_DeletePlugin_Call {
	_c.Call.Return(run)
	return _c
}

// ListPlugin provides a mock function for the type MockPluginSDK
func (_mock *MockPluginSDK) ListPlugin(ctx context.Context, request operations.ListPluginRequest, opts ...operations.Option) (*operations.ListPluginResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListPlugin")
	}

	var r0 *operations.ListPluginResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListPluginRequest, ...operations.Option) (*operations.ListPluginResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListPluginRequest, ...operations.Option) *operations.ListPluginResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListPluginResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListPluginRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPluginSDK_ListPlugin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPlugin'
type MockPluginSDK_ListPlugin_Call struct {
	*mock.Call
}

// ListPlugin is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockPluginSDK_Expecter) ListPlugin(ctx interface{}, request interface{}, opts ...interface{}) *MockPluginSDK_ListPlugin_Call {
	return &MockPluginSDK_ListPlugin_Call{Call: _e.mock.On("ListPlugin",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockPluginSDK_ListPlugin_Call) Run(run func(ctx context.Context, request operations.ListPluginRequest, opts ...operations.Option)) *MockPluginSDK_ListPlugin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListPluginRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockPluginSDK_ListPlugin_Call) Return(listPluginResponse *operations.ListPluginResponse, err error) *MockPluginSDK_ListPlugin_Call {
	_c.Call.Return(listPluginResponse, err)
	return _c
}

func (_c *MockPluginSDK_ListPlugin_Call) RunAndReturn(run func(ctx context.Context, request operations.ListPluginRequest, opts ...operations.Option) (*operations.ListPluginResponse, error)) *MockPluginSDK_ListPlugin_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertPlugin provides a mock function for the type MockPluginSDK
func (_mock *MockPluginSDK) UpsertPlugin(ctx context.Context, request operations.UpsertPluginRequest, opts ...operations.Option) (*operations.UpsertPluginResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertPlugin")
	}

	var r0 *operations.UpsertPluginResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertPluginRequest, ...operations.Option) (*operations.UpsertPluginResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertPluginRequest, ...operations.Option) *operations.UpsertPluginResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertPluginResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertPluginRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPluginSDK_UpsertPlugin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertPlugin'
type MockPluginSDK_UpsertPlugin_Call struct {
	*mock.Call
}

// UpsertPlugin is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *MockPluginSDK_Expecter) UpsertPlugin(ctx interface{}, request interface{}, opts ...interface{}) *MockPluginSDK_UpsertPlugin_Call {
	return &MockPluginSDK_UpsertPlugin_Call{Call: _e.mock.On("UpsertPlugin",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockPluginSDK_UpsertPlugin_Call) Run(run func(ctx context.Context, request operations.UpsertPluginRequest, opts ...operations.Option)) *MockPluginSDK_UpsertPlugin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertPluginRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockPluginSDK_UpsertPlugin_Call) Return(upsertPluginResponse *operations.UpsertPluginResponse, err error) *MockPluginSDK_UpsertPlugin_Call {
	_c.Call.Return(upsertPluginResponse, err)
	return _c
}

func (_c *MockPluginSDK_UpsertPlugin_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertPluginRequest, opts ...operations.Option) (*operations.UpsertPluginResponse, error)) *MockPluginSDK_UpsertPlugin_Call {
	_c.Call.Return(run)
	return _c
}
