// Code generated by mockery. DO NOT EDIT.

package ops

import (
	context "context"

	operations "github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// MockSNIsSDK is an autogenerated mock type for the SNIsSDK type
type MockSNIsSDK struct {
	mock.Mock
}

type MockSNIsSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSNIsSDK) EXPECT() *MockSNIsSDK_Expecter {
	return &MockSNIsSDK_Expecter{mock: &_m.Mock}
}

// CreateSniWithCertificate provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockSNIsSDK) CreateSniWithCertificate(_a0 context.Context, _a1 operations.CreateSniWithCertificateRequest, _a2 ...operations.Option) (*operations.CreateSniWithCertificateResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSniWithCertificate")
	}

	var r0 *operations.CreateSniWithCertificateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.CreateSniWithCertificateRequest, ...operations.Option) (*operations.CreateSniWithCertificateResponse, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.CreateSniWithCertificateRequest, ...operations.Option) *operations.CreateSniWithCertificateResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateSniWithCertificateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.CreateSniWithCertificateRequest, ...operations.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSNIsSDK_CreateSniWithCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSniWithCertificate'
type MockSNIsSDK_CreateSniWithCertificate_Call struct {
	*mock.Call
}

// CreateSniWithCertificate is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 operations.CreateSniWithCertificateRequest
//   - _a2 ...operations.Option
func (_e *MockSNIsSDK_Expecter) CreateSniWithCertificate(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockSNIsSDK_CreateSniWithCertificate_Call {
	return &MockSNIsSDK_CreateSniWithCertificate_Call{Call: _e.mock.On("CreateSniWithCertificate",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockSNIsSDK_CreateSniWithCertificate_Call) Run(run func(_a0 context.Context, _a1 operations.CreateSniWithCertificateRequest, _a2 ...operations.Option)) *MockSNIsSDK_CreateSniWithCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.CreateSniWithCertificateRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockSNIsSDK_CreateSniWithCertificate_Call) Return(_a0 *operations.CreateSniWithCertificateResponse, _a1 error) *MockSNIsSDK_CreateSniWithCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSNIsSDK_CreateSniWithCertificate_Call) RunAndReturn(run func(context.Context, operations.CreateSniWithCertificateRequest, ...operations.Option) (*operations.CreateSniWithCertificateResponse, error)) *MockSNIsSDK_CreateSniWithCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSniWithCertificate provides a mock function with given fields: ctx, request, opts
func (_m *MockSNIsSDK) DeleteSniWithCertificate(ctx context.Context, request operations.DeleteSniWithCertificateRequest, opts ...operations.Option) (*operations.DeleteSniWithCertificateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSniWithCertificate")
	}

	var r0 *operations.DeleteSniWithCertificateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.DeleteSniWithCertificateRequest, ...operations.Option) (*operations.DeleteSniWithCertificateResponse, error)); ok {
		return rf(ctx, request, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.DeleteSniWithCertificateRequest, ...operations.Option) *operations.DeleteSniWithCertificateResponse); ok {
		r0 = rf(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteSniWithCertificateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.DeleteSniWithCertificateRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSNIsSDK_DeleteSniWithCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSniWithCertificate'
type MockSNIsSDK_DeleteSniWithCertificate_Call struct {
	*mock.Call
}

// DeleteSniWithCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.DeleteSniWithCertificateRequest
//   - opts ...operations.Option
func (_e *MockSNIsSDK_Expecter) DeleteSniWithCertificate(ctx interface{}, request interface{}, opts ...interface{}) *MockSNIsSDK_DeleteSniWithCertificate_Call {
	return &MockSNIsSDK_DeleteSniWithCertificate_Call{Call: _e.mock.On("DeleteSniWithCertificate",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockSNIsSDK_DeleteSniWithCertificate_Call) Run(run func(ctx context.Context, request operations.DeleteSniWithCertificateRequest, opts ...operations.Option)) *MockSNIsSDK_DeleteSniWithCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.DeleteSniWithCertificateRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockSNIsSDK_DeleteSniWithCertificate_Call) Return(_a0 *operations.DeleteSniWithCertificateResponse, _a1 error) *MockSNIsSDK_DeleteSniWithCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSNIsSDK_DeleteSniWithCertificate_Call) RunAndReturn(run func(context.Context, operations.DeleteSniWithCertificateRequest, ...operations.Option) (*operations.DeleteSniWithCertificateResponse, error)) *MockSNIsSDK_DeleteSniWithCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertSniWithCertificate provides a mock function with given fields: ctx, request, opts
func (_m *MockSNIsSDK) UpsertSniWithCertificate(ctx context.Context, request operations.UpsertSniWithCertificateRequest, opts ...operations.Option) (*operations.UpsertSniWithCertificateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpsertSniWithCertificate")
	}

	var r0 *operations.UpsertSniWithCertificateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.UpsertSniWithCertificateRequest, ...operations.Option) (*operations.UpsertSniWithCertificateResponse, error)); ok {
		return rf(ctx, request, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.UpsertSniWithCertificateRequest, ...operations.Option) *operations.UpsertSniWithCertificateResponse); ok {
		r0 = rf(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertSniWithCertificateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.UpsertSniWithCertificateRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSNIsSDK_UpsertSniWithCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertSniWithCertificate'
type MockSNIsSDK_UpsertSniWithCertificate_Call struct {
	*mock.Call
}

// UpsertSniWithCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.UpsertSniWithCertificateRequest
//   - opts ...operations.Option
func (_e *MockSNIsSDK_Expecter) UpsertSniWithCertificate(ctx interface{}, request interface{}, opts ...interface{}) *MockSNIsSDK_UpsertSniWithCertificate_Call {
	return &MockSNIsSDK_UpsertSniWithCertificate_Call{Call: _e.mock.On("UpsertSniWithCertificate",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockSNIsSDK_UpsertSniWithCertificate_Call) Run(run func(ctx context.Context, request operations.UpsertSniWithCertificateRequest, opts ...operations.Option)) *MockSNIsSDK_UpsertSniWithCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertSniWithCertificateRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockSNIsSDK_UpsertSniWithCertificate_Call) Return(_a0 *operations.UpsertSniWithCertificateResponse, _a1 error) *MockSNIsSDK_UpsertSniWithCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSNIsSDK_UpsertSniWithCertificate_Call) RunAndReturn(run func(context.Context, operations.UpsertSniWithCertificateRequest, ...operations.Option) (*operations.UpsertSniWithCertificateResponse, error)) *MockSNIsSDK_UpsertSniWithCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSNIsSDK creates a new instance of MockSNIsSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSNIsSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSNIsSDK {
	mock := &MockSNIsSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
