// Code generated by mockery. DO NOT EDIT.

package ops

import (
	context "context"

	components "github.com/Kong/sdk-konnect-go/models/components"

	mock "github.com/stretchr/testify/mock"

	operations "github.com/Kong/sdk-konnect-go/models/operations"
)

// MockUpstreamsSDK is an autogenerated mock type for the UpstreamsSDK type
type MockUpstreamsSDK struct {
	mock.Mock
}

type MockUpstreamsSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpstreamsSDK) EXPECT() *MockUpstreamsSDK_Expecter {
	return &MockUpstreamsSDK_Expecter{mock: &_m.Mock}
}

// CreateUpstream provides a mock function with given fields: ctx, controlPlaneID, upstream, opts
func (_m *MockUpstreamsSDK) CreateUpstream(ctx context.Context, controlPlaneID string, upstream components.UpstreamInput, opts ...operations.Option) (*operations.CreateUpstreamResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, controlPlaneID, upstream)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUpstream")
	}

	var r0 *operations.CreateUpstreamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, components.UpstreamInput, ...operations.Option) (*operations.CreateUpstreamResponse, error)); ok {
		return rf(ctx, controlPlaneID, upstream, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, components.UpstreamInput, ...operations.Option) *operations.CreateUpstreamResponse); ok {
		r0 = rf(ctx, controlPlaneID, upstream, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateUpstreamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, components.UpstreamInput, ...operations.Option) error); ok {
		r1 = rf(ctx, controlPlaneID, upstream, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUpstreamsSDK_CreateUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUpstream'
type MockUpstreamsSDK_CreateUpstream_Call struct {
	*mock.Call
}

// CreateUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - upstream components.UpstreamInput
//   - opts ...operations.Option
func (_e *MockUpstreamsSDK_Expecter) CreateUpstream(ctx interface{}, controlPlaneID interface{}, upstream interface{}, opts ...interface{}) *MockUpstreamsSDK_CreateUpstream_Call {
	return &MockUpstreamsSDK_CreateUpstream_Call{Call: _e.mock.On("CreateUpstream",
		append([]interface{}{ctx, controlPlaneID, upstream}, opts...)...)}
}

func (_c *MockUpstreamsSDK_CreateUpstream_Call) Run(run func(ctx context.Context, controlPlaneID string, upstream components.UpstreamInput, opts ...operations.Option)) *MockUpstreamsSDK_CreateUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(components.UpstreamInput), variadicArgs...)
	})
	return _c
}

func (_c *MockUpstreamsSDK_CreateUpstream_Call) Return(_a0 *operations.CreateUpstreamResponse, _a1 error) *MockUpstreamsSDK_CreateUpstream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUpstreamsSDK_CreateUpstream_Call) RunAndReturn(run func(context.Context, string, components.UpstreamInput, ...operations.Option) (*operations.CreateUpstreamResponse, error)) *MockUpstreamsSDK_CreateUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUpstream provides a mock function with given fields: ctx, controlPlaneID, upstreamID, opts
func (_m *MockUpstreamsSDK) DeleteUpstream(ctx context.Context, controlPlaneID string, upstreamID string, opts ...operations.Option) (*operations.DeleteUpstreamResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, controlPlaneID, upstreamID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUpstream")
	}

	var r0 *operations.DeleteUpstreamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteUpstreamResponse, error)); ok {
		return rf(ctx, controlPlaneID, upstreamID, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteUpstreamResponse); ok {
		r0 = rf(ctx, controlPlaneID, upstreamID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteUpstreamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = rf(ctx, controlPlaneID, upstreamID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUpstreamsSDK_DeleteUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUpstream'
type MockUpstreamsSDK_DeleteUpstream_Call struct {
	*mock.Call
}

// DeleteUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - upstreamID string
//   - opts ...operations.Option
func (_e *MockUpstreamsSDK_Expecter) DeleteUpstream(ctx interface{}, controlPlaneID interface{}, upstreamID interface{}, opts ...interface{}) *MockUpstreamsSDK_DeleteUpstream_Call {
	return &MockUpstreamsSDK_DeleteUpstream_Call{Call: _e.mock.On("DeleteUpstream",
		append([]interface{}{ctx, controlPlaneID, upstreamID}, opts...)...)}
}

func (_c *MockUpstreamsSDK_DeleteUpstream_Call) Run(run func(ctx context.Context, controlPlaneID string, upstreamID string, opts ...operations.Option)) *MockUpstreamsSDK_DeleteUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUpstreamsSDK_DeleteUpstream_Call) Return(_a0 *operations.DeleteUpstreamResponse, _a1 error) *MockUpstreamsSDK_DeleteUpstream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUpstreamsSDK_DeleteUpstream_Call) RunAndReturn(run func(context.Context, string, string, ...operations.Option) (*operations.DeleteUpstreamResponse, error)) *MockUpstreamsSDK_DeleteUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertUpstream provides a mock function with given fields: ctx, req, opts
func (_m *MockUpstreamsSDK) UpsertUpstream(ctx context.Context, req operations.UpsertUpstreamRequest, opts ...operations.Option) (*operations.UpsertUpstreamResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpsertUpstream")
	}

	var r0 *operations.UpsertUpstreamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.UpsertUpstreamRequest, ...operations.Option) (*operations.UpsertUpstreamResponse, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.UpsertUpstreamRequest, ...operations.Option) *operations.UpsertUpstreamResponse); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertUpstreamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.UpsertUpstreamRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUpstreamsSDK_UpsertUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertUpstream'
type MockUpstreamsSDK_UpsertUpstream_Call struct {
	*mock.Call
}

// UpsertUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - req operations.UpsertUpstreamRequest
//   - opts ...operations.Option
func (_e *MockUpstreamsSDK_Expecter) UpsertUpstream(ctx interface{}, req interface{}, opts ...interface{}) *MockUpstreamsSDK_UpsertUpstream_Call {
	return &MockUpstreamsSDK_UpsertUpstream_Call{Call: _e.mock.On("UpsertUpstream",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockUpstreamsSDK_UpsertUpstream_Call) Run(run func(ctx context.Context, req operations.UpsertUpstreamRequest, opts ...operations.Option)) *MockUpstreamsSDK_UpsertUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertUpstreamRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUpstreamsSDK_UpsertUpstream_Call) Return(_a0 *operations.UpsertUpstreamResponse, _a1 error) *MockUpstreamsSDK_UpsertUpstream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUpstreamsSDK_UpsertUpstream_Call) RunAndReturn(run func(context.Context, operations.UpsertUpstreamRequest, ...operations.Option) (*operations.UpsertUpstreamResponse, error)) *MockUpstreamsSDK_UpsertUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpstreamsSDK creates a new instance of MockUpstreamsSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpstreamsSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpstreamsSDK {
	mock := &MockUpstreamsSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
