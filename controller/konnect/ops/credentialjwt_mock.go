// Code generated by mockery. DO NOT EDIT.

package ops

import (
	context "context"

	operations "github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// MockKongCredentialJWTSDK is an autogenerated mock type for the KongCredentialJWTSDK type
type MockKongCredentialJWTSDK struct {
	mock.Mock
}

type MockKongCredentialJWTSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKongCredentialJWTSDK) EXPECT() *MockKongCredentialJWTSDK_Expecter {
	return &MockKongCredentialJWTSDK_Expecter{mock: &_m.Mock}
}

// CreateJwtWithConsumer provides a mock function with given fields: ctx, req, opts
func (_m *MockKongCredentialJWTSDK) CreateJwtWithConsumer(ctx context.Context, req operations.CreateJwtWithConsumerRequest, opts ...operations.Option) (*operations.CreateJwtWithConsumerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateJwtWithConsumer")
	}

	var r0 *operations.CreateJwtWithConsumerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.CreateJwtWithConsumerRequest, ...operations.Option) (*operations.CreateJwtWithConsumerResponse, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.CreateJwtWithConsumerRequest, ...operations.Option) *operations.CreateJwtWithConsumerResponse); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateJwtWithConsumerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.CreateJwtWithConsumerRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJwtWithConsumer'
type MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call struct {
	*mock.Call
}

// CreateJwtWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - req operations.CreateJwtWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialJWTSDK_Expecter) CreateJwtWithConsumer(ctx interface{}, req interface{}, opts ...interface{}) *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call {
	return &MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call{Call: _e.mock.On("CreateJwtWithConsumer",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call) Run(run func(ctx context.Context, req operations.CreateJwtWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.CreateJwtWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call) Return(_a0 *operations.CreateJwtWithConsumerResponse, _a1 error) *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call) RunAndReturn(run func(context.Context, operations.CreateJwtWithConsumerRequest, ...operations.Option) (*operations.CreateJwtWithConsumerResponse, error)) *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteJwtWithConsumer provides a mock function with given fields: ctx, request, opts
func (_m *MockKongCredentialJWTSDK) DeleteJwtWithConsumer(ctx context.Context, request operations.DeleteJwtWithConsumerRequest, opts ...operations.Option) (*operations.DeleteJwtWithConsumerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJwtWithConsumer")
	}

	var r0 *operations.DeleteJwtWithConsumerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.DeleteJwtWithConsumerRequest, ...operations.Option) (*operations.DeleteJwtWithConsumerResponse, error)); ok {
		return rf(ctx, request, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.DeleteJwtWithConsumerRequest, ...operations.Option) *operations.DeleteJwtWithConsumerResponse); ok {
		r0 = rf(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteJwtWithConsumerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.DeleteJwtWithConsumerRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJwtWithConsumer'
type MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call struct {
	*mock.Call
}

// DeleteJwtWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.DeleteJwtWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialJWTSDK_Expecter) DeleteJwtWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call {
	return &MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call{Call: _e.mock.On("DeleteJwtWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call) Run(run func(ctx context.Context, request operations.DeleteJwtWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.DeleteJwtWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call) Return(_a0 *operations.DeleteJwtWithConsumerResponse, _a1 error) *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call) RunAndReturn(run func(context.Context, operations.DeleteJwtWithConsumerRequest, ...operations.Option) (*operations.DeleteJwtWithConsumerResponse, error)) *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertJwtWithConsumer provides a mock function with given fields: ctx, request, opts
func (_m *MockKongCredentialJWTSDK) UpsertJwtWithConsumer(ctx context.Context, request operations.UpsertJwtWithConsumerRequest, opts ...operations.Option) (*operations.UpsertJwtWithConsumerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpsertJwtWithConsumer")
	}

	var r0 *operations.UpsertJwtWithConsumerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.UpsertJwtWithConsumerRequest, ...operations.Option) (*operations.UpsertJwtWithConsumerResponse, error)); ok {
		return rf(ctx, request, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.UpsertJwtWithConsumerRequest, ...operations.Option) *operations.UpsertJwtWithConsumerResponse); ok {
		r0 = rf(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertJwtWithConsumerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.UpsertJwtWithConsumerRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertJwtWithConsumer'
type MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call struct {
	*mock.Call
}

// UpsertJwtWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.UpsertJwtWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialJWTSDK_Expecter) UpsertJwtWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call {
	return &MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call{Call: _e.mock.On("UpsertJwtWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call) Run(run func(ctx context.Context, request operations.UpsertJwtWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.UpsertJwtWithConsumerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call) Return(_a0 *operations.UpsertJwtWithConsumerResponse, _a1 error) *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call) RunAndReturn(run func(context.Context, operations.UpsertJwtWithConsumerRequest, ...operations.Option) (*operations.UpsertJwtWithConsumerResponse, error)) *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKongCredentialJWTSDK creates a new instance of MockKongCredentialJWTSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKongCredentialJWTSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKongCredentialJWTSDK {
	mock := &MockKongCredentialJWTSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
