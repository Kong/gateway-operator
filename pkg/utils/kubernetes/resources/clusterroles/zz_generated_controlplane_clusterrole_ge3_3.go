// This file is generated by /hack/generators/kic/role-generator. DO NOT EDIT.

package clusterroles

import (
	"fmt"

	rbacv1 "k8s.io/api/rbac/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	k8sutils "github.com/kong/gateway-operator/pkg/utils/kubernetes"
)

// -----------------------------------------------------------------------------
// ClusterRole generator
// -----------------------------------------------------------------------------

// GenerateNewClusterRoleForControlPlane_ge3_3 is a helper to generate a ClusterRole
// resource with all the permissions needed by the controlplane deployment.
// It is used for controlplanes that match the semver constraint ">=3.3"
func GenerateNewClusterRoleForControlPlane_ge3_3(controlplaneName string) *rbacv1.ClusterRole {
	return &rbacv1.ClusterRole{
		ObjectMeta: metav1.ObjectMeta{
			GenerateName: k8sutils.TrimGenerateName(fmt.Sprintf("%s-", controlplaneName)),
			Labels: map[string]string{
				"app": controlplaneName,
			},
		},
		Rules: []rbacv1.PolicyRule{

			{
				APIGroups: []string{
					"apiextensions.k8s.io",
				},
				Resources: []string{
					"customresourcedefinitions",
				},
				Verbs: []string{
					"list", "watch",
				},
			},

			{
				APIGroups: []string{
					"",
				},
				Resources: []string{
					"events",
				},
				Verbs: []string{
					"create", "patch",
				},
			},
			{
				APIGroups: []string{
					"",
				},
				Resources: []string{
					"nodes", "secrets",
				},
				Verbs: []string{
					"list", "watch",
				},
			},
			{
				APIGroups: []string{
					"",
				},
				Resources: []string{
					"pods", "services",
				},
				Verbs: []string{
					"get", "list", "watch",
				},
			},
			{
				APIGroups: []string{
					"",
				},
				Resources: []string{
					"services/status",
				},
				Verbs: []string{
					"get", "patch", "update",
				},
			},
			{
				APIGroups: []string{
					"configuration.konghq.com",
				},
				Resources: []string{
					"ingressclassparameterses", "kongclusterplugins", "kongconsumergroups", "kongconsumers", "kongcustomentities", "kongingresses", "konglicenses", "kongplugins", "kongupstreampolicies", "kongvaults", "tcpingresses", "udpingresses",
				},
				Verbs: []string{
					"get", "list", "watch",
				},
			},
			{
				APIGroups: []string{
					"configuration.konghq.com",
				},
				Resources: []string{
					"kongclusterplugins/status", "kongconsumergroups/status", "kongconsumers/status", "kongcustomentities/status", "kongingresses/status", "konglicenses/status", "kongplugins/status", "kongupstreampolicies/status", "kongvaults/status", "tcpingresses/status", "udpingresses/status",
				},
				Verbs: []string{
					"get", "patch", "update",
				},
			},
			{
				APIGroups: []string{
					"discovery.k8s.io",
				},
				Resources: []string{
					"endpointslices",
				},
				Verbs: []string{
					"get", "list", "watch",
				},
			},
			{
				APIGroups: []string{
					"gateway.networking.k8s.io",
				},
				Resources: []string{
					"httproutes",
				},
				Verbs: []string{
					"get", "list", "watch",
				},
			},
			{
				APIGroups: []string{
					"incubator.ingress-controller.konghq.com",
				},
				Resources: []string{
					"kongservicefacades",
				},
				Verbs: []string{
					"get", "list", "watch",
				},
			},
			{
				APIGroups: []string{
					"incubator.ingress-controller.konghq.com",
				},
				Resources: []string{
					"kongservicefacades/status",
				},
				Verbs: []string{
					"get", "patch", "update",
				},
			},
			{
				APIGroups: []string{
					"networking.k8s.io",
				},
				Resources: []string{
					"ingressclasses", "ingresses",
				},
				Verbs: []string{
					"get", "list", "watch",
				},
			},
			{
				APIGroups: []string{
					"networking.k8s.io",
				},
				Resources: []string{
					"ingresses/status",
				},
				Verbs: []string{
					"get", "patch", "update",
				},
			},

			{
				APIGroups: []string{
					"",
				},
				Resources: []string{
					"configmaps",
				},
				Verbs: []string{
					"get", "list", "watch", "create", "update", "patch", "delete",
				},
			},
			{
				APIGroups: []string{
					"coordination.k8s.io",
				},
				Resources: []string{
					"leases",
				},
				Verbs: []string{
					"get", "list", "watch", "create", "update", "patch", "delete",
				},
			},

			{
				APIGroups: []string{
					"",
				},
				Resources: []string{
					"namespaces",
				},
				Verbs: []string{
					"get", "list", "watch",
				},
			},
			{
				APIGroups: []string{
					"gateway.networking.k8s.io",
				},
				Resources: []string{
					"gatewayclasses", "grpcroutes", "httproutes", "referencegrants", "tcproutes", "tlsroutes", "udproutes",
				},
				Verbs: []string{
					"get", "list", "watch",
				},
			},
			{
				APIGroups: []string{
					"gateway.networking.k8s.io",
				},
				Resources: []string{
					"gatewayclasses/status", "gateways/status", "httproutes/status", "tcproutes/status", "tlsroutes/status", "udproutes/status",
				},
				Verbs: []string{
					"get", "update",
				},
			},
			{
				APIGroups: []string{
					"gateway.networking.k8s.io",
				},
				Resources: []string{
					"gateways",
				},
				Verbs: []string{
					"get", "list", "update", "watch",
				},
			},
			{
				APIGroups: []string{
					"gateway.networking.k8s.io",
				},
				Resources: []string{
					"grpcroutes/status",
				},
				Verbs: []string{
					"get", "patch", "update",
				},
			},
			{
				APIGroups: []string{
					"gateway.networking.k8s.io",
				},
				Resources: []string{
					"referencegrants/status",
				},
				Verbs: []string{
					"get",
				},
			},
		},
	}
}
