package main

import (
	rbacv1 "k8s.io/api/rbac/v1"
)

// templateData is the struct with data to be used to properly render
// the Kubebuilder annotation files and the KIC RBAC files.
type templateData struct {
	Version    string
	Constraint string
	Roles      []*rbacv1.ClusterRole
}

// helperTemplateData is the struct with data to be used to properly render
// the file with helpers to retrieve the correct rbac generation function
type helperTemplateData struct {
	Versions map[string]string
}

const (
	docTemplate = `// This file is generated by /hack/generators/kic/role-generator. DO NOT EDIT.
// This package contains versioned and generated ControlPlane (Kong Ingress
// Controller) ClusterRoles.
//
// It contains 2 types of files:
// - zz_generated.kong_ingress_controller_rbac_*.go: contains kubebuilder code
//   markers for Kong Ingress Controller's ClusterRoles. Those are retrieved from
//   Kong Ingress Controller's repository for each supported version.
// - zz_generated.controlplane_clusterrole_*.go: contains the generated Go code with
//   ClusterRoles for each supported version of Kong Ingress Controller.
//
package clusterroles
`

	controlplaneControllerRBACTemplate = `// This file is generated by /hack/generators/kic/role-generator. DO NOT EDIT.

package clusterroles

// -----------------------------------------------------------------------------
// Kong Ingress Controller - RBAC
// -----------------------------------------------------------------------------
{{ range .Roles }}
{{ range .Rules }}
//+kubebuilder:rbac:groups={{range .APIGroups}}{{if .}}{{. | join ";"}}{{else}}{{"core" | join ";"}}{{end}}{{end}},resources={{.Resources | join ";"}},verbs={{.Verbs | join ";"}}
{{- end }}
{{- end }}

`

	kicRBACTemplate = `// This file is generated by /hack/generators/kic/role-generator. DO NOT EDIT.

package clusterroles

import (
	"fmt"

	rbacv1 "k8s.io/api/rbac/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	k8sutils "github.com/kong/gateway-operator/pkg/utils/kubernetes"
)

// -----------------------------------------------------------------------------
// ClusterRole generator
// -----------------------------------------------------------------------------

// GenerateNewClusterRoleForControlPlane_{{.Version}} is a helper to generate a ClusterRole
// resource with all the permissions needed by the controlplane deployment.
// It is used for controlplanes that match the semver constraint "{{.Constraint}}"
func GenerateNewClusterRoleForControlPlane_{{.Version}}(controlplaneName string) *rbacv1.ClusterRole {
	return &rbacv1.ClusterRole{
		ObjectMeta: metav1.ObjectMeta{
			GenerateName: k8sutils.TrimGenerateName(fmt.Sprintf("%s-", controlplaneName)),
			Labels: map[string]string{
				"app": controlplaneName,
			},
		},
		Rules: []rbacv1.PolicyRule{
			{{ range .Roles }}
			{{ range .Rules }}
			{
				APIGroups: []string{
					{{ range .APIGroups }}"{{.}}",{{end}}
				},
				Resources: []string{
					{{ range .Resources }}"{{.}}",{{end}}
				},
				Verbs: []string{
					{{ range .Verbs }}"{{.}}",{{end}}
				},
			},
			{{- end }}
			{{- end }}
		},
	}
}

`

	kicRBACHelperTemplate = `// This file is generated by /hack/generators/kic/role-generator. DO NOT EDIT.

package resources

import (
	"fmt"

	"github.com/Masterminds/semver"
	semverv4 "github.com/kong/semver/v4"
	rbacv1 "k8s.io/api/rbac/v1"

	"github.com/kong/gateway-operator/internal/versions"
	"github.com/kong/gateway-operator/pkg/utils/kubernetes/resources/clusterroles"
)

// -----------------------------------------------------------------------------
// ClusterRole generator helper
// -----------------------------------------------------------------------------

var ErrControlPlaneVersionNotSupported = fmt.Errorf("version not supported")

// GenerateNewClusterRoleForControlPlane is a helper function that extract
// the version from the tag, and returns the ClusterRole with all the needed
// permissions.
func GenerateNewClusterRoleForControlPlane(controlplaneName string, image string, validateControlPlaneImage bool) (*rbacv1.ClusterRole, error) {
	versionToUse := versions.DefaultControlPlaneVersion
	var constraint *semver.Constraints

	if image != "" {
		// In dev mode we run in unsafe mode, to allow trying nightly or testing versions
		// of the controlplane. When an invalid or unsupported image is used in dev mode,
		// the clusterRole associated to the default ControlPlane image is used instead.
		v, err := versions.FromImage(image)
		if err != nil && validateControlPlaneImage {
				return nil, err
		}

		supported, err := versions.IsControlPlaneImageVersionSupported(image)
		if err != nil && validateControlPlaneImage {
			return nil, err
		}
		if !validateControlPlaneImage {
			if !supported {
				v, err = semverv4.Parse(versions.DefaultControlPlaneVersion)
				if err != nil {
					return nil, fmt.Errorf("error when creating semver from the default controlplane version: %w", err)
				}
			}
		} else {
			if !supported {
				return nil, ErrControlPlaneVersionNotSupported
			}
		}

		versionToUse = v.String()
	}

	semVersion, err := semver.NewVersion(versionToUse)
	if err != nil {
		return nil, err
	}

	{{ range $constraint, $suffix := .Versions}}
	constraint, err = semver.NewConstraint("{{$constraint}}")
	if err != nil {
		return nil, err
	}
	if constraint.Check(semVersion) {
		cr := clusterroles.GenerateNewClusterRoleForControlPlane_{{$suffix}}(controlplaneName)
		LabelObjectAsControlPlaneManaged(cr)
		return cr, nil
	}
	{{ end}}
	return nil, ErrControlPlaneVersionNotSupported
}

`
)
