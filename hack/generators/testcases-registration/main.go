// This program generates code in integration tests package that registers all test cases defined
// in the package in a test suite. Its purpose is to avoid manual registration of those.
package main

import (
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"sort"
	"strings"
	"text/template"
)

const (
	integrationTestsPackage   = "test/integration"
	generatedRegistrationFile = "test/integration/zz_generated.registered_testcases.go"
)

func main() {
	testNames := getPackageTestFunctionNames(integrationTestsPackage)
	generateRegistrationFile(testNames, generatedRegistrationFile)
}

// getPackageTestFunctionNames returns the names of all test functions in the given package.
func getPackageTestFunctionNames(pkgPath string) []string {
	set := token.NewFileSet()
	packs, err := parser.ParseDir(set, pkgPath, nil, 0)
	if err != nil {
		log.Fatal("Failed to parse package:", err)
	}

	var functions []string
	for _, pack := range packs {
		// We don't want to take into account potential test cases from `*_test` package
		// as that is not meant for external use.
		if strings.HasSuffix(pack.Name, "_test") {
			log.Printf("Skipping test package: %s", pack.Name)
			continue
		}
		for _, f := range pack.Files {
			for _, d := range f.Decls {
				if fn, isFn := d.(*ast.FuncDecl); isFn {
					// Only register regular test functions (excluding TestMain).
					if strings.HasPrefix(fn.Name.String(), "Test") &&
						fn.Name.String() != "TestMain" {
						log.Printf("Found test function: %s", fn.Name.Name)
						functions = append(functions, fn.Name.Name)
					}
				}
			}
		}
	}
	return functions
}

// generateRegistrationFile generates a file with an init function that registers all test cases in the test suite.
func generateRegistrationFile(testNames []string, outputPath string) {
	const registrationTemplate = `// Code generated by hack/generators/testcases-registration/main.go. DO NOT EDIT.
package integration

func init() {
	addTestsToTestSuite({{range .}}
		{{.}},{{end}}
	)
}
`
	tpl, err := template.New("registration").Parse(registrationTemplate)
	if err != nil {
		log.Fatal("Failed to parse template:", err)
	}

	f, err := os.Create(outputPath)
	if err != nil {
		log.Fatal("Failed to open file:", err)
	}
	defer f.Close()

	// Sort test names to make the output deterministic.
	sort.Strings(testNames)
	if err = tpl.Execute(f, testNames); err != nil {
		log.Fatal("Failed to execute template:", err)
	}

	log.Printf("Successfully generated test registration file: %s", outputPath)
}
