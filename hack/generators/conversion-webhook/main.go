package main

import (
	"fmt"
	"os"

	"github.com/kong/kong-operator/internal/webhook/conversion"
	"github.com/samber/lo"
)

var template = `---
# The following patch enables a conversion webhook for the particular CRD.
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: %s
  annotations:
    cert-manager.io/inject-ca-from: kong-system/gateway-operator-serving-cert
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          namespace: kong-system
          name: gateway-operator-webhook-service
          path: /convert
      conversionReviewVersions:
      - v1
`

// Update conversion_webhook.yaml with types for which conversion webhook
// is registered in KO, to make sure that the CRD patch is always up to date.
func main() {
	const filePath = "config/crd/patches/zz_generated_conversion_webhook.yaml"
	file, err := os.Create(filePath)
	if err != nil {
		fmt.Printf("Failed to create %s: %v\n", filePath, err)
		os.Exit(1)
	}
	defer file.Close()

	if _, err := file.WriteString("# This file is auto-generated by KO's hack/generators/conversion-webhook/main.go generator.\n"); err != nil {
		fmt.Printf("Failed to write to %s: %v\n", filePath, err)
		os.Exit(1)
	}

	for _, wh := range conversion.WebhooksToSetup {
		if lo.IsEmpty(wh.GVR) {
			fmt.Printf("GVR is empty for type %T, fix it in the code\n", wh.ForType)
			os.Exit(1)
		}
		content := fmt.Sprintf(template, wh.GVR.GroupResource())
		if _, err := file.WriteString(content); err != nil {
			fmt.Printf("Failed to write to %s: %v\n", filePath, err)
			os.Exit(1)
		}
	}
}
